From f7f49141a5dbe9c99d78196b58c44307fb2e6be3 Mon Sep 17 00:00:00 2001
From: Tk-Glitch <ti3nou@gmail.com>
Date: Wed, 4 Jul 2018 04:30:08 +0200
Subject: glitched - MuQSS

diff --git a/drivers/cpufreq/cpufreq_ondemand.c b/drivers/cpufreq/cpufreq_ondemand.c
index 6b423eebfd5d..61e3271675d6 100644
--- a/drivers/cpufreq/cpufreq_ondemand.c
+++ b/drivers/cpufreq/cpufreq_ondemand.c
@@ -21,10 +21,10 @@
 #include "cpufreq_ondemand.h"
 
 /* On-demand governor macros */
-#define DEF_FREQUENCY_UP_THRESHOLD		(80)
-#define DEF_SAMPLING_DOWN_FACTOR		(1)
+#define DEF_FREQUENCY_UP_THRESHOLD		(45)
+#define DEF_SAMPLING_DOWN_FACTOR		(5)
 #define MAX_SAMPLING_DOWN_FACTOR		(100000)
-#define MICRO_FREQUENCY_UP_THRESHOLD		(95)
+#define MICRO_FREQUENCY_UP_THRESHOLD		(45)
 #define MICRO_FREQUENCY_MIN_SAMPLE_RATE		(10000)
 #define MIN_FREQUENCY_UP_THRESHOLD		(1)
 #define MAX_FREQUENCY_UP_THRESHOLD		(100)
diff --git a/kernel/sched/MuQSS.c b/kernel/sched/MuQSS.c
index 84a1d08d68551..57c3036a68952 100644
--- a/kernel/sched/MuQSS.c
+++ b/kernel/sched/MuQSS.c
@@ -150,7 +150,11 @@ __setup("rqshare=", set_rqshare);
  * Value is in ms and set to a minimum of 6ms.
  * Tunable via /proc interface.
  */
+#ifdef CONFIG_ZENIFY
+int rr_interval __read_mostly = 3;
+#else
 int rr_interval __read_mostly = 6;
+#endif
 
 /*
  * Tunable to choose whether to prioritise latency or throughput, simple
@@ -163,7 +167,11 @@ int sched_interactive __read_mostly = 1;
  * are allowed to run five seconds as real time tasks. This is the total over
  * all online cpus.
  */
+#ifdef CONFIG_ZENIFY
+int sched_iso_cpu __read_mostly = 25;
+#else
 int sched_iso_cpu __read_mostly = 70;
+#endif
 
 /*
  * sched_yield_type - Choose what sort of yield sched_yield will perform.

diff --git a/kernel/sched/MuQSS.c b/kernel/sched/MuQSS.c
--- a/kernel/sched/MuQSS.c
+++ b/kernel/sched/MuQSS.c
@@ -1011,6 +1011,10 @@ static void resched_curr(struct rq *rq)
 #define CPUIDLE_THREAD_BUSY    (16)
 #define CPUIDLE_DIFF_NODE      (32)
 
+#ifdef CONFIG_SCHED_SMT
+DEFINE_STATIC_KEY_FALSE(sched_smt_present);
+#endif
+
 /*
  * The best idle CPU is chosen according to the CPUIDLE ranking above where the
  * lowest value would give the most suitable CPU to schedule p onto next. The

diff --git a/kernel/Kconfig.hz b/kernel/Kconfig.hz
index 2a202a846757..1d9c7ed79b11 100644
--- a/kernel/Kconfig.hz
+++ b/kernel/Kconfig.hz
@@ -5,7 +5,7 @@
 choice
 	prompt "Timer frequency"
 	default HZ_100 if SCHED_MUQSS
-	default HZ_250_NODEF if !SCHED_MUQSS
+	default HZ_750_NODEF if !SCHED_MUQSS
 	help
 	 Allows the configuration of the timer frequency. It is customary
 	 to have the timer interrupt run at 1000 Hz but 100 Hz may be more
@@ -50,6 +50,13 @@ choice
 	 on SMP and NUMA systems and exactly dividing by both PAL and
 	 NTSC frame rates for video and multimedia work.
 
+	config HZ_750_NODEF
+		bool "750 HZ"
+	help
+	 750 Hz is a good timer frequency for desktops. Provides fast
+	 interactivity with great smoothness without sacrificing too
+	 much throughput.
+
 	config HZ_1000_NODEF
 		bool "1000 HZ"
 	help
@@ -63,6 +70,7 @@ config HZ
 	default 100 if HZ_100
 	default 250 if HZ_250_NODEF
 	default 300 if HZ_300_NODEF
+	default 750 if HZ_750_NODEF
 	default 1000 if HZ_1000_NODEF
 
 config SCHED_HRTICK
