From: Andrew Eikum <aeikum@codeweavers.com>
Date: Wed, 15 May 2019 19:57:44 +0000 (-0500)
Subject: winebus.sys: Fix report length calculation.
X-Git-Url: https://source.winehq.org/git/wine.git/commitdiff_plain/042e0625695a82aa71ddf825c693680d5d8aa0dd?hp=044461e8a6f4c1a29c1d72119d2ed207e9d0573b

winebus.sys: Fix report length calculation.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=47188
Signed-off-by: Andrew Eikum <aeikum@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---

diff --git a/dlls/winebus.sys/bus_sdl.c b/dlls/winebus.sys/bus_sdl.c
index 01eb36e..e669b36 100644
--- a/dlls/winebus.sys/bus_sdl.c
+++ b/dlls/winebus.sys/bus_sdl.c
@@ -553,6 +553,7 @@ static BOOL build_mapped_report_descriptor(struct platform_private *ext)
     descript_size += sizeof(CONTROLLER_TRIGGERS);
     descript_size += sizeof(CONTROLLER_BUTTONS);
     descript_size += sizeof(REPORT_HATSWITCH);
+    descript_size += sizeof(REPORT_PADDING);
     descript_size += test_haptic(ext);
 
     ext->axis_start = 0;

From 8cd6d6163983d9ea07fb9e6eb4e263f8a8ffb1f6 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Wed, 15 May 2019 14:56:05 +0200
Subject: [PATCH] winebus.sys: Correctly set HID device input number in device
 endpoint path.

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Aric Stewart <aric@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/winebus.sys/bus.h       |  2 +-
 dlls/winebus.sys/bus_iohid.c |  3 ++-
 dlls/winebus.sys/bus_sdl.c   |  3 ++-
 dlls/winebus.sys/bus_udev.c  | 15 +++++++++++----
 dlls/winebus.sys/main.c      | 38 ++++++++++++++++++++++++++------------
 5 files changed, 42 insertions(+), 19 deletions(-)

diff --git a/dlls/winebus.sys/bus.h b/dlls/winebus.sys/bus.h
index 16e9bf7..df39fb9 100644
--- a/dlls/winebus.sys/bus.h
+++ b/dlls/winebus.sys/bus.h
@@ -43,7 +43,7 @@ void *get_platform_private(DEVICE_OBJECT *device) DECLSPEC_HIDDEN;
 /* HID Plug and Play Bus */
 NTSTATUS WINAPI common_pnp_dispatch(DEVICE_OBJECT *device, IRP *irp) DECLSPEC_HIDDEN;
 DEVICE_OBJECT *bus_create_hid_device(DRIVER_OBJECT *driver, const WCHAR *busidW, WORD vid, WORD pid,
-                                     DWORD version, DWORD uid, const WCHAR *serialW, BOOL is_gamepad,
+                                     WORD input, DWORD version, DWORD uid, const WCHAR *serialW, BOOL is_gamepad,
                                      const GUID *class, const platform_vtbl *vtbl, DWORD platform_data_size) DECLSPEC_HIDDEN;
 DEVICE_OBJECT *bus_find_hid_device(const platform_vtbl *vtbl, void *platform_dev) DECLSPEC_HIDDEN;
 void bus_remove_hid_device(DEVICE_OBJECT *device) DECLSPEC_HIDDEN;
diff --git a/dlls/winebus.sys/bus_iohid.c b/dlls/winebus.sys/bus_iohid.c
index 41a383d..86f32b6 100644
--- a/dlls/winebus.sys/bus_iohid.c
+++ b/dlls/winebus.sys/bus_iohid.c
@@ -345,7 +345,8 @@ static void handle_DeviceMatchingCallback(void *context, IOReturn result, void *
         }
     }
 
-    device = bus_create_hid_device(iohid_driver_obj, busidW, vid, pid, version, uid, str?serial_string:NULL, is_gamepad, &GUID_DEVCLASS_IOHID, &iohid_vtbl, sizeof(struct platform_private));
+    device = bus_create_hid_device(iohid_driver_obj, busidW, vid, pid, -1, version, uid, str?serial_string:NULL,
+            is_gamepad, &GUID_DEVCLASS_IOHID, &iohid_vtbl, sizeof(struct platform_private));
     if (!device)
         ERR("Failed to create device\n");
     else
diff --git a/dlls/winebus.sys/bus_sdl.c b/dlls/winebus.sys/bus_sdl.c
index cd69f83..01eb36e 100644
--- a/dlls/winebus.sys/bus_sdl.c
+++ b/dlls/winebus.sys/bus_sdl.c
@@ -941,7 +941,8 @@ static void try_add_device(SDL_JoystickID index)
         is_xbox_gamepad = (axis_count == 6  && button_count >= 14);
     }
 
-    device = bus_create_hid_device(sdl_driver_obj, sdl_busidW, vid, pid, version, id, serial, is_xbox_gamepad, &GUID_DEVCLASS_SDL, &sdl_vtbl, sizeof(struct platform_private));
+    device = bus_create_hid_device(sdl_driver_obj, sdl_busidW, vid, pid, -1, version, id, serial,
+            is_xbox_gamepad, &GUID_DEVCLASS_SDL, &sdl_vtbl, sizeof(struct platform_private));
 
     if (device)
     {
diff --git a/dlls/winebus.sys/bus_udev.c b/dlls/winebus.sys/bus_udev.c
index be953db..bb6c932 100644
--- a/dlls/winebus.sys/bus_udev.c
+++ b/dlls/winebus.sys/bus_udev.c
@@ -1064,7 +1064,7 @@ static int check_same_device(DEVICE_OBJECT *device, void* context)
 }
 
 static int parse_uevent_info(const char *uevent, DWORD *vendor_id,
-                             DWORD *product_id, WCHAR **serial_number)
+                             DWORD *product_id, WORD *input, WCHAR **serial_number)
 {
     DWORD bus_type;
     char *tmp;
@@ -1110,6 +1110,12 @@ static int parse_uevent_info(const char *uevent, DWORD *vendor_id,
                 found_serial = 1;
             }
         }
+        else if (strcmp(key, "HID_PHYS") == 0)
+        {
+            const char *input_no = strstr(value, "input");
+            if (input_no)
+                *input = atoi(input_no+5 );
+        }
 
 next_line:
         line = strtok_r(NULL, "\n", &saveptr);
@@ -1128,6 +1134,7 @@ static void try_add_device(struct udev_device *dev)
     const char *devnode;
     WCHAR *serial = NULL;
     BOOL is_gamepad = FALSE;
+    WORD input = -1;
     int fd;
     static const CHAR *base_serial = "0000";
 
@@ -1162,7 +1169,7 @@ static void try_add_device(struct udev_device *dev)
         }
 #endif
         parse_uevent_info(udev_device_get_sysattr_value(hiddev, "uevent"),
-                          &vid, &pid, &serial);
+                          &vid, &pid, &input, &serial);
         if (serial == NULL)
             serial = strdupAtoW(base_serial);
     }
@@ -1205,13 +1212,13 @@ static void try_add_device(struct udev_device *dev)
 
     if (strcmp(subsystem, "hidraw") == 0)
     {
-        device = bus_create_hid_device(udev_driver_obj, hidraw_busidW, vid, pid, version, 0, serial, is_gamepad,
+        device = bus_create_hid_device(udev_driver_obj, hidraw_busidW, vid, pid, input, version, 0, serial, is_gamepad,
                                        &GUID_DEVCLASS_HIDRAW, &hidraw_vtbl, sizeof(struct platform_private));
     }
 #ifdef HAS_PROPER_INPUT_HEADER
     else if (strcmp(subsystem, "input") == 0)
     {
-        device = bus_create_hid_device(udev_driver_obj, lnxev_busidW, vid, pid, version, 0, serial, is_gamepad,
+        device = bus_create_hid_device(udev_driver_obj, lnxev_busidW, vid, pid, input, version, 0, serial, is_gamepad,
                                        &GUID_DEVCLASS_LINUXEVENT, &lnxev_vtbl, sizeof(struct wine_input_private));
     }
 #endif
diff --git a/dlls/winebus.sys/main.c b/dlls/winebus.sys/main.c
index 094a25d..0abadf4 100644
--- a/dlls/winebus.sys/main.c
+++ b/dlls/winebus.sys/main.c
@@ -71,7 +71,7 @@ struct device_extension
 {
     struct pnp_device *pnp_device;
 
-    WORD vid, pid;
+    WORD vid, pid, input;
     DWORD uid, version, index;
     BOOL is_gamepad;
     WCHAR *serial;
@@ -119,15 +119,15 @@ void *get_platform_private(DEVICE_OBJECT *device)
     return ext->platform_private;
 }
 
-static DWORD get_vidpid_index(WORD vid, WORD pid)
+static DWORD get_device_index(WORD vid, WORD pid, WORD input)
 {
     struct pnp_device *ptr;
-    DWORD index = 1;
+    DWORD index = 0;
 
     LIST_FOR_EACH_ENTRY(ptr, &pnp_devset, struct pnp_device, entry)
     {
         struct device_extension *ext = (struct device_extension *)ptr->device->DeviceExtension;
-        if (ext->vid == vid && ext->pid == pid)
+        if (ext->vid == vid && ext->pid == pid && ext->input == input)
             index = max(ext->index + 1, index);
     }
 
@@ -136,16 +136,28 @@ static DWORD get_vidpid_index(WORD vid, WORD pid)
 
 static WCHAR *get_instance_id(DEVICE_OBJECT *device)
 {
-    static const WCHAR formatW[] =  {'%','s','\\','V','i','d','_','%','0','4','x','&', 'P','i','d','_','%','0','4','x','&',
-                                     '%','s','_','%','i','\\','%','i','&','%','s','&','%','x',0};
+    static const WCHAR formatW[] =  {'%','s','\\','v','i','d','_','%','0','4','x','&','p','i','d','_','%','0','4','x',
+                                     '\\','%','i','&','%','s','&','%','x','&','%','i',0};
+    static const WCHAR format_inputW[] = {'%','s','\\','v','i','d','_','%','0','4','x','&','p','i','d','_','%','0','4','x','&',
+                                     '%','s','_','%','i','\\','%','i','&','%','s','&','%','x','&','%','i',0};
     struct device_extension *ext = (struct device_extension *)device->DeviceExtension;
     const WCHAR *serial = ext->serial ? ext->serial : zero_serialW;
     DWORD len = strlenW(ext->busid) + strlenW(serial) + 64;
     WCHAR *dst;
 
     if ((dst = HeapAlloc(GetProcessHeap(), 0, len * sizeof(WCHAR))))
-        sprintfW(dst, formatW, ext->busid, ext->vid, ext->pid, ext->is_gamepad ? igW : miW,
-                 ext->index, ext->version, serial, ext->uid);
+    {
+        if (ext->input == (WORD)-1)
+        {
+            sprintfW(dst, formatW, ext->busid, ext->vid, ext->pid,
+                    ext->version, serial, ext->uid, ext->index);
+        }
+        else
+        {
+            sprintfW(dst, format_inputW, ext->busid, ext->vid, ext->pid, ext->is_gamepad ? igW : miW,
+                    ext->input, ext->version, serial, ext->uid, ext->index);
+        }
+    }
 
     return dst;
 }
@@ -197,7 +209,7 @@ static WCHAR *get_compatible_ids(DEVICE_OBJECT *device)
 }
 
 DEVICE_OBJECT *bus_create_hid_device(DRIVER_OBJECT *driver, const WCHAR *busidW, WORD vid, WORD pid,
-                                     DWORD version, DWORD uid, const WCHAR *serialW, BOOL is_gamepad,
+                                     WORD input, DWORD version, DWORD uid, const WCHAR *serialW, BOOL is_gamepad,
                                      const GUID *class, const platform_vtbl *vtbl, DWORD platform_data_size)
 {
     static const WCHAR device_name_fmtW[] = {'\\','D','e','v','i','c','e','\\','%','s','#','%','p',0};
@@ -212,8 +224,9 @@ DEVICE_OBJECT *bus_create_hid_device(DRIVER_OBJECT *driver, const WCHAR *busidW,
     NTSTATUS status;
     DWORD length;
 
-    TRACE("(%p, %s, %04x, %04x, %u, %u, %s, %u, %s, %p, %u)\n", driver, debugstr_w(busidW), vid, pid,
-          version, uid, debugstr_w(serialW), is_gamepad, debugstr_guid(class), vtbl, platform_data_size);
+    TRACE("(%p, %s, %04x, %04x, %04x, %u, %u, %s, %u, %s, %p, %u)\n", driver,
+            debugstr_w(busidW), vid, pid, input, version, uid, debugstr_w(serialW),
+            is_gamepad, debugstr_guid(class), vtbl, platform_data_size);
 
     if (!(pnp_dev = HeapAlloc(GetProcessHeap(), 0, sizeof(*pnp_dev))))
         return NULL;
@@ -236,9 +249,10 @@ DEVICE_OBJECT *bus_create_hid_device(DRIVER_OBJECT *driver, const WCHAR *busidW,
     ext->pnp_device         = pnp_dev;
     ext->vid                = vid;
     ext->pid                = pid;
+    ext->input              = input;
     ext->uid                = uid;
     ext->version            = version;
-    ext->index              = get_vidpid_index(vid, pid);
+    ext->index              = get_device_index(vid, pid, input);
     ext->is_gamepad         = is_gamepad;
     ext->serial             = strdupW(serialW);
     ext->busid              = busidW;
-- 
2.1.4

From 5ff326f80147f4608fd64ad37510d0cff330676e Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Tue, 7 May 2019 09:02:22 -0500
Subject: [PATCH] winebus.sys: Pack hatswitch values into button bytes.

Signed-off-by: Andrew Eikum <aeikum@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/winebus.sys/bus_sdl.c    | 80 +++++++++++++++++++++++------------
 dlls/winebus.sys/controller.h |  2 +-
 2 files changed, 53 insertions(+), 29 deletions(-)

diff --git a/dlls/winebus.sys/bus_sdl.c b/dlls/winebus.sys/bus_sdl.c
index 59c16980ac4..cd69f831d76 100644
--- a/dlls/winebus.sys/bus_sdl.c
+++ b/dlls/winebus.sys/bus_sdl.c
@@ -123,7 +123,7 @@ struct platform_private
     int button_start;
     int axis_start;
     int ball_start;
-    int hat_start;
+    int hat_bit_offs; /* hatswitches are reported in the same bytes as buttons */
 
     int report_descriptor_size;
     BYTE *report_descriptor;
@@ -164,10 +164,6 @@ static const BYTE CONTROLLER_BUTTONS[] = {
     0x95, CONTROLLER_NUM_BUTTONS, /* REPORT_COUNT (11) */
     0x75, 0x01, /* REPORT_SIZE (1) */
     0x81, 0x02, /* INPUT (Data,Var,Abs) */
-    /* padding */
-    0x95, 0x05, /* REPORT_COUNT (5) */
-    0x75, 0x01, /* REPORT_SIZE (1) */
-    0x81, 0x03, /* INPUT (Cnst,Var,Abs) */
 };
 
 static const BYTE CONTROLLER_AXIS [] = {
@@ -302,22 +298,50 @@ static void set_ball_value(struct platform_private *ext, int index, int value1,
 
 static void set_hat_value(struct platform_private *ext, int index, int value)
 {
-    int offset;
-    offset = ext->hat_start + index;
+    int byte = ext->button_start + (ext->hat_bit_offs + 4 * index) / 8;
+    int bit_offs = (ext->hat_bit_offs + 4 * index) % 8;
+    int num_low_bits, num_high_bits;
+    unsigned char val, low_mask, high_mask;
+
+    /* 4-bit hatswitch value is packed into button bytes */
+    if (bit_offs <= 4)
+    {
+        num_low_bits = 4;
+        num_high_bits = 0;
+        low_mask = 0xf;
+        high_mask = 0;
+    }
+    else
+    {
+        num_low_bits = 8 - bit_offs;
+        num_high_bits = 4 - num_low_bits;
+        low_mask = (1 << num_low_bits) - 1;
+        high_mask = (1 << num_high_bits) - 1;
+    }
+
     switch (value)
     {
         /* 8 1 2
          * 7 0 3
          * 6 5 4 */
-        case SDL_HAT_CENTERED: ext->report_buffer[offset] = 0; break;
-        case SDL_HAT_UP: ext->report_buffer[offset] = 1; break;
-        case SDL_HAT_RIGHTUP: ext->report_buffer[offset] = 2; break;
-        case SDL_HAT_RIGHT: ext->report_buffer[offset] = 3; break;
-        case SDL_HAT_RIGHTDOWN: ext->report_buffer[offset] = 4; break;
-        case SDL_HAT_DOWN: ext->report_buffer[offset] = 5; break;
-        case SDL_HAT_LEFTDOWN: ext->report_buffer[offset] = 6; break;
-        case SDL_HAT_LEFT: ext->report_buffer[offset] = 7; break;
-        case SDL_HAT_LEFTUP: ext->report_buffer[offset] = 8; break;
+        case SDL_HAT_CENTERED: val = 0; break;
+        case SDL_HAT_UP: val = 1; break;
+        case SDL_HAT_RIGHTUP: val = 2; break;
+        case SDL_HAT_RIGHT: val = 3; break;
+        case SDL_HAT_RIGHTDOWN: val = 4; break;
+        case SDL_HAT_DOWN: val = 5; break;
+        case SDL_HAT_LEFTDOWN: val = 6; break;
+        case SDL_HAT_LEFT: val = 7; break;
+        case SDL_HAT_LEFTUP: val = 8; break;
+        default: return;
+    }
+
+    ext->report_buffer[byte] &= ~(low_mask << bit_offs);
+    ext->report_buffer[byte] |= (val & low_mask) << bit_offs;
+    if (high_mask)
+    {
+        ext->report_buffer[byte + 1] &= ~high_mask;
+        ext->report_buffer[byte + 1] |= val & high_mask;
     }
 }
 
@@ -423,19 +447,17 @@ static BOOL build_report_descriptor(struct platform_private *ext)
     if (button_count)
     {
         descript_size += sizeof(REPORT_BUTTONS);
-        if (button_count % 8)
-            descript_size += sizeof(REPORT_PADDING);
-        report_size += (button_count + 7) / 8;
     }
 
     hat_count = pSDL_JoystickNumHats(ext->sdl_joystick);
-    ext->hat_start = report_size;
+    ext->hat_bit_offs = button_count;
     if (hat_count)
     {
         descript_size += sizeof(REPORT_HATSWITCH);
-        report_size += hat_count;
     }
 
+    report_size += (button_count + hat_count * 4 + 7) / 8;
+
     descript_size += test_haptic(ext);
 
     TRACE("Report Descriptor will be %i bytes\n", descript_size);
@@ -468,11 +490,6 @@ static BOOL build_report_descriptor(struct platform_private *ext)
     if (button_count)
     {
         report_ptr = add_button_block(report_ptr, 1, button_count);
-        if (button_count % 8)
-        {
-            BYTE padding = 8 - (button_count % 8);
-            report_ptr = add_padding_block(report_ptr, padding);
-        }
     }
     if (hat_count)
         report_ptr = add_hatswitch(report_ptr, hat_count);
@@ -540,9 +557,11 @@ static BOOL build_mapped_report_descriptor(struct platform_private *ext)
 
     ext->axis_start = 0;
     ext->button_start = CONTROLLER_NUM_AXES * sizeof(WORD);
-    ext->hat_start = ext->button_start + (CONTROLLER_NUM_BUTTONS + 7) / 8;
+    ext->hat_bit_offs = CONTROLLER_NUM_BUTTONS;
 
-    ext->buffer_length = (CONTROLLER_NUM_BUTTONS + 7) / 8 + CONTROLLER_NUM_AXES * sizeof(WORD) + CONTROLLER_NUM_HATSWITCHES;
+    ext->buffer_length = (CONTROLLER_NUM_BUTTONS + CONTROLLER_NUM_HATSWITCHES * 4 + 7) / 8
+        + CONTROLLER_NUM_AXES * sizeof(WORD)
+        + 2/* unknown constant*/;
 
     TRACE("Report Descriptor will be %i bytes\n", descript_size);
     TRACE("Report will be %i bytes\n", ext->buffer_length);
@@ -566,6 +585,7 @@ static BOOL build_mapped_report_descriptor(struct platform_private *ext)
     memcpy(report_ptr, CONTROLLER_BUTTONS, sizeof(CONTROLLER_BUTTONS));
     report_ptr += sizeof(CONTROLLER_BUTTONS);
     report_ptr = add_hatswitch(report_ptr, 1);
+    report_ptr = add_padding_block(report_ptr, 16);/* unknown constant */
     report_ptr += build_haptic(ext, report_ptr);
     memcpy(report_ptr, REPORT_TAIL, sizeof(REPORT_TAIL));
 
@@ -584,6 +604,10 @@ static BOOL build_mapped_report_descriptor(struct platform_private *ext)
 
     set_hat_value(ext, 0, compose_dpad_value(ext->sdl_controller));
 
+    /* unknown constant */
+    ext->report_buffer[12] = 0x89;
+    ext->report_buffer[13] = 0xc5;
+
     return TRUE;
 }
 
diff --git a/dlls/winebus.sys/controller.h b/dlls/winebus.sys/controller.h
index 5fce16b1f6f..293290dbb51 100644
--- a/dlls/winebus.sys/controller.h
+++ b/dlls/winebus.sys/controller.h
@@ -79,7 +79,7 @@ static const BYTE REPORT_HATSWITCH[] = {
     0x25, 0x08,  /* LOGICAL_MAXIMUM (0x08) */
     0x35, 0x00,  /* PHYSICAL_MINIMUM (0) */
     0x45, 0x08,  /* PHYSICAL_MAXIMUM (8) */
-    0x75, 0x08,  /* REPORT_SIZE (8) */
+    0x75, 0x04,  /* REPORT_SIZE (4) */
     0x95, 0x01,  /* REPORT_COUNT (1) */
     0x81, 0x02,  /* INPUT (Data,Var,Abs) */
 };
 
 
