# Created by: Tk-Glitch <ti3nou at gmail dot com>

pkgname=wine-tkg-git
pkgver=3.16.r0.g64d9f309b7.staging.esync.pba
pkgrel=55
_winesrcdir='wine-git'
_stgsrcdir='wine-staging-git'
_pbasrcdir='wine-pba'
_esyncsrcdir='esync'
_dxvksrcdir='dxvk'
_where=$PWD # track basedir as different Arch based distros are moving srcdir around

# If the state tracker isn't found, prompt the user with useful stuff.
# This is to prevent the prompt to come back until packaging is done
if [ ! -e $_where/BIG_UGLY_COINMINER ]; then
  msg2 '#################################################################'
  msg2 ''
  msg2 'You can configure your wine build flavour (right now for example)'
  msg2 'by editing the customization.cfg file next to this PKGBUILD.'
  msg2 ''
  msg2 'Set _OPTIMIZED to "false" if you want to share the package !'
  msg2 ''
  msg2 "Current path is '$_where'"
  msg2 ''
  msg2 'If you are rebuilding using the same configuration, you may want'
  msg2 'to delete/move previously built package and clear src dir.'
  msg2 ''
  msg2 'If your previous build was stopped/crashed, clear src dir.'
  msg2 ''
  msg2 '###################################TkG##########was##########here'
  read -p "When you are ready, press enter to continue."
fi

source $_where/customization.cfg # load configuration from file

# custom plain wine commit to pass to git
if [ $_use_staging == "false" ] && [ -n "$_plain_version" ]; then
  _plain_commit="#commit=$_plain_version"
fi

# custom staging commit to pass to git
if [ $_use_staging == "true" ] && [ -n "$_staging_version" ]; then
  _staging_commit="#commit=$_staging_version"
fi

# custom dxvk commit to pass to git
if [ $_use_dxvk == "true" ]; then
  _dxvk_commit="#commit=$_dxvk_version"
fi

pkgdesc='This "Wine to rule them all" package is the result of some random pkgbuild found online. Looks safe to me, amirite? Some variants of it can be found in lutris runners.'
url='https://github.com/Tk-Glitch/PKGBUILDS/tree/master/wine-tkg-git'
arch=('x86_64')
options=('staticlibs' 'ccache')
license=('LGPL')
depends=(
    'attr'                  'lib32-attr'
    'fontconfig'            'lib32-fontconfig'
    'lcms2'                 'lib32-lcms2'
    'libxml2'               'lib32-libxml2'
    'libxcursor'            'lib32-libxcursor'
    'libxrandr'             'lib32-libxrandr'
    'libxdamage'            'lib32-libxdamage'
    'libxi'                 'lib32-libxi'
    'gettext'               'lib32-gettext'
    'freetype2'             'lib32-freetype2'
    'glu'                   'lib32-glu'
    'libsm'                 'lib32-libsm'
    'gcc-libs'              'lib32-gcc-libs'
    'libpcap'               'lib32-libpcap'
    'desktop-file-utils'
)
makedepends=('git' 'autoconf' 'ncurses' 'bison' 'perl' 'fontforge' 'flex'
    'gcc>=4.5.0-2'
    'giflib'                'lib32-giflib'
    'libpng'                'lib32-libpng'
    'gnutls'                'lib32-gnutls'
    'libxinerama'           'lib32-libxinerama'
    'libxcomposite'         'lib32-libxcomposite'
    'libxmu'                'lib32-libxmu'
    'libxxf86vm'            'lib32-libxxf86vm'
    'libldap'               'lib32-libldap'
    'mpg123'                'lib32-mpg123'
    'openal'                'lib32-openal'
    'v4l-utils'             'lib32-v4l-utils'
    'alsa-lib'              'lib32-alsa-lib'
    'libxcomposite'         'lib32-libxcomposite'
    'mesa'                  'lib32-mesa'
    'libgl'                 'lib32-libgl'
    'libxslt'               'lib32-libxslt'
    'libpulse'              'lib32-libpulse'
    'libva'                 'lib32-libva'
    'gtk3'                  'lib32-gtk3'
    'gst-plugins-base-libs' 'lib32-gst-plugins-base-libs'
    'vulkan-icd-loader'     'lib32-vulkan-icd-loader'
    'sdl2'                  'lib32-sdl2'
    'samba'                 'schedtool'
    'meson'                 'ninja'
)
optdepends=(
    'giflib'                'lib32-giflib'
    'libpng'                'lib32-libpng'
    'libldap'               'lib32-libldap'
    'gnutls'                'lib32-gnutls'
    'mpg123'                'lib32-mpg123'
    'openal'                'lib32-openal'
    'v4l-utils'             'lib32-v4l-utils'
    'libpulse'              'lib32-libpulse'
    'alsa-plugins'          'lib32-alsa-plugins'
    'alsa-lib'              'lib32-alsa-lib'
    'libjpeg-turbo'         'lib32-libjpeg-turbo'
    'libxcomposite'         'lib32-libxcomposite'
    'libxinerama'           'lib32-libxinerama'
    'ncurses'               'lib32-ncurses'
    'libxslt'               'lib32-libxslt'
    'libva'                 'lib32-libva'
    'gtk3'                  'lib32-gtk3'
    'gst-plugins-base-libs' 'lib32-gst-plugins-base-libs'
    'vulkan-icd-loader'     'lib32-vulkan-icd-loader'
    'sdl2'                  'lib32-sdl2'
    'cups'                  'zapcc'
    'samba'                 'clang'
    'dosbox'                'ccache'
    'vkd3d'                 'lib32-vkd3d'
)
source=("$_winesrcdir"::"git://source.winehq.org/git/wine.git${_plain_commit}"
		"$_stgsrcdir"::"git+https://github.com/wine-staging/wine-staging.git${_staging_commit}"
		"$_dxvksrcdir"::"git+https://github.com/doitsujin/dxvk.git${_dxvk_commit}"
		"https://github.com/zfigura/wine/releases/download/esync${_esync_version}/esync.tgz"
		'steam.patch'
		'poe-fix.patch'
		'f4skyrimse-fix.patch'
		'harmony-fix.diff'
		'30-win32-aliases.conf'
		'wine-binfmt.conf'
		'CSMT-toggle.patch'
		'esync-staging-fixes.patch'
		'esync-compat-fixes.patch'
		'esync-314+-compat-fixes.patch'
		'esync-no_alloc_handle.patch'
		'PBA313-.patch'
		'PBA314+.patch'
		'fallout4.patch'
		'fortnite.patch'
		'launch-with-dedicated-gpu-desktop-entry.patch'
		'lowlatency_audio.patch'
		'dxvk-winelib.patch')

provides=(
	"wine=$pkgver"
	"wine-wow64=$pkgver"
	"wine-staging=$pkgver"
	"wine-esync=$pkgver"
)

conflicts=('wine' 'wine-wow64' 'wine-staging' 'wine-esync')
makedepends=(${makedepends[@]} ${depends[@]})
install=wine.install

user_patcher() {
	# To patch the user because all your base are belong to us
	if [[ $(find $_where -name "*.${_userpatch_ext}patch") ]]; then
	  if [ "$_user_patches_no_confirm" != "true" ]; then
	  read -p "At least one of your own ${_userpatch_target} patches were found (*.${_userpatch_ext}patch). Do you want to install it/them? - Be careful with that ;)`echo $'\n> N/y : '`" _CONDITION;
	  fi
	  if [ "$_CONDITION" == "y" ] || [ "$_user_patches_no_confirm" == "true" ]; then
	    for _f in $_where/*.${_userpatch_ext}patch; do
	    if [ -e "${_f}" ]; then
	      msg2 "######################################################"
	      msg2 ""
	      msg2 "Applying your own ${_userpatch_target} patch ${_f}"
	      msg2 ""
	      msg2 "######################################################"
	      patch -Np1 < ${_f}
	      echo "Applied your own patch ${_f}" >> $_where/last_build_config.log
	    fi
	    done
	  fi
	fi
	if [[ $(find $_where -name "*.${_userpatch_ext}revert") ]]; then
	  if [ "$_user_patches_no_confirm" != "true" ]; then
	  read -p "At least one of your own ${_userpatch_target} 'to revert' patches were found (*.${_userpatch_ext}revert). Do you want to install it/them? - Be careful with that ;)`echo $'\n> N/y : '`" _CONDITION;
	  fi
	  if [ "$_CONDITION" == "y" ] || [ "$_user_patches_no_confirm" == "true" ]; then
	    for _f in $_where/*.${_userpatch_ext}revert; do
	    if [ -e "${_f}" ]; then
	      msg2 "######################################################"
	      msg2 ""
	      msg2 "Reverting your own ${_userpatch_target} patch ${_f}"
	      msg2 ""
	      msg2 "######################################################"
	      patch -Np1 -R < ${_f}
	      echo "Reverted your own patch ${_f}" >> $_where/last_build_config.log
	    fi
	    done
	  fi
	fi
}

pkgver() {
	# retrieve current wine-staging version
	cd "${srcdir}/${_stgsrcdir}"
	local _stagingTag="$(git tag --sort='version:refname' | tail -n1 | sed 's/-/./g;s/^v//;s/\.rc/rc/')"
	local _stagingVer="$(git describe --long --tags \
								| sed 's/\([^-]*-g\)/r\1/;s/-/./g;s/^v//;s/\.rc/rc/' \
								| sed "s/^latest.release/${_stagingTag}/")"

	# retrieve current wine version
	cd "${srcdir}/${_winesrcdir}"
	local _wineVer="$(git describe --long --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g;s/^v//;s/\.rc/rc/')"

	if [ $_use_staging == "true" ]; then
	  _stg=".staging"
	  msg2 "Using staging patchset"
	fi

	if [ $_use_esync == "true" ]; then
	  _zf=".esync"
	  msg2 "Using esync patchset"
	fi

	if [ $_use_pba == "true" ]; then
	  _firerat=".pba"
	  msg2 "Using pba (${_pba_version}) patchset"
	fi

	if [ $_use_gallium_nine == "true" ]; then
	  _nine=".nine"
	  msg2 "Using gallium nine patchset"
	fi

	if [ $_use_vkd3d == "true" ]; then
	  _vkd3d=".vkd3d"
	  msg2 "Using VKD3D for d3d12 translation"
	fi

	if [ $_use_dxvk == "true" ]; then
	  _doitsujin=".dxvk"
	  msg2 "Using DXVK winelib for d3d10 and d3d11 translation"
	fi

	# version string
	printf '%s%s%s%s%s%s%s' "${_wineVer#wine.}" "$_stg" "$_zf" "$_firerat" "$_nine" "$_vkd3d" "$_doitsujin"
}

prepare() {
	# state tracker start - FEAR THE MIGHTY COIN MINER
	touch "${_where}"/BIG_UGLY_COINMINER

	if [ $_NUKR == "true" ]; then
	  rm -rf $pkgdir # Nuke the entire pkg folder so it'll get regenerated clean on next build
	  msg2 'pkgdir was nuked. See ya !'
	fi

	cd "${srcdir}"/"${_winesrcdir}"

	# restore the wine tree to its git origin state, without wine-staging patches
	# (necessary for reapplying wine-staging patches in succedent builds,
	# otherwise the patches will fail to be reapplied)
	msg2 'Cleaning wine source code tree...'
	git reset --hard HEAD 	# restore tracked files
	git clean -xdf 			# delete untracked files

	if [ $_use_staging == "true" ]; then
	  # change back to the wine upstream commit that this version of wine-staging is based in
	  msg2 'Changing wine HEAD to the wine-staging base commit...'
	  git checkout "$(../"$_stgsrcdir"/patches/patchinstall.sh --upstream-commit)"
	fi

	# output config to logfile
	echo "# Last $pkgname configuration :" > $_where/last_build_config.log
	echo "" >> $_where/last_build_config.log

	if [ $_use_staging == "false" ] && [ -n "$_plain_version" ]; then
	  echo "Using custom plain wine commit $_plain_version" >> $_where/last_build_config.log # output to log
	fi

	if [ $_use_staging == "true" ] && [ -n "$_staging_version" ]; then
	  echo "Using custom staging commit $_staging_version" >> $_where/last_build_config.log # output to log
	fi

	if [ $_use_staging == "true" ]; then
	  echo "Using staging patchset" >> $_where/last_build_config.log
	fi

	if [ $_use_esync == "true" ]; then
	  echo "Using esync patchset" >> $_where/last_build_config.log
	fi

	if [ $_use_pba == "true" ]; then
	  # If using a wine version that includes cf9536b, apply 3.14+ fixes
	  if [ 0 -eq $(git log | grep cf9536b6bfbefbf5003c7633446a91f6e399c4de > /dev/null 2> /dev/null; echo $?) ]; then # kernel32: Add AttachConsole implementation commit
	    _pba_version="314+"
	  else
	    _pba_version="313-"
	  fi
	  echo "Using pba (${_pba_version}) patchset" >> $_where/last_build_config.log
	fi

	if [ $_use_gallium_nine == "true" ]; then
	  echo "Using gallium nine patchset" >> $_where/last_build_config.log
	fi

	if [ $_use_vkd3d == "true" ]; then
	  _withvkd3d='--with-vkd3d'
	  echo "Using VKD3D for d3d12 translation" >> $_where/last_build_config.log
	fi

	if [ $_use_dxvk == "true" ]; then
	  echo "Using DXVK winelib for d3d10 and d3d11 translation" >> $_where/last_build_config.log
	fi

	echo "" >> $_where/last_build_config.log

	# apply compiler choice and optimizations
	if [ $_COMPILEWITH == 'clang' ]; then
	  export CC="clang"
	  export CXX="clang++"
	  echo "Using clang compiler" >> $_where/last_build_config.log
	  if [ $_OPTIMIZED == 'true' ]; then
	    export COMMON_FLAGS="-std=gnu89 -g -march=native -pipe -O3"
	    export LDFLAGS="-O3"
	  fi
	elif [ $_COMPILEWITH == 'zapcc' ]; then
	  export CC="zapcc"
	  export CXX="zapcc++"
	  echo "Using zapcc compiler" >> $_where/last_build_config.log
	  if [ $_OPTIMIZED == 'true' ]; then
	    export COMMON_FLAGS="-std=gnu89 -g -march=native -pipe -O3"
	    export LDFLAGS="-O3"
	  fi
	else
	  echo "Using gcc compiler" >> $_where/last_build_config.log
	  if [ $_OPTIMIZED == 'true' ]; then
	    export COMMON_FLAGS="-march=native -pipe -O2"
	    export LDFLAGS="-O2"
	  fi
	fi

	if [ $_OPTIMIZED == 'true' ]; then
	  export CFLAGS="${COMMON_FLAGS}"
	  export CXXFLAGS="${COMMON_FLAGS}"
	  echo "With native optimizations" >> $_where/last_build_config.log
	fi

	echo "" >> $_where/last_build_config.log

	# workaround for FS#55128
	# https://bugs.archlinux.org/task/55128
	# https://bugs.winehq.org/show_bug.cgi?id=43530
	export CFLAGS="${CFLAGS/-fno-plt/}"
	export LDFLAGS="${LDFLAGS/,-z,now/}"

	# patch for 32bit font smoothing
	if [ $_harmony_fix == "true" ]; then
	  patch -Np1 < ../'harmony-fix.diff'
	  echo "Applied harmony fix" >> $_where/last_build_config.log
	fi

	# Patch to allow Path of Exile to run with DirectX11
	# https://bugs.winehq.org/show_bug.cgi?id=42695
	if [ $_poe_fix == "true" ]; then
	  patch -Np1 < ../'poe-fix.patch'
	  echo "Applied Path of Exile DX11 fix" >> $_where/last_build_config.log
	fi

	# Workaround for F4SE/SkyrimSE Script Extender
	# https://github.com/hdmap/wine-hackery/tree/master/f4se
	if [ $_f4skyrimse_fix == "true" ]; then
	  patch -Np1 < ../'f4skyrimse-fix.patch'
	  echo "Applied F4/SkyrimSE Script Extender fix" >> $_where/last_build_config.log
	fi

	# Fallout 4 dsound workaround
	# https://bugs.winehq.org/show_bug.cgi?id=41271
	if [ $_fallout4dsound_fix == "true" ]; then
	  patch -Np1 < ../'fallout4.patch'
	  echo "Applied Fallout 4 Dsound workaround" >> $_where/last_build_config.log
	fi

	# steam crossover hack for store/web functionality
	# https://bugs.winehq.org/show_bug.cgi?id=39403
	if [ $_steam_fix == "true" ]; then
	  patch -Np1 < ../'steam.patch'
	  echo "Applied steam crossover hack" >> $_where/last_build_config.log
	fi

	# FFXIV mouse jitter fix
	if [ $_ffxiv_mouse_patch == "true" ] && [ $_use_staging == "true" ]; then
	  _ffxiv_mouse_fix="-W server-send_hardware_message"
	  echo "Applied FFXIV mouse jittering fix" >> $_where/last_build_config.log
	fi

	# Disable winepulse pulseaudio patchset
	if [ $_staging_pulse_disable == "true" ] && [ $_use_staging == "true" ]; then
	  _winepulse_disable="-W winepulse-PulseAudio_Support"
	  echo "Disabled the staging winepulse patchset" >> $_where/last_build_config.log
	fi

	# CSMT toggle patch - Corrects the CSMT toggle to be more logical
	if [ $_CSMT_toggle == "true" ] && [ $_use_staging == "true" ]; then
	  cd "${srcdir}"/"${_stgsrcdir}"
	  patch -Np1 < ../'CSMT-toggle.patch'
	  cd "${srcdir}"/"${_winesrcdir}"
	  echo "Applied CSMT toggle logic patch" >> $_where/last_build_config.log
	fi

	# wine-staging user patches
	if [ $_user_patches == "true" ] && [ $_use_staging == "true" ]; then
	  _userpatch_target="wine-staging"
	  _userpatch_ext="mystaging"
	  cd "${srcdir}"/"${_stgsrcdir}"
	  user_patcher
	  cd "${srcdir}"/"${_winesrcdir}"
	fi

	if [ $_use_staging == "true" ]; then
	  if [ $_use_esync == "true" ]; then
	    # msvfw32-ICGetDisplayFormat # esync already has its own implementation so it needs to be disabled
	    # server-Desktop_Refcount and patchsets depending on it (ws2_32-WSACleanup, ws2_32-TransmitFile, server-Pipe_ObjectName) needs the no_alloc_handle patch to not break esync
	    _esync_exclusions="-W msvfw32-ICGetDisplayFormat"
	  fi
	  msg2 'Applying wine-staging patches...'
	  "${srcdir}"/"${_stgsrcdir}"/patches/patchinstall.sh DESTDIR="${srcdir}/${_winesrcdir}" --all $_esync_exclusions $_ffxiv_mouse_fix $_winepulse_disable
	fi

	# esync
	if [ $_use_esync == "true" ]; then
	  if [ $_use_staging == "true" ]; then
	    cd "${srcdir}"/"${_esyncsrcdir}"
	    # fixes for esync patches to apply to staging
	    patch -Np1 < ../'esync-staging-fixes.patch'
	    cd "${srcdir}"/"${_winesrcdir}"
	  fi

	  cd "${srcdir}"/"${_esyncsrcdir}"
	  patch -Np1 < ../'esync-compat-fixes.patch'
	  cd "${srcdir}"/"${_winesrcdir}"

	  # if using a wine version that includes 57212f6, apply 3.14+ fixes
	  if [ 0 -eq $(git log | grep 57212f64f8e4fef0c63c633940e13d407c0f2069 > /dev/null 2> /dev/null; echo $?) ]; then # wined3d: Move OpenGL initialisation code to adapter_gl.c commit
	    cd "${srcdir}"/"${_esyncsrcdir}"
	    patch -Np1 < ../'esync-314+-compat-fixes.patch'
	    cd "${srcdir}"/"${_winesrcdir}"
	  fi

	  # wine-esync patches
	  for _f in "${srcdir}"/"${_esyncsrcdir}"/*.patch; do
	    git apply -C1 --verbose < ${_f}
	  done

	  # fix for server-Desktop_Refcount on esync
	  if [ $_use_staging == "true" ]; then
	    patch -Np1 < ../'esync-no_alloc_handle.patch'
	  fi
	fi

	# Launch with dedicated gpu desktop entry patch
	if [ $_launch_with_dedicated_gpu == "true" ]; then
	  patch -Np1 < ../'launch-with-dedicated-gpu-desktop-entry.patch'
	  echo "Applied launch with dedicated gpu desktop entry patch" >> $_where/last_build_config.log
	fi

	# Low latency alsa audio - https://blog.thepoon.fr/osuLinuxAudioLatency/
	if [ $_lowlatency_audio == "true" ] && [ $_use_staging == "true" ]; then
	  patch -Np1 < ../'lowlatency_audio.patch'
	  echo "Applied low latency alsa audio patch" >> $_where/last_build_config.log
	fi

	# Fortnite Fix - Currently not working anymore
	if [ $_fortnite_fix == "true" ]; then
	  patch -Np1 < ../'fortnite.patch'
	  echo "Applied Fortnite crashfix" >> $_where/last_build_config.log
	fi

	# apply wine-pba patches
	if [ $_use_pba == "true" ]; then
	  mkdir -p "${srcdir}/${_pbasrcdir}/patches"
	  cd "${srcdir}/${_pbasrcdir}"
	  if [ $_pba_version == "314+" ]; then
	    patch -Np1 < ../'PBA314+.patch'
	  elif [ $_pba_version == "313-" ]; then
	    patch -Np1 < ../'PBA313-.patch'
	  fi
	  cd "${srcdir}"/"${_winesrcdir}"
	  for _f in $(ls "${srcdir}"/"${_pbasrcdir}"/'patches'); do
	      patch -Np1 < "${srcdir}"/"${_pbasrcdir}"/'patches'/${_f}
	  done
	fi

	# d3d9 patches
	if [ $_use_gallium_nine == "true" ] && [ $_use_staging == "true" ]; then
	  wget -O $_where/wine-d3d9.patch https://raw.githubusercontent.com/sarnex/wine-d3d9-patches/master/wine-d3d9.patch
	  wget -O $_where/staging-helper.patch https://raw.githubusercontent.com/sarnex/wine-d3d9-patches/master/staging-helper.patch
	  patch -Np1 < $_where/staging-helper.patch
	  patch -Np1 < $_where/wine-d3d9.patch
	  autoreconf -f
	  _withd3d9nine='--with-d3d9-nine'
	elif [ $_use_gallium_nine == "true" ] && [ $_use_staging == "false" ]; then
	  wget -O $_where/wine-d3d9.patch https://raw.githubusercontent.com/sarnex/wine-d3d9-patches/master/wine-d3d9.patch
	  wget -O $_where/d3d9-helper.patch https://raw.githubusercontent.com/sarnex/wine-d3d9-patches/master/d3d9-helper.patch
	  patch -Np1 < $_where/d3d9-helper.patch
	  patch -Np1 < $_where/wine-d3d9.patch
	  autoreconf -f
	  _withd3d9nine='--with-d3d9-nine'
	fi

	# wine user patches
	if [ $_user_patches == "true" ]; then
	  _userpatch_target="plain-wine"
	  _userpatch_ext="my"
	  user_patcher
	fi

	# dxvk user patches
	if [ $_user_patches == "true" ] && [ $_use_dxvk == "true" ]; then
	  _userpatch_target="dxvk"
	  _userpatch_ext="mydxvk"
	  cd "${srcdir}"/"${_dxvksrcdir}"
	  user_patcher
	  cd "${srcdir}"/"${_winesrcdir}"
	fi

	# fix path of opencl headers
	sed 's|OpenCL/opencl.h|CL/opencl.h|g' -i configure*

	# delete old build dirs (from previous builds)
	rm	-rf "${srcdir}"/"${pkgname}"-{32,64}-build

	# no compilation
	if [ $_NOCOMPILE == "true" ]; then
	  rm -v $_where/esync.tgz # User may want to switch esync releases. Better nuke it to stay fresh
	  msg2 'make prepare function fail by using Gandalf'
	  YOU_SHALL_NOT_PASS
	fi

	# create new build dirs
	mkdir -p "${srcdir}"/"${pkgname}"-64-build
	mkdir -p "${srcdir}"/"${pkgname}"-32-build

	cd $_where # this is needed on version update not to get lost in srcdir
}

build() {

	cd "${srcdir}"

	# build wine 64-bit
	# (according to the wine wiki, this 64-bit/32-bit building order is mandatory)
	msg2 'Building Wine-64...'
	cd  "${srcdir}"/"${pkgname}"-64-build
	../${_winesrcdir}/configure \
		--prefix='/usr' \
		--libdir='/usr/lib' \
		--with-x \
		--with-gstreamer \
		--enable-win64 \
		--with-xattr \
		$_withd3d9nine \
		$_withvkd3d \
		#--disable-tests
		# Gstreamer was disabled for FS#33655

    # make using all available threads
	schedtool -B -n 1 -e ionice -n 1 make -j$(nproc)

	# build wine 32-bit
	export PKG_CONFIG_PATH='/usr/lib32/pkgconfig'
	msg2 'Building Wine-32...'
	cd "${srcdir}/${pkgname}"-32-build
	../${_winesrcdir}/configure \
		--prefix='/usr' \
		--libdir='/usr/lib32' \
		--with-x \
		--with-gstreamer \
		--with-xattr \
		$_withd3d9nine \
		$_withvkd3d \
		--with-wine64="${srcdir}/${pkgname}"-64-build \
		#--disable-tests 

    # make using all available threads
	schedtool -B -n 1 -e ionice -n 1 make -j$(nproc)

	# Build DXVK winelib
	if [ $_use_dxvk == "true" ]; then
	  cd "${srcdir}"/"${_dxvksrcdir}"
	  mkdir build
	  patch -Np1 < ../'dxvk-winelib.patch'
	  ./package-release-wine.sh master build --no-package
	fi
}

package() {

	# package wine 32-bit
	# (according to the wine wiki, this reverse 32-bit/64-bit packaging order is important)
	msg2 'Packaging Wine-32...'
	cd "${srcdir}/${pkgname}"-32-build
	make 	prefix="${pkgdir}/usr" \
			libdir="${pkgdir}/usr/lib32" \
			dlldir="${pkgdir}/usr/lib32/wine" install
	
	# package wine 64-bit
	msg2 'Packaging Wine-64...'
	cd "${srcdir}/${pkgname}"-64-build
	make 	prefix="${pkgdir}/usr" \
			libdir="${pkgdir}/usr/lib" \
			dlldir="${pkgdir}/usr/lib/wine" install
	
	# freetype font smoothing for win32 applications
	install -d "$pkgdir"/etc/fonts/conf.{avail,d}
	install -m644 "${srcdir}/30-win32-aliases.conf" "${pkgdir}/etc/fonts/conf.avail"
	ln -s ../conf.avail/30-win32-aliases.conf "${pkgdir}/etc/fonts/conf.d/30-win32-aliases.conf"

	# wine binfmt
	install -Dm 644 "${srcdir}/wine-binfmt.conf" "${pkgdir}/usr/lib/binfmt.d/wine.conf"

	# dxvk
	if [ $_use_dxvk == "true" ]; then
	  cp -rv "${srcdir}"/"${_dxvksrcdir}"/build/dxvk-master/x32/* "${pkgdir}"/usr/lib32/wine
	  cp -rv "${srcdir}"/"${_dxvksrcdir}"/build/dxvk-master/x64/* "${pkgdir}"/usr/lib/wine
	fi

	rm -v $_where/BIG_UGLY_COINMINER # state tracker end

	if [ $_NUKR == "true" ]; then
	  rm -v $_where/esync.tgz # User may want to switch esync releases. Better nuke it to stay fresh
	  rm -rf $srcdir # Nuke the entire src folder so it'll get regenerated clean on next build
	  msg2 'srcdir was nuked. See ya !'
	fi

	if [ $_use_esync == "true" ]; then
	  msg2 '##########################################################################################################################'
	  msg2 ''
	  msg2 'Remember to export WINEESYNC=1 and increase file descriptors limits in /etc/security/limits.conf to use ESYNC goodness ;)'
	  msg2 ''
	  msg2 'https://raw.githubusercontent.com/zfigura/wine/esync/README.esync'
	  msg2 ''
	  msg2 '##########################################################################################################################'
	fi
}
md5sums=('SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'f58a4e17b33bd96ce0d6e8325cad7f76'
         '108d1a6f71bde6431bece05e98ea31db'
         'ecada2fc8abda49c6bb788c25f05a822'
         '608cbfa520e154687dcd62cbdb6db82b'
         '1ff4e467f59409272088d92173a0f801'
         'cff441678d798466a13a0d03b01e23d7'
         '830a78ea35e124536cdbc8291102ffaa'
         'bb280dfbf0c1719e67f54018c81e5720'
         '3a263a0f6211287af53ea7db79b1f34f'
         '4e1b9cc09a01749c07230c7241526371'
         '360a9d3ca587a20e78f5373d5135b2bb'
         '9fc474e08b6e312333aac6bea9319dd6'
         'b76d64af20e1026f0303cc8cb5835815'
         'd1a18945f2ca46fa3fce70e157393a01'
         'f50501943759c8731d40eb521e36e6da'
         '78ea7fa80abd8beb6e2afac27deb938f'
         'ed6060dc030ebd5865f1fcc40d8863be'
         'd328bfd0d363434fe5f83f3a614849f7')

# Remove the state tracker on failed/stopped compilation
trap "{ rm -f $_where/BIG_UGLY_COINMINER; }" EXIT
