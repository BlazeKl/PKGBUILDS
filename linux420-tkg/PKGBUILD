# Based on the file created for Arch Linux by:
# Tobias Powalowski <tpowa@archlinux.org>
# Thomas Baechler <thomas@archlinux.org>

# Contributor: Tk-Glitch <ti3nou at gmail dot com>

_where=$PWD # track basedir as different Arch based distros are moving srcdir around

cp "$_where"/linux420-tkg-patches/* "$_where" # copy patches inside the PKGBUILD's dir to preserve makepkg sourcing and md5sum checking
cp "$_where"/linux420-tkg-config/* "$_where" # copy config files and hooks inside the PKGBUILD's dir to preserve makepkg sourcing and md5sum checking

source "$_where"/customization.cfg # load default configuration from file

# Load external configuration file if present. Available variable values will overwrite customization.cfg ones.
if [ -e "$_EXT_CONFIG_PATH" ]; then
  source "$_EXT_CONFIG_PATH" && msg2 "External configuration file $_EXT_CONFIG_PATH will be used to override customization.cfg values." && msg2 ""
fi

# CPU SCHED selector
if [ -z "$_cpusched" ] && [ ! -e "$_where"/cpuschedset ]; then
  plain "What CPU sched variant do you want to build/install?"
  read -p "`echo $'  > 1.PDS\n    2.MuQSS\n    3.CFS\nchoice[1-3?]: '`" CONDITION;
  if [ "$CONDITION" == "2" ]; then
    echo "_cpusched=\"muqss\"" > "$_where"/cpuschedset
  elif [ "$CONDITION" == "3" ]; then
    echo "_cpusched=\"cfs\"" > "$_where"/cpuschedset
  else
    echo "_cpusched=\"pds\"" > "$_where"/cpuschedset
  fi
elif [ "$_cpusched" == "muqss" ]; then
  echo "_cpusched=\"muqss\"" > "$_where"/cpuschedset
elif [ "$_cpusched" == "cfs" ]; then
  echo "_cpusched=\"cfs\"" > "$_where"/cpuschedset
elif [ "$_cpusched" == "pds" ]; then
  echo "_cpusched=\"pds\"" > "$_where"/cpuschedset
fi

source "$_where"/cpuschedset

_basever=420
pkgbase=linux"${_basever}"-tkg-"${_cpusched}"
pkgname=("${pkgbase}" "${pkgbase}-headers")
_basekernel=4.20
_sub=5
pkgver="${_basekernel}"."${_sub}"
pkgrel=18
arch=('x86_64') # no i686 in here
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc' 'elfutils' 'schedtool' 'patchutils' 'flex')
if pacman -Qq ccache &> /dev/null; then
  msg2 'ccache was found and will be used'
  options=('!strip' 'ccache')
else
  msg2 'ccache was not found and will not be used'
  options=('!strip')
fi
source=("https://www.kernel.org/pub/linux/kernel/v4.x/linux-${_basekernel}.tar.xz"
        "https://www.kernel.org/pub/linux/kernel/v4.x/patch-${pkgver}.xz"
        #"aufs::git+https://github.com/sfjro/aufs4-standalone.git#branch=aufs${_basekernel}"
        "https://raw.githubusercontent.com/dolohow/uksm/master/v4.x/uksm-${_basekernel}.patch"
        'config.x86_64' # config
        'linux420-tkg.preset' # standard config files for mkinitcpio ramdisk
        '60-linux.hook'     # pacman hook for depmod
        '90-linux.hook'     # pacman hook for initramfs regeneration
        # ARCH Patches
        0001-add-sysctl-to-disallow-unprivileged-CLONE_NEWUSER-by.patch
        # TkG
        0002-clear-patches.patch
        0003-glitched-base.patch
        0003-glitched-cfs.patch
        0004-glitched-muqss.patch
        0004-4.20-ck1.patch
        0005-glitched-pds.patch
        0005-v4.20_pds099l.patch
        0006-add-acs-overrides_iommu.patch
        0007-exFAT-support.patch
        0008-bcachefs.patch
)
sha256sums=('ad0823183522e743972382df0aa08fb5ae3077f662b125f1e599b0b2aaa12438'
            'ca74dd464797d164274e718da902a234766eec42b973c0c143708f00eb684ad5'
            '2da4d705fe5be8ac9b5af68c48ddb5b925f2f756cb84c4c66ad05279676503a1'
            '6a2d635916c62ad070bf27de6ba52d5cac8f6f848b181f61f716a0b688e308c1'
            'ad6344badc91ad0630caacde83f7f9b97276f80d26a20619a87952be65492c65'
            'ae2e95db94ef7176207c690224169594d49445e04249d2499e9d2fbc117a0b21'
            '75f99f5239e03238f88d1a834c50043ec32b1dc568f2cc291b07d04718483919'
            'dd907cda65ae5d36295faa7bbea400683e46f7999806762dc330870fcb62321a'
            '379058b20425c967e93dba4df5484c5c17d30c323c0a76c9283c4f4dbb8cb227'
            'c3b4b31f28f5a0cc2f917643e617ff815d9fd1349d06146ac7fef044212a2050'
            '2e3466e558546d93a2b845ee8ad5a75272437a4977f80928a576654e11d11ae8'
            '0be33ca350478637f2d8518d13be24cb170d6f5df8735f6c0c9156a30e55734e'
            'fcbc7ef3ab1bb17d941908db388b6493080369757835ddbb5ee0c8ade1f6d97a'
            'eb5f83558a720667b5bb2291f74dfb35c1711fd4f17b615fc23e1b2aed314057'
            'c0f53cde401d79843a181f068fe87239fe00d8534d8cdda35ffc8c9dfbc10d5b'
            'a20a7984f819f1ebcb35e99f40fda98366870d8ba56771b0e4e30e7ddbb1bfcb'
            '015ee67f049548a227dd8105e44c2e74cf76ba3444bab42b5ee695b070d9bf70'
            '00db40ec3d04936b713ef508d2759f2a4d65b4bb84aa38addf9540be709f2160')

user_patcher() {
	# To patch the user because all your base are belong to us
	if [[ $(find "$_where" -name "*.${_userpatch_ext}patch") ]]; then
	  if [ "$_user_patches_no_confirm" != "true" ]; then
	  read -p "At least one of your own ${_userpatch_target} patches were found (*.${_userpatch_ext}patch). Do you want to install it/them? - Be careful with that ;)`echo $'\n> N/y : '`" _CONDITION;
	  fi
	  if [ "$_CONDITION" == "y" ] || [ "$_user_patches_no_confirm" == "true" ]; then
	    for _f in "$_where"/*.${_userpatch_ext}patch; do
	    if [ -e "${_f}" ]; then
	      msg2 "######################################################"
	      msg2 ""
	      msg2 "Applying your own ${_userpatch_target} patch ${_f}"
	      msg2 ""
	      msg2 "######################################################"
	      patch -Np1 < "${_f}"
	      echo "Applied your own patch ${_f}" >> "$_where"/last_build_config.log
	    fi
	    done
	  fi
	fi
	if [[ $(find "$_where" -name "*.${_userpatch_ext}revert") ]]; then
	  if [ "$_user_patches_no_confirm" != "true" ]; then
	  read -p "At least one of your own ${_userpatch_target} 'to revert' patches were found (*.${_userpatch_ext}revert). Do you want to install it/them? - Be careful with that ;)`echo $'\n> N/y : '`" _CONDITION;
	  fi
	  if [ "$_CONDITION" == "y" ] || [ "$_user_patches_no_confirm" == "true" ]; then
	    for _f in "$_where"/*.${_userpatch_ext}revert; do
	    if [ -e "${_f}" ]; then
	      msg2 "######################################################"
	      msg2 ""
	      msg2 "Reverting your own ${_userpatch_target} patch ${_f}"
	      msg2 ""
	      msg2 "######################################################"
	      patch -Np1 -R < "${_f}"
	      echo "Reverted your own patch ${_f}" >> "$_where"/last_build_config.log
	    fi
	    done
	  fi
	fi
}

prepare() {
  rm -rf $pkgdir # Nuke the entire pkg folder so it'll get regenerated clean on next build

  ln -s "${_where}/customization.cfg" "${srcdir}" # workaround

  # AUFS
  #cd "${srcdir}/aufs"
  #rm -v -f $(find . -type f -name '*.orig')
  #rm -rf "../tmp/linux-${_basekernel}"
  #mkdir -p "../tmp/linux-${_basekernel}"
  #cp -a fs "../tmp/linux-${_basekernel}"
  #cp -a include "../tmp/linux-${_basekernel}"
  #cp -a Documentation "../tmp/linux-${_basekernel}"
  #rm "../tmp/linux-${_basekernel}/include/uapi/linux/Kbuild"
  #cd "../tmp"
  #diff -Naur null linux-${_basekernel}  | filterdiff | \
  #sed -e 's|null\(/include/uapi/linux/Kbuild\)|linux-'"${_basekernel}"'-old\1|;s|^--- null.*|--- /dev/null|;\|linux-'"${_basekernel}"'/include/uapi/linux/Kbuild|,${\|@@ -0,0 +1 @@|,$d}' > aufs${_basekernel}.patch
  #mv *patch* "${srcdir}"
  #cd "${srcdir}/aufs"
  #mv *patch* "${srcdir}"
  #cd "${srcdir}"
  #rm -rf tmp aufs

  cd "${srcdir}/linux-${_basekernel}"

  # add upstream patch
  patch -p1 -i ../patch-"${pkgver}"

  # ARCH Patches
  patch -Np1 -i ../0001-add-sysctl-to-disallow-unprivileged-CLONE_NEWUSER-by.patch

  # AUFS Patches
  #patch -Np1 -i ../aufs"${_basekernel}".patch
  #patch -Np1 -i ../aufs4-base.patch
  #patch -Np1 -i ../aufs4-kbuild.patch
  #patch -Np1 -i ../aufs4-loopback.patch
  #patch -Np1 -i ../aufs4-mmap.patch
  #patch -Np1 -i ../aufs4-standalone.patch
  #patch -Np1 -i ../tmpfs-idr.patch
  #patch -Np1 -i ../vfs-ino.patch

  # TkG
  patch -Np1 -i ../0002-clear-patches.patch

  patch -Np1 -i ../0003-glitched-base.patch

  # exFAT
  patch -Np1 -i ../0007-exFAT-support.patch

  if [ "${_cpusched}" == "muqss" ]; then
    # MuQSS
    patch -Np1 -i ../0004-4.20-ck1.patch
    patch -Np1 -i ../0004-glitched-muqss.patch
  elif [ "${_cpusched}" == "pds" ]; then
    # PDS-mq
    patch -Np1 -i ../0005-v4.20_pds099l.patch
    patch -Np1 -i ../0005-glitched-pds.patch
  else
    patch -Np1 -i ../0003-glitched-cfs.patch
  fi

  cat "${srcdir}/config.x86_64" > ./.config

  # LOCALVERSION
  sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"-tkg-${_cpusched}\"|g" ./.config
  sed -i "s|CONFIG_LOCALVERSION_AUTO=.*|CONFIG_LOCALVERSION_AUTO=n|" ./.config

  # set extraversion to pkgrel
  sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

  if [ "${_cpusched}" == "muqss" ]; then
    # MuQSS default config
    echo "CONFIG_SCHED_MUQSS=y" >> ./.config
  elif [ "${_cpusched}" == "pds" ]; then
    # PDS default config
    echo "CONFIG_SCHED_PDS=y" >> ./.config
  else
    # CFS default config
    sed -i -e 's/# CONFIG_FAIR_GROUP_SCHED is not set/CONFIG_FAIR_GROUP_SCHED=y/' ./.config
    sed -i -e 's/# CONFIG_CFS_BANDWIDTH is not set/CONFIG_CFS_BANDWIDTH=y/' ./.config
    sed -i -e 's/# CONFIG_CGROUP_CPUACCT is not set/CONFIG_CGROUP_CPUACCT=y/' ./.config
    sed -i -e 's/# CONFIG_SCHED_AUTOGROUP is not set/CONFIG_SCHED_AUTOGROUP=y/' ./.config
  fi

  # zenify
  if [ "$_zenify" == "true" ]; then
    echo "CONFIG_ZENIFY=y" >> ./.config
  elif [ "$_zenify" == "false" ]; then
    echo "# CONFIG_ZENIFY is not set" >> ./.config
  fi

  # cpu opt
  if [ "$_processor_opt" == "generic" ]; then
    echo "# CONFIG_CONFIG_MNATIVE is not set" >> ./.config
  elif [ "$_processor_opt" == "native" ]; then
    sed -i -e 's/CONFIG_GENERIC_CPU=y/# CONFIG_GENERIC_CPU is not set/' ./.config
    echo "CONFIG_MNATIVE=y" >> ./.config
  fi

  # irq threading
  if [ "$_irq_threading" == "true" ]; then
    echo "CONFIG_FORCE_IRQ_THREADING=y" >> ./.config
  elif [ "$_irq_threading" == "false" ]; then
    echo "# CONFIG_FORCE_IRQ_THREADING is not set" >> ./.config
  fi

  # smt nice
  if [ "$_smt_nice" == "true" ]; then
    echo "CONFIG_SMT_NICE=y" >> ./.config
  elif [ "$_smt_nice" == "false" ]; then
    echo "# CONFIG_SMT_NICE is not set" >> ./.config
  fi

  # random trust cpu
  if [ "$_random_trust_cpu" == "true" ]; then
    echo "CONFIG_RANDOM_TRUST_CPU=y" >> ./.config
  elif [ "$_random_trust_cpu" == "false" ]; then
    echo "# CONFIG_RANDOM_TRUST_CPU is not set" >> ./.config
  fi

  # rq sharing
  if [ "$_runqueue_sharing" == "none" ]; then
    echo "CONFIG_RQ_NONE=y\n# CONFIG_RQ_SMT is not set\n# CONFIG_RQ_MC is not set\n# CONFIG_RQ_SMP is not set\n# CONFIG_RQ_ALL is not set" >> ./.config
  elif [ "$_runqueue_sharing" == "smt" ]; then
    echo "# CONFIG_RQ_NONE is not set\nCONFIG_RQ_SMT=y\n# CONFIG_RQ_MC is not set\n# CONFIG_RQ_SMP is not set\n# CONFIG_RQ_ALL is not set" >> ./.config
  elif [ "$_runqueue_sharing" == "mc" ]; then
    echo "# CONFIG_RQ_NONE is not set\n# CONFIG_RQ_SMT is not set\nCONFIG_RQ_MC=y\n# CONFIG_RQ_SMP is not set\n# CONFIG_RQ_ALL is not set" >> ./.config
  elif [ "$_runqueue_sharing" == "smp" ]; then
    echo "# CONFIG_RQ_NONE is not set\n# CONFIG_RQ_SMT is not set\n# CONFIG_RQ_MC is not set\nCONFIG_RQ_SMP=y\n# CONFIG_RQ_ALL is not set" >> ./.config
  elif [ "$_runqueue_sharing" == "all" ]; then
    echo "# CONFIG_RQ_NONE is not set\n# CONFIG_RQ_SMT is not set\n# CONFIG_RQ_MC is not set\n# CONFIG_RQ_SMP is not set\nCONFIG_RQ_ALL=y" >> ./.config
  fi

  # timer freq
  if [ "$_timer_freq" == "1000" ]; then
    sed -i -e 's/CONFIG_HZ_750=y/# CONFIG_HZ_750 is not set/' ./.config
    sed -i -e 's/CONFIG_HZ_750_NODEF=y/# CONFIG_HZ_750_NODEF is not set/' ./.config
    echo "CONFIG_HZ_1000=y" >> ./.config
    echo "CONFIG_HZ_1000_NODEF=y" >> ./.config
  elif [ "$_timer_freq" == "750" ]; then
    echo "# CONFIG_HZ_1000 is not set" >> ./.config
    echo "# CONFIG_HZ_1000_NODEF is not set" >> ./.config
  fi

  # ftrace
  if [ -z "$_ftracedisable" ]; then
    plain ""
    plain "Disable FUNCTION_TRACER/GRAPH_TRACER? Lowers overhead but limits debugging and analyzing of kernel functions."
    read -p "`echo $'    > N/y : '`" CONDITION1;
  fi
  if [ "$CONDITION1" == "y" ] || [ "$_ftracedisable" == "true" ]; then
  sed -i -e 's/CONFIG_FUNCTION_TRACER=y/# CONFIG_FUNCTION_TRACER is not set/' \
      -i -e '/CONFIG_FUNCTION_GRAPH_TRACER=y/d' \
      -i -e '/CONFIG_DYNAMIC_FTRACE=y/d' \
      -i -e '/CONFIG_DYNAMIC_FTRACE_WITH_REGS=y/d' ./.config
  fi

  # disable numa
  if [ -z "$_numadisable" ]; then
    plain ""
    plain "Disable NUMA? Lowers overhead, but breaks CUDA/NvEnc on Nvidia equipped systems if disabled."
    plain "https://bbs.archlinux.org/viewtopic.php?id=239174"
    read -p "`echo $'    > N/y : '`" CONDITION2;
  fi
  if [ "$CONDITION2" == "y" ] || [ "$_numadisable" == "true" ]; then
    # disable NUMA since 99.9% of users do not have multiple CPUs but do have multiple cores in one CPU
    sed -i -e 's/CONFIG_NUMA=y/# CONFIG_NUMA is not set/' \
        -i -e '/CONFIG_AMD_NUMA=y/d' \
        -i -e '/CONFIG_X86_64_ACPI_NUMA=y/d' \
        -i -e '/CONFIG_NODES_SPAN_OTHER_NODES=y/d' \
        -i -e '/# CONFIG_NUMA_EMU is not set/d' \
        -i -e '/CONFIG_NODES_SHIFT=6/d' \
        -i -e '/CONFIG_NEED_MULTIPLE_NODES=y/d' \
        -i -e '/CONFIG_USE_PERCPU_NUMA_NODE_ID=y/d' \
        -i -e '/CONFIG_ACPI_NUMA=y/d' ./.config
  fi

  # voluntary preempt
  if [ -z "$_voluntary_preempt" ]; then
    plain ""
    plain "Use explicit preemption points to lower latency? (at the cost of a small throughput loss)"
    read -p "`echo $'    > N/y : '`" CONDITION3;
  fi
  if [ "$CONDITION3" == "y" ] || [ "$_voluntary_preempt" == "true" ]; then
    sed -i -e 's/CONFIG_PREEMPT=y/# CONFIG_PREEMPT is not set/' ./.config
    sed -i -e 's/# CONFIG_PREEMPT_VOLUNTARY is not set/CONFIG_PREEMPT_VOLUNTARY=y/' ./.config
  fi

  # Open Firmware support
  if [ -z "$_OFenable" ]; then
    plain ""
    plain "Enable Device Tree and Open Firmware support?"
    read -p "`echo $'    > N/y : '`" CONDITION4;
  fi
  if [ "$CONDITION4" == "y" ] || [ "$_OFenable" == "true" ]; then
    sed -i -e 's/# CONFIG_OF is not set/CONFIG_OF=y/' ./.config
  fi

  # acs override
  if [ -z "$_acs_override" ]; then
    plain ""
    plain "Use ACS override patch?"
    plain "https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF#Bypassing_the_IOMMU_groups_.28ACS_override_patch.29"
    read -p "`echo $'    > N/y : '`" CONDITION5;
  fi
  if [ "$CONDITION5" == "y" ] || [ "$_acs_override" == "true" ]; then
    patch -Np1 -i ../0006-add-acs-overrides_iommu.patch
  fi

  # ksm/uksm
  if [ -z "$_ksm_uksm" ]; then
    plain ""
    plain "Use KSM/UKSM? (you'll be prompted about which one to use during kernel config)"
    plain "https://www.kernel.org/doc/Documentation/vm/ksm.txt - https://github.com/dolohow/uksm"
    read -p "`echo $'    > N/y : '`" CONDITION6;
  fi
  if [ "$CONDITION6" == "y" ] || [ "$_ksm_uksm" == "true" ]; then
    sed -i -e 's/# CONFIG_KSM is not set/CONFIG_KSM=y/' ./.config
    patch -Np1 -i ../uksm-${_basekernel}.patch
  fi

  # bcachefs
  if [ -z "$_bcachefs" ]; then
    plain ""
    plain "Add Bcache filesystem support? You'll have to install bcachefs-tools-git from AUR for utilities."
    plain "https://bcachefs.org/"
    read -p "`echo $'    > N/y : '`" CONDITION7;
  fi
  if [ "$CONDITION7" == "y" ] || [ "$_bcachefs" == "true" ]; then
    patch -Np1 -i ../0008-bcachefs.patch
  fi

  # userpatches
  if [ "$_user_patches" == "true" ]; then
    _userpatch_target="linux-${_basekernel}"
    _userpatch_ext="my"
    user_patcher
  fi

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh

  # get kernel version
  make prepare

  # modprobed-db
  if [ -z "$_modprobeddb" ]; then
    plain ""
    plain "Use modprobed db to clean config from unneeded modules? Speeds up compilation considerably. Requires root."
    plain "https://wiki.archlinux.org/index.php/Modprobed-db"
    plain "!!!! Make sure to have a well populated db !!!!"
    read -p "`echo $'    > N/y : '`" CONDITION8;
  fi
  if [ "$CONDITION8" == "y" ] || [ "$_modprobeddb" == "true" ]; then
    sudo modprobed-db recall
    make localmodconfig
  fi

  # rewrite configuration
  yes "" | make config >/dev/null
}

build() {
  cd "${srcdir}/linux-${_basekernel}"

  # build!
  time schedtool -B -n 1 -e ionice -n 1 make LOCALVERSION= bzImage modules
}

hackbase() {
  pkgdesc="The ${pkgbase/linux/Linux} kernel and modules"
  depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7')
  optdepends=('linux-docs: Kernel hackers manual - HTML documentation that comes with the Linux kernel.'
              'crda: to set the correct wireless channels of your country.'
              'modprobed-db: Keeps track of EVERY kernel module that has ever been probed. Useful for make localmodconfig.'
              'nvidia-tkg: NVIDIA drivers for all installed kernels - non-dkms version.'
              'nvidia-dkms-tkg: NVIDIA drivers for all installed kernels - dkms version.'
              'update-grub: Simple wrapper around grub-mkconfig.')
  provides=("linux=${pkgver}" "${pkgbase}")
  backup=("etc/mkinitcpio.d/${pkgbase}.preset")
  install=linux${_basever}-tkg.install

  cd "${srcdir}/linux-${_basekernel}"

  # get kernel version
  _kernver="$(make LOCALVERSION= kernelrelease)"

  mkdir -p "${pkgdir}"/{boot,usr/lib/modules}
  make LOCALVERSION= INSTALL_MOD_PATH="${pkgdir}/usr" modules_install
  cp arch/x86/boot/bzImage "${pkgdir}/boot/vmlinuz-${pkgbase}"

  # make room for external modules
  local _extramodules="extramodules-${_basekernel}-tkg-${_cpusched}"
  ln -s "../${_extramodules}" "${pkgdir}/usr/lib/modules/${_kernver}/extramodules"

  # add real version for building modules and running depmod from hook
  echo "${_kernver}" |
    install -Dm644 /dev/stdin "${pkgdir}/usr/lib/modules/${_extramodules}/version"

  # remove build and source links
  rm "${pkgdir}"/usr/lib/modules/"${_kernver}"/{source,build}

  # now we call depmod...
  depmod -b "${pkgdir}/usr" -F System.map "${_kernver}"

  # add vmlinux
  install -Dt "${pkgdir}/usr/lib/modules/${_kernver}/build" -m644 vmlinux

  # sed expression for following substitutions
  local _subst="
    s|%PKGBASE%|${pkgbase}|g
    s|%KERNVER%|${_kernver}|g
    s|%EXTRAMODULES%|${_extramodules}|g
  "

  # hack to allow specifying an initially nonexisting install file
  sed "${_subst}" "${startdir}/${install}" > "${startdir}/${install}.pkg"
  true && install="${install}".pkg

  # install mkinitcpio preset file
  sed "${_subst}" "${srcdir}"/linux"${_basever}"-tkg.preset |
    install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

  # install pacman hooks
  sed "${_subst}" ${srcdir}/60-linux.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/60-${pkgbase}.hook"
  sed "${_subst}" ${srcdir}/90-linux.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/90-${pkgbase}.hook"
}

hackheaders() {
  pkgdesc="Header files and scripts for building modules for ${pkgbase/linux/Linux} kernel"
  provides=("linux-headers=${pkgver}" "${pkgbase}-headers=${pkgver}")

  cd "${srcdir}/linux-${_basekernel}"
  local _builddir="${pkgdir}/usr/lib/modules/${_kernver}/build"

  install -Dt "${_builddir}" -m644 Makefile .config Module.symvers
  install -Dt "${_builddir}/kernel" -m644 kernel/Makefile

  mkdir "${_builddir}/.tmp_versions"

  cp -t "${_builddir}" -a include scripts

  install -Dt "${_builddir}/arch/x86" -m644 "arch/x86/Makefile"
  install -Dt "${_builddir}/arch/x86/kernel" -m644 "arch/x86/kernel/asm-offsets.s"

  cp -t "${_builddir}/arch/x86" -a "arch/x86/include"

  install -Dt "${_builddir}/drivers/md" -m644 drivers/md/*.h
  install -Dt "${_builddir}/net/mac80211" -m644 net/mac80211/*.h

  # http://bugs.archlinux.org/task/13146
  install -Dt "${_builddir}/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # http://bugs.archlinux.org/task/20402
  install -Dt "${_builddir}/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "${_builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "${_builddir}/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # add xfs and shmem for aufs building
  mkdir -p "${_builddir}"/{fs/xfs,mm}

  # copy in Kconfig files
  find . -name Kconfig\* -exec install -Dm644 {} "${_builddir}/{}" \;

  # add objtool for external module building and enabled VALIDATION_STACK option
  install -Dt "${_builddir}/tools/objtool" tools/objtool/objtool

  # remove unneeded architectures
  local _arch
  for _arch in "${_builddir}"/arch/*/; do
    [[ ${_arch} == */x86/ ]] && continue
    rm -r "${_arch}"
  done

  # remove files already in linux-docs package
  rm -r "${_builddir}/Documentation"

  # Fix permissions
  chmod -R u=rwX,go=rX "${_builddir}"

  # strip scripts directory
  local _binary _strip
  while read -rd '' _binary; do
    case "$(file -bi "${_binary}")" in
      *application/x-sharedlib*)  _strip="${STRIP_SHARED}"   ;; # Libraries (.so)
      *application/x-archive*)    _strip="${STRIP_STATIC}"   ;; # Libraries (.a)
      *application/x-executable*) _strip="${STRIP_BINARIES}" ;; # Binaries
      *) continue ;;
    esac
    /usr/bin/strip ${_strip} "${_binary}"
  done < <(find "${_builddir}/scripts" -type f -perm -u+w -print0 2>/dev/null)

  if [ $_NUKR == "true" ]; then
    rm -rf "$srcdir" # Nuke the entire src folder so it'll get regenerated clean on next build
  fi
}

package_linux420-tkg-pds() {
hackbase
}

package_linux420-tkg-muqss() {
hackbase
}

package_linux420-tkg-cfs() {
hackbase
}

package_linux420-tkg-pds-headers() {
hackheaders
}

package_linux420-tkg-muqss-headers() {
hackheaders
}

package_linux420-tkg-cfs-headers() {
hackheaders
}

function exit_cleanup {
  # Remove state tracker
  rm -f "$_where"/cpuschedset
  
  # Remove temporarily copied files
  rm -rf "$_where"/*.patch
  rm -rf "$_where"/*.hook
  rm -rf "$_where"/*.install
  rm -rf "$_where"/*.preset
  rm -rf "$_where"/config.x86_64

  if [ $_NUKR == "true" ]; then
    rm -rf "$_where"/src/*
  else
    # Meh
    rm -rf "$srcdir"/linux-${_basekernel}/Documentation/filesystems/aufs/*
    rm -f "$srcdir"/linux-${_basekernel}/Documentation/ABI/testing/*-aufs
    rm -rf "$srcdir"/linux-${_basekernel}/fs/aufs/*
    rm -f "$srcdir"/linux-${_basekernel}/include/uapi/linux/aufs*

    rm -f "$srcdir"/linux-${_basekernel}/mm/prfile.c

    rm -f "$srcdir"/linux-${_basekernel}/block/bfq*
    rm -f "$srcdir"/linux-${_basekernel}/Documentation/tp_smapi.txt

    rm -f "$srcdir"/linux-${_basekernel}/drivers/platform/x86/thinkpad_ec.c
    rm -f "$srcdir"/linux-${_basekernel}/include/linux/thinkpad_ec.h
    rm -f "$srcdir"/linux-${_basekernel}/drivers/platform/x86/tp_smapi.c

    rm -rf "$srcdir"/linux-${_basekernel}/drivers/scsi/vhba/*

    rm -rf "$srcdir"/linux-${_basekernel}/fs/exfat/*
    rm -f "$srcdir"/linux-${_basekernel}/include/trace/events/fs.h

    rm -f "$srcdir"/linux-${_basekernel}/Documentation/scheduler/sched-PDS-mq.txt
    rm -f "$srcdir"/linux-${_basekernel}/include/linux/skip_list.h
    rm -f "$srcdir"/linux-${_basekernel}/kernel/sched/pds.c
    rm -f "$srcdir"/linux-${_basekernel}/kernel/sched/pds_sched.h

    rm -f "$srcdir"/linux-${_basekernel}/Documentation/scheduler/sched-BFS.txt
    rm -f "$srcdir"/linux-${_basekernel}/Documentation/scheduler/sched-MuQSS.txt
    rm -rf "$srcdir"/linux-${_basekernel}/arch/blackfin/*
    rm -f "$srcdir"/linux-${_basekernel}/arch/powerpc/configs/c2k_defconfig
    rm -f "$srcdir"/linux-${_basekernel}/arch/score/configs/spct6600_defconfig
    rm -f "$srcdir"/linux-${_basekernel}/arch/tile/configs/tilegx_defconfig
    rm -f "$srcdir"/linux-${_basekernel}/arch/tile/configs/tilepro_defconfig
    rm -f "$srcdir"/linux-${_basekernel}/drivers/staging/lustre/lnet/lnet/lib-eq.c
    rm -f "$srcdir"/linux-${_basekernel}/kernel/sched/MuQSS*
    rm -f "$srcdir"/linux-${_basekernel}/kernel/skip_list.c

    rm -f "$srcdir"/linux-${_basekernel}/Documentation/vm/uksm.txt
    rm -f "$srcdir"/linux-${_basekernel}/include/linux/sradix-tree.h
    rm -f "$srcdir"/linux-${_basekernel}/include/linux/uksm.h
    rm -f "$srcdir"/linux-${_basekernel}/lib/sradix-tree.c
    rm -f "$srcdir"/linux-${_basekernel}/mm/uksm.c
  fi

  remove_deps

  msg2 'exit cleanup done'
}

trap exit_cleanup EXIT
