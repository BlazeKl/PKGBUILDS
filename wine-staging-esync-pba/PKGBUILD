if [ ! -e BIG_UGLY_COINMINER ]; then
msg2 '#################################################################'
msg2 ''
msg2 'You can configure your wine build flavour (right now for example)'
msg2 'by editing the customization.cfg file next to this PKGBUILD.'
msg2 ''
msg2 'If you are rebuilding using the same configuration, you may want'
msg2 'to delete/move previously built package and clear src dir.'
msg2 ''
msg2 '###################################TkG##########was##########here'
read -p "When you are ready, press enter to continue."
touch BIG_UGLY_COINMINER # state tracker start
fi

source customization.cfg

pkgname=wine-tkg-git
pkgver=3.13.r0.g25cc380b8e.staging.esync.pba
pkgrel=22
_winesrcdir='wine-git'
_stgsrcdir='wine-staging-git'
_pbasrcdir='wine-pba'
_esyncsrcdir='esync'

where=$PWD # track basedir as different Arch based distros are moving srcdir around
pkgdesc='This "Wine to rule them all" package is the result of some random pkgbuild found online. Looks safe to me, amiright? Some variants of it can be found in lutris runners.'
url='https://github.com/Tk-Glitch/PKGBUILDS/tree/master/wine-staging-esync-pba'
arch=('x86_64')
options=('staticlibs' 'ccache')
license=('LGPL')
depends=(
    'attr'                  'lib32-attr'
    'fontconfig'            'lib32-fontconfig'
    'lcms2'                 'lib32-lcms2'
    'libxml2'               'lib32-libxml2'
    'libxcursor'            'lib32-libxcursor'
    'libxrandr'             'lib32-libxrandr'
    'libxdamage'            'lib32-libxdamage'
    'libxi'                 'lib32-libxi'
    'gettext'               'lib32-gettext'
    'freetype2'             'lib32-freetype2'
    'glu'                   'lib32-glu'
    'libsm'                 'lib32-libsm'
    'gcc-libs'              'lib32-gcc-libs'
    'libpcap'               'lib32-libpcap'
    'desktop-file-utils'
)
makedepends=('git' 'autoconf' 'ncurses' 'bison' 'perl' 'fontforge' 'flex'
    'gcc>=4.5.0-2'
    'giflib'                'lib32-giflib'
    'libpng'                'lib32-libpng'
    'gnutls'                'lib32-gnutls'
    'libxinerama'           'lib32-libxinerama'
    'libxcomposite'         'lib32-libxcomposite'
    'libxmu'                'lib32-libxmu'
    'libxxf86vm'            'lib32-libxxf86vm'
    'libldap'               'lib32-libldap'
    'mpg123'                'lib32-mpg123'
    'openal'                'lib32-openal'
    'v4l-utils'             'lib32-v4l-utils'
    'alsa-lib'              'lib32-alsa-lib'
    'libxcomposite'         'lib32-libxcomposite'
    'mesa'                  'lib32-mesa'
    'libgl'                 'lib32-libgl'
    'libxslt'               'lib32-libxslt'
    'libpulse'              'lib32-libpulse'
    'libva'                 'lib32-libva'
    'gtk3'                  'lib32-gtk3'
    'gst-plugins-base-libs' 'lib32-gst-plugins-base-libs'
    'vulkan-icd-loader'     'lib32-vulkan-icd-loader'
    'sdl2'                  'lib32-sdl2'
    'samba'                 'schedtool'
)
optdepends=(
    'giflib'                'lib32-giflib'
    'libpng'                'lib32-libpng'
    'libldap'               'lib32-libldap'
    'gnutls'                'lib32-gnutls'
    'mpg123'                'lib32-mpg123'
    'openal'                'lib32-openal'
    'v4l-utils'             'lib32-v4l-utils'
    'libpulse'              'lib32-libpulse'
    'alsa-plugins'          'lib32-alsa-plugins'
    'alsa-lib'              'lib32-alsa-lib'
    'libjpeg-turbo'         'lib32-libjpeg-turbo'
    'libxcomposite'         'lib32-libxcomposite'
    'libxinerama'           'lib32-libxinerama'
    'ncurses'               'lib32-ncurses'
    'libxslt'               'lib32-libxslt'
    'libva'                 'lib32-libva'
    'gtk3'                  'lib32-gtk3'
    'gst-plugins-base-libs' 'lib32-gst-plugins-base-libs'
    'vulkan-icd-loader'     'lib32-vulkan-icd-loader'
    'sdl2'                  'lib32-sdl2'
    'cups'                  'zapcc'
    'samba'                 'clang'
    'dosbox'
)
source=("$_winesrcdir"::'git://source.winehq.org/git/wine.git'
		"$_stgsrcdir"::'git+https://github.com/wine-staging/wine-staging.git'
		"$_pbasrcdir"::'git+https://github.com/Firerat/wine-pba.git#branch=knobs_and_switches'
		"https://github.com/zfigura/wine/releases/download/esync${esync_version}/esync.tgz"
		'steam.patch'
		'poe-fix.patch'
		'f4skyrimse-fix.patch'
		'harmony-fix.diff'
		'30-win32-aliases.conf'
		'wine-binfmt.conf'
#		'vulkan-enable-extensions.patch'
		'CSMT-toggle.patch'
		'esync-staging-fixes.patch'
		'fallout4.patch'
		'fortnite.patch'
		'origin-breakers.patch')

provides=(
	"wine=$pkgver"
	"wine-wow64=$pkgver"
	"wine-staging=$pkgver"
	"wine-esync=$pkgver"
)

conflicts=('wine' 'wine-wow64' 'wine-staging' 'wine-esync')
makedepends=(${makedepends[@]} ${depends[@]})
install=wine.install

pkgver() {
	# retrieve current wine-staging version
	cd "${srcdir}/${_stgsrcdir}"
	local _stagingTag="$(git tag --sort='version:refname' | tail -n1 | sed 's/-/./g;s/^v//;s/\.rc/rc/')"
	local _stagingVer="$(git describe --long --tags \
								| sed 's/\([^-]*-g\)/r\1/;s/-/./g;s/^v//;s/\.rc/rc/' \
								| sed "s/^latest.release/${_stagingTag}/")"

	# retrieve current wine version
	cd "${srcdir}/${_winesrcdir}"
	local _wineVer="$(git describe --long --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g;s/^v//;s/\.rc/rc/')"

	# retrieve current wine-pba version
	cd "${srcdir}/${_pbasrcdir}"
	local _pbaTag="$(git tag --sort='version:refname' | tail -n1 | sed 's/-/./g;s/^v//;s/\.rc/rc/')"
	local _pbaVer=$( printf "%s.r%s.%s" "$_pbaTag" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)" )

	if [ $use_staging == "true" ]; then
	 stg=".staging"
	fi
	
	if [ $use_esync == "true" ]; then
	 zf=".esync"
	fi
	
	if [ $use_pba == "true" ]; then
	 firerat=".pba"
	fi
	
	if [ $use_gallium_nine == "true" ]; then
	 nine=".nine"
	fi

	# version string
	printf '%s%s%s%s%s' "${_wineVer#wine.}" "$stg" "$zf" "$firerat" "$nine"
}

prepare() {
	if [ $NUKR == "true" ]; then
	  rm -rf $pkgdir # Nuke the entire src folder so it'll get regenerated clean on next build
	  msg2 'pkgdir was nuked. See ya !'
	fi

	cd "${srcdir}"/"${_winesrcdir}"
	
	# restore the wine tree to its git origin state, without wine-staging patches
	# (necessary for reapplying wine-staging patches in succedent builds,
	# otherwise the patches will fail to be reapplied)
	msg2 'Cleaning wine source code tree...'
	git reset --hard HEAD 	# restore tracked files
	git clean -xdf 			# delete untracked files

	if [ $use_staging == "true" ]; then
	  # change back to the wine upstream commit that this version of wine-staging is based in
	  msg2 'Changing wine HEAD to the wine-staging base commit...'
	  git checkout "$(../"$_stgsrcdir"/patches/patchinstall.sh --upstream-commit)"
	fi

	# apply compiler choice and optimizations
	if [ $COMPILEWITH == 'clang' ]; then
	  export CC="clang"
	  export CXX="clang++"
	  if [ $OPTIMIZED == 'true' ]; then
	    export COMMON_FLAGS="-std=gnu89 -g -march=native -pipe -O3"
	    export LDFLAGS="-O3"
      fi
	elif [ $COMPILEWITH == 'zapcc' ]; then
	  export CC="zapcc"
	  export CXX="zapcc++"
      if [ $OPTIMIZED == 'true' ]; then
	    export COMMON_FLAGS="-std=gnu89 -g -march=native -pipe -O3"
	    export LDFLAGS="-O3"
	  fi
	else
	  if [ $OPTIMIZED == 'true' ]; then
	    export COMMON_FLAGS="-march=native -pipe -O2"
	    export LDFLAGS="-O2"
	  fi
	fi

	if [ $OPTIMIZED == 'true' ]; then
	  export CFLAGS="${COMMON_FLAGS}"
	  export CXXFLAGS="${COMMON_FLAGS}"
	fi

	# workaround for FS#55128
	# https://bugs.archlinux.org/task/55128
	# https://bugs.winehq.org/show_bug.cgi?id=43530
	export CFLAGS="${CFLAGS/-fno-plt/}"
	export LDFLAGS="${LDFLAGS/,-z,now/}"

	# patch for 32bit font smoothing
	if [ $harmony_fix == "true" ]; then
	  patch -Np1 < ../'harmony-fix.diff'
	fi

	# Patch to allow Path of Exile to run with DirectX11
	# https://bugs.winehq.org/show_bug.cgi?id=42695
	if [ $poe_fix == "true" ]; then
	  patch -Np1 < ../'poe-fix.patch'
	fi

	# Workaround for F4SE/SkyrimSE Script Extender
	# https://github.com/hdmap/wine-hackery/tree/master/f4se
	if [ $f4skyrimse_fix == "true" ]; then
	  patch -Np1 < ../'f4skyrimse-fix.patch'
	fi

	# Fallout 4 dsound workaround
	# https://bugs.winehq.org/show_bug.cgi?id=41271
	if [ $fallout4dsound_fix == "true" ]; then
	  patch -Np1 < ../'fallout4.patch'
	fi

	# FFXIV mouse jitter fix
	if [ $ffxiv_mouse_patch == "true" ]; then
	  ffxiv_mouse_fix="-W server-send_hardware_message"
	fi

	# steam crossover hack for store/web functionality
	# https://bugs.winehq.org/show_bug.cgi?id=39403
	if [ $steam_fix == "true" ]; then
	  patch -Np1 < ../'steam.patch'
	fi

	# user patches
	if [ $user_patches == "true" ]; then
	  if [[ $(find $where -name "*.mypatch") ]]; then
	    read -p "At least one of your own patches were found (*.mypatch). Do you want to install it/them? - Be careful with that ;)`echo $'\n> N/y : '`" CONDITION;
	    if [ "$CONDITION" == "y" ]; then
	      for F in $where/*.mypatch; do
	      if [ -e "${F}" ]; then
	        msg2 "######################################################"
	        msg2 ""
	        msg2 "Applying your own patch ${F}"
	        msg2 ""
	        msg2 "######################################################"
	        patch -Np1 < ${F}
	      fi
	      done
	    fi
	  fi
	  if [[ $(find $where -name "*.mypatch.revert") ]]; then
	    read -p "At least one of your own revert patches were found (*.mypatch.revert). Do you want to install it/them? - Be careful with that ;)`echo $'\n> N/y : '`" CONDITION;
	    if [ "$CONDITION" == "y" ]; then
	      for F in $where/*.mypatch; do
	      if [ -e "${F}" ]; then
	        msg2 "######################################################"
	        msg2 ""
	        msg2 "Applying your own revert patch ${F}"
	        msg2 ""
	        msg2 "######################################################"
	        patch -Np1 < ${F}
	      fi
	      done
	    fi
	  fi
	fi

	# CSMT toggle patch - Corrects the CSMT toggle to be more logical
	if [ $CSMT_toggle == "true" ] && [ $use_staging == "true" ]; then
	  cd "${srcdir}"/"${_stgsrcdir}"
	  patch -Np1 < ../'CSMT-toggle.patch'
	fi

	# Revert origin breaking commits from the staging PA patchset
	if [ $origin_fix == "true" ] && [ $use_staging == "true" ]; then
	  patch -Np1 -R < ../'origin-breakers.patch'
	fi

	cd "${srcdir}"/"${_winesrcdir}"

	if [ $use_staging == "true" ]; then
	  if [ $use_esync == "true" ]; then
	  	# wine-staging patches and exclusions for esync :

	  	# msvfw32-ICGetDisplayFormat # esync already has its own implementation so it needs to be disabled
	  	# server-Desktop_Refcount # Breaks esync
	  	# ws2_32-WSACleanup # Depends on server-Desktop_Refcount
	  	# ws2_32-TransmitFile # Depends on server-Desktop_Refcount
	  	# server-Pipe_ObjectName # Depends on server-Desktop_Refcount

	    if [ $esync_staging_patchdebug == "true" ]; then
	      esync_staging_debug="--backend=git-apply"
	    else
	      esync_exclusions="-W msvfw32-ICGetDisplayFormat -W server-Desktop_Refcount -W ws2_32-WSACleanup -W ws2_32-TransmitFile -W server-Pipe_ObjectName"
	    fi
	  fi
	  msg2 'Applying wine-staging patches...'
	  "${srcdir}"/"${_stgsrcdir}"/patches/patchinstall.sh DESTDIR="${srcdir}/${_winesrcdir}" $esync_staging_debug --all $esync_exclusions $ffxiv_mouse_fix
	fi

	# apply wine-pba patches
	if [ $use_pba == "true" ]; then
	  for _f in $(ls "${srcdir}"/"${_pbasrcdir}"/'patches'); do
	    patch -Np1 < "${srcdir}"/"${_pbasrcdir}"/'patches'/${_f}
	  done
	fi

	# esync
	if [ $use_esync == "true" ]; then
	  if [ $use_staging == "true" ]; then
	    cd "${srcdir}"/"${_esyncsrcdir}"
	    # fixes for esync patches to apply to staging
	    patch -Np1 < ../'esync-staging-fixes.patch'
	    cd "${srcdir}"/"${_winesrcdir}"
	  fi

	  # wine-esync patches
	  for _f in "${srcdir}"/"${_esyncsrcdir}"/*.patch; do
	    git apply -C1 --verbose < ${_f}
	  done
	fi

	# Fortnite Fix - Currently not working anymore
	if [ $fortnite_fix == "true" ]; then
	  patch -Np1 < ../'fortnite.patch'
	fi

	# d3d9 patches
	if [ $use_gallium_nine == "true" ]; then
	  wget -O $where/wine-d3d9.patch https://raw.githubusercontent.com/sarnex/wine-d3d9-patches/master/wine-d3d9.patch
	  wget -O $where/staging-helper.patch https://raw.githubusercontent.com/sarnex/wine-d3d9-patches/master/staging-helper.patch
	  patch -Np1 < $where/staging-helper.patch
	  patch -Np1 < $where/wine-d3d9.patch
	  autoreconf -f
	  withd3d9nine='--with-d3d9-nine'
	fi

	# fix path of opencl headers
	sed 's|OpenCL/opencl.h|CL/opencl.h|g' -i configure*

	# delete old build dirs (from previous builds) and make new ones
	rm	-rf "${srcdir}"/"${pkgname}"-{32,64}-build
	mkdir -p "${srcdir}"/"${pkgname}"-64-build
	mkdir -p  "${srcdir}"/"${pkgname}"-32-build
}

build() {
	cd "${srcdir}"

	# build wine 64-bit
	# (according to the wine wiki, this 64-bit/32-bit building order is mandatory)
	msg2 'Building Wine-64...'
	cd  "${srcdir}"/"${pkgname}"-64-build
	../${_winesrcdir}/configure \
		--prefix='/usr' \
		--libdir='/usr/lib' \
		--with-x \
		--with-gstreamer \
		--enable-win64 \
		--with-xattr \
		$withd3d9nine \
		#--disable-tests
		# Gstreamer was disabled for FS#33655

    # make using all available threads
	schedtool -B -n 1 -e ionice -n 1 make -j$(nproc)

	# build wine 32-bit
	export PKG_CONFIG_PATH='/usr/lib32/pkgconfig'
	msg2 'Building Wine-32...'
	cd "${srcdir}/${pkgname}"-32-build
	../${_winesrcdir}/configure \
		--prefix='/usr' \
		--libdir='/usr/lib32' \
		--with-x \
		--with-gstreamer \
		--with-xattr \
		$withd3d9nine \
		--with-wine64="${srcdir}/${pkgname}"-64-build \
		#--disable-tests 

    # make using all available threads
	schedtool -B -n 1 -e ionice -n 1 make -j$(nproc)
}

package() {
	
	# package wine 32-bit
	# (according to the wine wiki, this reverse 32-bit/64-bit packaging order is important)
	msg2 'Packaging Wine-32...'
	cd "${srcdir}/${pkgname}"-32-build
	make 	prefix="${pkgdir}/usr" \
			libdir="${pkgdir}/usr/lib32" \
			dlldir="${pkgdir}/usr/lib32/wine" install
	
	# package wine 64-bit
	msg2 'Packaging Wine-64...'
	cd "${srcdir}/${pkgname}"-64-build
	make 	prefix="${pkgdir}/usr" \
			libdir="${pkgdir}/usr/lib" \
			dlldir="${pkgdir}/usr/lib/wine" install
	
	# freetype font smoothing for win32 applications
	install -d "$pkgdir"/etc/fonts/conf.{avail,d}
	install -m644 "${srcdir}/30-win32-aliases.conf" "${pkgdir}/etc/fonts/conf.avail"
	ln -s ../conf.avail/30-win32-aliases.conf "${pkgdir}/etc/fonts/conf.d/30-win32-aliases.conf"

	# wine binfmt
	install -Dm 644 "${srcdir}/wine-binfmt.conf" "${pkgdir}/usr/lib/binfmt.d/wine.conf"

	if [ $use_esync == "true" ]; then
	  msg2 '##########################################################################################################################'
	  msg2 ''
	  msg2 'Remember to export WINEESYNC=1 and increase file descriptors limits in /etc/security/limits.conf to use ESYNC goodness ;)'
	  msg2 ''
	  msg2 '##########################################################################################################################'
	fi

	rm -v $where/BIG_UGLY_COINMINER # state tracker end

	if [ $NUKR == "true" ]; then
	  rm -v $where/esync.tgz # User may want to switch esync releases. Better nuke it so stays fresh
	  rm -rf $srcdir # Nuke the entire src folder so it'll get regenerated clean on next build
	  msg2 'srcdir was nuked. See ya !'
	fi
}
md5sums=('SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'f58a4e17b33bd96ce0d6e8325cad7f76'
         '108d1a6f71bde6431bece05e98ea31db'
         'ecada2fc8abda49c6bb788c25f05a822'
         '608cbfa520e154687dcd62cbdb6db82b'
         '1ff4e467f59409272088d92173a0f801'
         'cff441678d798466a13a0d03b01e23d7'
         '830a78ea35e124536cdbc8291102ffaa'
         'a0e2e1f81e2742158db6e88460e6748b'
         '7416ca33d6d86e3eab3f4faff105f850'
         'f50501943759c8731d40eb521e36e6da'
         '3fe3638e2c21b81ac0802125c0ff2de8')
