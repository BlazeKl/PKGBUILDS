diff --git a/dlls/ntdll/sync.c b/dlls/ntdll/sync.c
index 182bb64..433f68d 100644
--- a/dlls/ntdll/sync.c
+++ b/dlls/ntdll/sync.c
@@ -26,6 +26,7 @@
 
 #include <assert.h>
 #include <errno.h>
+#include <limits.h>
 #include <signal.h>
 #ifdef HAVE_SYS_TIME_H
 # include <sys/time.h>
@@ -36,6 +37,9 @@
 #ifdef HAVE_SYS_POLL_H
 # include <sys/poll.h>
 #endif
+#ifdef HAVE_SYS_SYSCALL_H
+#include <sys/syscall.h>
+#endif
 #ifdef HAVE_UNISTD_H
 # include <unistd.h>
 #endif
@@ -63,6 +67,42 @@ WINE_DEFAULT_DEBUG_CHANNEL(ntdll);
 
 HANDLE keyed_event = NULL;
 
+#define TICKSPERSEC        10000000
+
+#ifdef __linux__
+
+static int wait_op = 128; /*FUTEX_WAIT|FUTEX_PRIVATE_FLAG*/
+static int wake_op = 129; /*FUTEX_WAKE|FUTEX_PRIVATE_FLAG*/
+
+static inline int futex_wait( int *addr, int val, struct timespec *timeout )
+{
+    return syscall( __NR_futex, addr, wait_op, val, timeout, 0, 0 );
+}
+
+static inline int futex_wake( int *addr, int val )
+{
+    return syscall( __NR_futex, addr, wake_op, val, NULL, 0, 0 );
+}
+
+static inline int use_futexes(void)
+{
+    static int supported = -1;
+
+    if (supported == -1)
+    {
+        futex_wait( &supported, 10, NULL );
+        if (errno == ENOSYS)
+        {
+            wait_op = 0; /*FUTEX_WAIT*/
+            wake_op = 1; /*FUTEX_WAKE*/
+            futex_wait( &supported, 10, NULL );
+        }
+        supported = (errno != ENOSYS);
+    }
+    return supported;
+}
+#endif
+
 static inline int interlocked_dec_if_nonzero( int *dest )
 {
     int val, tmp;
@@ -1868,6 +1908,13 @@ void WINAPI RtlInitializeConditionVariable( RTL_CONDITION_VARIABLE *variable )
  */
 void WINAPI RtlWakeConditionVariable( RTL_CONDITION_VARIABLE *variable )
 {
+    if (use_futexes())
+    {
+        *(int *)&variable->Ptr = 1;
+        futex_wake( (int *)&variable->Ptr, 1 );
+        return;
+    }
+
     if (interlocked_dec_if_nonzero( (int *)&variable->Ptr ))
         NtReleaseKeyedEvent( keyed_event, &variable->Ptr, FALSE, NULL );
 }
@@ -1879,11 +1926,57 @@ void WINAPI RtlWakeConditionVariable( RTL_CONDITION_VARIABLE *variable )
  */
 void WINAPI RtlWakeAllConditionVariable( RTL_CONDITION_VARIABLE *variable )
 {
-    int val = interlocked_xchg( (int *)&variable->Ptr, 0 );
+    int val;
+
+    if (use_futexes())
+    {
+        *(int *)&variable->Ptr = 1;
+        futex_wake( (int *)&variable->Ptr, INT_MAX );
+        return;
+    }
+
+    val = interlocked_xchg( (int *)&variable->Ptr, 0 );
     while (val-- > 0)
         NtReleaseKeyedEvent( keyed_event, &variable->Ptr, FALSE, NULL );
 }
 
+static NTSTATUS fast_wait( RTL_CONDITION_VARIABLE *variable, const LARGE_INTEGER *timeout )
+{
+    int ret;
+
+    if (interlocked_cmpxchg((int *)&variable->Ptr, 0, 1))
+        return STATUS_SUCCESS;
+
+    if (timeout && timeout->QuadPart != TIMEOUT_INFINITE)
+    {
+        struct timespec tmo_p;
+        LONGLONG timeleft;
+
+        if (timeout->QuadPart > 0)
+        {
+            LARGE_INTEGER now;
+            NtQuerySystemTime( &now );
+            timeleft = timeout->QuadPart - now.QuadPart;
+        }
+        else
+            timeleft = -timeout->QuadPart;
+
+        tmo_p.tv_sec = timeleft / (ULONGLONG)TICKSPERSEC;
+        tmo_p.tv_nsec = (timeleft % TICKSPERSEC) * 100;
+        ret = futex_wait( (int *)&variable->Ptr, 0, &tmo_p );
+    }
+    else
+        ret = futex_wait( (int *)&variable->Ptr, 0, NULL );
+
+    if (ret == -1)
+    {
+        if (errno == ETIMEDOUT) return STATUS_TIMEOUT;
+        if (errno == EAGAIN) return STATUS_SUCCESS; // fixme
+        else return FILE_GetNtStatus();
+    }
+    return STATUS_SUCCESS;
+}
+
 /***********************************************************************
  *           RtlSleepConditionVariableCS   (NTDLL.@)
  *
@@ -1903,6 +1996,15 @@ NTSTATUS WINAPI RtlSleepConditionVariableCS( RTL_CONDITION_VARIABLE *variable, R
                                              const LARGE_INTEGER *timeout )
 {
     NTSTATUS status;
+
+    if (use_futexes())
+    {
+        RtlLeaveCriticalSection( crit );
+        status = fast_wait( variable, timeout );
+        RtlEnterCriticalSection( crit );
+        return status;
+    }
+
     interlocked_xchg_add( (int *)&variable->Ptr, 1 );
     RtlLeaveCriticalSection( crit );
 
@@ -1940,6 +2042,23 @@ NTSTATUS WINAPI RtlSleepConditionVariableSRW( RTL_CONDITION_VARIABLE *variable,
                                               const LARGE_INTEGER *timeout, ULONG flags )
 {
     NTSTATUS status;
+
+    if (use_futexes())
+    {
+        if (flags & RTL_CONDITION_VARIABLE_LOCKMODE_SHARED)
+            RtlReleaseSRWLockShared( lock );
+        else
+            RtlReleaseSRWLockExclusive( lock );
+
+        status = fast_wait( variable, timeout );
+
+        if (flags & RTL_CONDITION_VARIABLE_LOCKMODE_SHARED)
+            RtlAcquireSRWLockShared( lock );
+        else
+            RtlAcquireSRWLockExclusive( lock );
+        return status;
+    }
+
     interlocked_xchg_add( (int *)&variable->Ptr, 1 );
 
     if (flags & RTL_CONDITION_VARIABLE_LOCKMODE_SHARED)
