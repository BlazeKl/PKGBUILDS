From 3e7b2785a28e900abff5fe09b3a56a0664029ce6 Mon Sep 17 00:00:00 2001
From: Joshua Ashton <joshua@froggi.es>
Date: Tue, 11 Feb 2020 01:01:30 +0000
Subject: [PATCH] steam_helper: Use ShellExecute when not launching .exes

This behaviour more closely matches what Steam on Windows does when
launching things that aren't executables.
---
 steam_helper/steam.cpp | 63 ++++++++++++++++++++++++++++++++----------
 1 file changed, 48 insertions(+), 15 deletions(-)

diff --git a/steam_helper/steam.cpp b/steam_helper/steam.cpp
index f4eb2cb..764c0d3 100644
--- a/steam_helper/steam.cpp
+++ b/steam_helper/steam.cpp
@@ -421,12 +421,13 @@ static BOOL WINAPI console_ctrl_handler(DWORD dwCtrlType)
     return TRUE;
 }
 
-static HANDLE run_process(void)
+static HANDLE run_process(BOOL *should_await)
 {
     WCHAR *cmdline = GetCommandLineW();
     STARTUPINFOW si = { sizeof(si) };
     PROCESS_INFORMATION pi;
     DWORD flags = 0;
+    BOOL use_shell_execute = TRUE;
 
     /* skip argv[0] */
     if (*cmdline == '"')
@@ -510,8 +511,12 @@ static HANDLE run_process(void)
         CoInitialize(NULL);
 
         console = SHGetFileInfoW(dos, 0, &sfi, sizeof(sfi), SHGFI_EXETYPE);
-        if (console && !HIWORD(console))
-            flags |= CREATE_NEW_CONSOLE;
+        if (console)
+        {
+            use_shell_execute = FALSE;
+            if (!HIWORD(console))
+                flags |= CREATE_NEW_CONSOLE;
+        }
 
         new_cmdline = (WCHAR *)HeapAlloc(GetProcessHeap(), 0,
                 (lstrlenW(dos) + 3 + lstrlenW(remainder) + 1) * sizeof(WCHAR));
@@ -527,14 +532,35 @@ static HANDLE run_process(void)
     WINE_TRACE("Running command %s\n", wine_dbgstr_w(cmdline));
 
     SetConsoleCtrlHandler( console_ctrl_handler, TRUE );
-    if (!CreateProcessW(NULL, cmdline, NULL, NULL, FALSE, flags, NULL, NULL, &si, &pi))
+
+    /* only await the process finishing if we launch a process directly...
+     * Steam simply calls ShellExecuteA with the same parameters.
+     * this avoids the edge case where we could ShellExecute and
+     * then that process ends up ShellExecuting something as a throw away */
+    *should_await = !use_shell_execute;
+
+    WINE_TRACE("Executing via %s\n",
+        wine_dbgstr_a(use_shell_execute ? "ShellExecuteW" : "CreateProcessW"));
+
+    if (use_shell_execute)
     {
-        WINE_ERR("Failed to create process %s: %u\n", wine_dbgstr_w(cmdline), GetLastError());
+        static const WCHAR verb[] = { 'o', 'p', 'e', 'n', 0 };
+        ShellExecuteW(NULL, verb, cmdline, NULL, NULL, SW_SHOWNORMAL);
+
         return INVALID_HANDLE_VALUE;
     }
+    else
+    {
+        if (!CreateProcessW(NULL, cmdline, NULL, NULL, FALSE, flags, NULL, NULL, &si, &pi))
+        {
+            WINE_ERR("Failed to create process %s: %u\n", wine_dbgstr_w(cmdline), GetLastError());
+            return INVALID_HANDLE_VALUE;
+        }
+
+        CloseHandle(pi.hThread);
 
-    CloseHandle(pi.hThread);
-    return pi.hProcess;
+        return pi.hProcess;
+    }
 }
 
 int main(int argc, char *argv[])
@@ -560,21 +586,28 @@ int main(int argc, char *argv[])
     if (argc > 1)
     {
         HANDLE child;
+        BOOL should_await;
 
         setup_vrpaths();
 
-        child = run_process();
+        child = run_process(&should_await);
 
-        if (child == INVALID_HANDLE_VALUE)
-            return 1;
+        if (should_await)
+        {
+            if (child == INVALID_HANDLE_VALUE)
+                return 1;
 
-        if (wait_handle == INVALID_HANDLE_VALUE)
-            wait_handle = child;
-        else
-            CloseHandle(child);
+            if (wait_handle == INVALID_HANDLE_VALUE)
+                wait_handle = child;
+            else
+                CloseHandle(child);
+        }
     }
 
-    WaitForSingleObject(wait_handle, INFINITE);
+    if(wait_handle != INVALID_HANDLE_VALUE)
+    {
+        WaitForSingleObject(wait_handle, INFINITE);
+    }
 
     if (event != INVALID_HANDLE_VALUE)
         CloseHandle(event);
