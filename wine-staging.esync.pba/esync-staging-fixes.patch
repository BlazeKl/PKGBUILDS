From 425d94c6a8416e09c4340b20b50674b953f25961 Mon Sep 17 00:00:00 2001
From: Tk-Glitch <ti3nou@gmail.com>
Date: Sun, 8 Jul 2018 02:06:44 +0200
Subject: Esync fixes for staging compat


diff --git a/0002-server-Create-server-objects-for-eventfd-based-synch.patch b/0002-server-Create-server-objects-for-eventfd-based-synch.patch
index 86620ebdf0..3f1ed465a4 100644
--- a/0002-server-Create-server-objects-for-eventfd-based-synch.patch
+++ b/0002-server-Create-server-objects-for-eventfd-based-synch.patch
@@ -47,25 +47,25 @@ index 511ad5c..180432c 100644
      REQ_set_job_completion_port,
      REQ_terminate_job,
 +    REQ_create_esync,
-     REQ_NB_REQUESTS
- };
- 
+     REQ_get_system_info,
+     REQ_suspend_process,
+     REQ_resume_process,
 @@ -6218,6 +6235,7 @@ union generic_request
      struct set_job_limits_request set_job_limits_request;
      struct set_job_completion_port_request set_job_completion_port_request;
      struct terminate_job_request terminate_job_request;
 +    struct create_esync_request create_esync_request;
- };
- union generic_reply
- {
+     struct get_system_info_request get_system_info_request;
+     struct suspend_process_request suspend_process_request;
+     struct resume_process_request resume_process_request;
 @@ -6512,6 +6530,7 @@ union generic_reply
      struct set_job_limits_reply set_job_limits_reply;
      struct set_job_completion_port_reply set_job_completion_port_reply;
      struct terminate_job_reply terminate_job_reply;
 +    struct create_esync_reply create_esync_reply;
- };
- 
- #define SERVER_PROTOCOL_VERSION 555
+     struct get_system_info_reply get_system_info_reply;
+     struct suspend_process_reply suspend_process_reply;
+     struct resume_process_reply resume_process_reply;
 diff --git a/server/Makefile.in b/server/Makefile.in
 index aaaa8d3..5d96d22 100644
 --- a/server/Makefile.in
@@ -247,17 +247,17 @@ index 10fd850..0a8dbac 100644
  DECL_HANDLER(set_job_completion_port);
  DECL_HANDLER(terminate_job);
 +DECL_HANDLER(create_esync);
- 
- #ifdef WANT_REQUEST_HANDLERS
- 
+ DECL_HANDLER(get_system_info);
+ DECL_HANDLER(suspend_process);
+ DECL_HANDLER(resume_process);
 @@ -696,6 +697,7 @@ static const req_handler req_handlers[REQ_NB_REQUESTS] =
      (req_handler)req_set_job_limits,
      (req_handler)req_set_job_completion_port,
      (req_handler)req_terminate_job,
 +    (req_handler)req_create_esync,
- };
- 
- C_ASSERT( sizeof(affinity_t) == 8 );
+     (req_handler)req_get_system_info,
+     (req_handler)req_suspend_process,
+     (req_handler)req_resume_process,
 @@ -2400,6 +2402,12 @@ C_ASSERT( sizeof(struct set_job_completion_port_request) == 32 );
  C_ASSERT( FIELD_OFFSET(struct terminate_job_request, handle) == 12 );
  C_ASSERT( FIELD_OFFSET(struct terminate_job_request, status) == 16 );
@@ -268,9 +268,9 @@ index 10fd850..0a8dbac 100644
 +C_ASSERT( sizeof(struct create_esync_request) == 24 );
 +C_ASSERT( FIELD_OFFSET(struct create_esync_reply, handle) == 8 );
 +C_ASSERT( sizeof(struct create_esync_reply) == 16 );
- 
- #endif  /* WANT_REQUEST_HANDLERS */
- 
+ C_ASSERT( sizeof(struct get_system_info_request) == 16 );
+ C_ASSERT( FIELD_OFFSET(struct get_system_info_reply, processes) == 8 );
+ C_ASSERT( FIELD_OFFSET(struct get_system_info_reply, threads) == 12 );
 diff --git a/server/trace.c b/server/trace.c
 index e6ed964..d504ea4 100644
 --- a/server/trace.c
@@ -300,9 +300,9 @@ index e6ed964..d504ea4 100644
      (dump_func)dump_set_job_completion_port_request,
      (dump_func)dump_terminate_job_request,
 +    (dump_func)dump_create_esync_request,
- };
- 
- static const dump_func reply_dumpers[REQ_NB_REQUESTS] = {
+     (dump_func)dump_get_system_info_request,
+     (dump_func)dump_suspend_process_request,
+     (dump_func)dump_resume_process_request,
 @@ -5112,6 +5126,7 @@ static const dump_func reply_dumpers[REQ_NB_REQUESTS] = {
      NULL,
      NULL,
@@ -316,9 +316,9 @@ index e6ed964..d504ea4 100644
      "set_job_completion_port",
      "terminate_job",
 +    "create_esync",
- };
- 
- static const struct
+     "get_system_info",
+     "suspend_process",
+     "resume_process",
 -- 
 2.7.4
 
diff --git a/0014-server-Add-a-request-to-get-the-eventfd-file-descrip.patch b/0014-server-Add-a-request-to-get-the-eventfd-file-descrip.patch
index 4781ad5720..9e38f2a0cf 100644
--- a/0014-server-Add-a-request-to-get-the-eventfd-file-descrip.patch
+++ b/0014-server-Add-a-request-to-get-the-eventfd-file-descrip.patch
@@ -40,22 +40,25 @@ index 180432c..1fcf5ad 100644
      REQ_terminate_job,
      REQ_create_esync,
 +    REQ_get_esync_fd,
-     REQ_NB_REQUESTS
- };
- 
+     REQ_get_system_info,
+     REQ_suspend_process,
+     REQ_resume_process,
 @@ -6236,6 +6248,7 @@ union generic_request
      struct set_job_completion_port_request set_job_completion_port_request;
      struct terminate_job_request terminate_job_request;
      struct create_esync_request create_esync_request;
 +    struct get_esync_fd_request get_esync_fd_request;
- };
- union generic_reply
- {
+     struct get_system_info_request get_system_info_request;
+     struct suspend_process_request suspend_process_request;
+     struct resume_process_request resume_process_request;
 @@ -6531,8 +6544,9 @@ union generic_reply
      struct set_job_completion_port_reply set_job_completion_port_reply;
      struct terminate_job_reply terminate_job_reply;
      struct create_esync_reply create_esync_reply;
 +    struct get_esync_fd_reply get_esync_fd_reply;
+     struct get_system_info_reply get_system_info_reply;
+     struct suspend_process_reply suspend_process_reply;
+     struct resume_process_reply resume_process_reply;
  };
  
 -#define SERVER_PROTOCOL_VERSION 555
@@ -121,17 +124,17 @@ index 0a8dbac..1200b26 100644
  DECL_HANDLER(terminate_job);
  DECL_HANDLER(create_esync);
 +DECL_HANDLER(get_esync_fd);
- 
- #ifdef WANT_REQUEST_HANDLERS
- 
+ DECL_HANDLER(get_system_info);
+ DECL_HANDLER(suspend_process);
+ DECL_HANDLER(resume_process);
 @@ -698,6 +699,7 @@ static const req_handler req_handlers[REQ_NB_REQUESTS] =
      (req_handler)req_set_job_completion_port,
      (req_handler)req_terminate_job,
      (req_handler)req_create_esync,
 +    (req_handler)req_get_esync_fd,
- };
- 
- C_ASSERT( sizeof(affinity_t) == 8 );
+     (req_handler)req_get_system_info,
+     (req_handler)req_suspend_process,
+     (req_handler)req_resume_process,
 @@ -2408,6 +2410,9 @@ C_ASSERT( FIELD_OFFSET(struct create_esync_request, flags) == 20 );
  C_ASSERT( sizeof(struct create_esync_request) == 24 );
  C_ASSERT( FIELD_OFFSET(struct create_esync_reply, handle) == 8 );
@@ -139,9 +142,9 @@ index 0a8dbac..1200b26 100644
 +C_ASSERT( FIELD_OFFSET(struct get_esync_fd_request, handle) == 12 );
 +C_ASSERT( sizeof(struct get_esync_fd_request) == 16 );
 +C_ASSERT( sizeof(struct get_esync_fd_reply) == 8 );
- 
- #endif  /* WANT_REQUEST_HANDLERS */
- 
+ C_ASSERT( sizeof(struct get_system_info_request) == 16 );
+ C_ASSERT( FIELD_OFFSET(struct get_system_info_reply, processes) == 8 );
+ C_ASSERT( FIELD_OFFSET(struct get_system_info_reply, threads) == 12 );
 diff --git a/server/trace.c b/server/trace.c
 index d504ea4..b0140cd 100644
 --- a/server/trace.c
@@ -163,9 +166,9 @@ index d504ea4..b0140cd 100644
      (dump_func)dump_terminate_job_request,
      (dump_func)dump_create_esync_request,
 +    (dump_func)dump_get_esync_fd_request,
- };
- 
- static const dump_func reply_dumpers[REQ_NB_REQUESTS] = {
+     (dump_func)dump_get_system_info_request,
+     (dump_func)dump_suspend_process_request,
+     (dump_func)dump_resume_process_request,
 @@ -5127,6 +5133,7 @@ static const dump_func reply_dumpers[REQ_NB_REQUESTS] = {
      NULL,
      NULL,
@@ -179,9 +182,9 @@ index d504ea4..b0140cd 100644
      "terminate_job",
      "create_esync",
 +    "get_esync_fd",
- };
- 
- static const struct
+     "get_system_info",
+     "suspend_process",
+     "resume_process",
 -- 
 2.7.4
 
diff --git a/0020-server-Create-eventfd-file-descriptors-for-thread-ob.patch b/0020-server-Create-eventfd-file-descriptors-for-thread-ob.patch
index b9f0caba63..8ef41b90f7 100644
--- a/0020-server-Create-eventfd-file-descriptors-for-thread-ob.patch
+++ b/0020-server-Create-eventfd-file-descriptors-for-thread-ob.patch
@@ -36,9 +36,9 @@ index 147a60d..fc815b2 100644
      thread->desktop_users   = 0;
      thread->token           = NULL;
 +    thread->esync_fd        = -1;
- 
-     thread->creation_time = current_time;
-     thread->exit_time     = 0;
+     thread->exit_poll       = NULL;
+     thread->shm_fd          = -1;
+     thread->shm             = NULL;
 @@ -259,6 +261,9 @@ struct thread *create_thread( int fd, struct process *process )
          return NULL;
      }
@@ -81,9 +81,9 @@ index 3cb7cb6..2a40c16 100644
      timeout_t              exit_time;     /* Thread exit time */
      struct token          *token;         /* security token associated with this thread */
 +    int                    esync_fd;      /* esync file descriptor (signalled on exit) */
- };
- 
- struct thread_snapshot
+     struct timeout_user   *exit_poll;     /* poll if the thread/process has exited already */
+     int                    shm_fd;        /* file descriptor for thread local shared memory */
+     shmlocal_t            *shm;           /* thread local shared memory pointer */
 -- 
 2.7.4
 
diff --git a/0022-server-Create-eventfd-file-descriptors-for-message-q.patch b/0022-server-Create-eventfd-file-descriptors-for-message-q.patch
index eac466d340..f326e4fc3b 100644
--- a/0022-server-Create-eventfd-file-descriptors-for-message-q.patch
+++ b/0022-server-Create-eventfd-file-descriptors-for-message-q.patch
@@ -25,9 +25,9 @@ index cb164d6..df327cf 100644
  #define WM_NCMOUSEFIRST WM_NCMOUSEMOVE
  #define WM_NCMOUSELAST  (WM_NCMOUSEFIRST+(WM_MOUSELAST-WM_MOUSEFIRST))
 @@ -140,6 +141,7 @@ struct msg_queue
-     struct thread_input   *input;           /* thread input descriptor */
      struct hook_table     *hooks;           /* hook table */
      timeout_t              last_get_msg;    /* time of last get message call */
+     unsigned int           ignore_post_msg; /* ignore post messages newer than this unique id */
 +    int                    esync_fd;        /* esync file descriptor (signalled on message) */
  };
  
@@ -50,9 +50,9 @@ index cb164d6..df327cf 100644
      no_signal,                 /* signal */
      no_get_fd,                 /* get_fd */
 @@ -300,12 +303,16 @@ static struct msg_queue *create_msg_queue( struct thread *thread, struct thread_
-         queue->input           = (struct thread_input *)grab_object( input );
          queue->hooks           = NULL;
          queue->last_get_msg    = current_time;
+         queue->ignore_post_msg = 0;
 +        queue->esync_fd        = -1;
          list_init( &queue->send_result );
          list_init( &queue->callback_result );
@@ -65,11 +65,11 @@ index cb164d6..df327cf 100644
 +
          thread->queue = queue;
      }
-     if (new_input) release_object( new_input );
+     if (new_input)
 @@ -450,6 +457,9 @@ static inline void clear_queue_bits( struct msg_queue *queue, unsigned int bits
- {
      queue->wake_bits &= ~bits;
      queue->changed_bits &= ~bits;
+     update_shm_queue_bits( queue );
 +
 +    if (do_esync() && !is_signaled( queue ))
 +        esync_clear( queue->esync_fd );
diff --git a/0023-ntdll-wineandroid.drv-winemac.drv-winex11.drv-Store-.patch b/0023-ntdll-wineandroid.drv-winemac.drv-winex11.drv-Store-.patch
index 1ae56f5f4e..3348e350b0 100644
--- a/0023-ntdll-wineandroid.drv-winemac.drv-winex11.drv-Store-.patch
+++ b/0023-ntdll-wineandroid.drv-winemac.drv-winex11.drv-Store-.patch
@@ -40,20 +40,24 @@ diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
 index 45cedb7..dff1e34 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
-@@ -1505,3 +1505,5 @@
+@@ -1512,7 +1512,9 @@
+ 
  # Filesystem
  @ cdecl wine_nt_to_unix_file_name(ptr ptr long long)
  @ cdecl wine_unix_to_nt_file_name(ptr ptr)
-+
+ 
 +@ cdecl __wine_esync_set_queue_fd(long)
++
+ # User shared data
+ @ cdecl __wine_user_shared_data()
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
 index ca405b6..c806eaa 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
 @@ -234,6 +234,7 @@ struct ntdll_thread_data
-     int                wait_fd[2];    /* fd for sleeping server requests */
      BOOL               wow64_redir;   /* Wow64 filesystem redirection flag */
      pthread_t          pthread_id;    /* pthread thread id */
+     void              *pthread_stack; /* pthread stack */
 +    int                esync_queue_fd;/* fd to wait on for driver events */
  };
  
diff --git a/0024-server-ntdll-Also-wait-on-the-queue-fd-when-waiting-.patch b/0024-server-ntdll-Also-wait-on-the-queue-fd-when-waiting-.patch
index 0f44232539..329dfca896 100644
--- a/0024-server-ntdll-Also-wait-on-the-queue-fd-when-waiting-.patch
+++ b/0024-server-ntdll-Also-wait-on-the-queue-fd-when-waiting-.patch
@@ -328,9 +328,9 @@ index 1200b26..cd3b946 100644
 -C_ASSERT( sizeof(struct get_esync_fd_reply) == 8 );
 +C_ASSERT( FIELD_OFFSET(struct get_esync_fd_reply, type) == 8 );
 +C_ASSERT( sizeof(struct get_esync_fd_reply) == 16 );
- 
- #endif  /* WANT_REQUEST_HANDLERS */
- 
+ C_ASSERT( sizeof(struct get_system_info_request) == 16 );
+ C_ASSERT( FIELD_OFFSET(struct get_system_info_reply, processes) == 8 );
+ C_ASSERT( FIELD_OFFSET(struct get_system_info_reply, threads) == 12 );
 diff --git a/server/thread.c b/server/thread.c
 index fc815b2..e1f392f 100644
 --- a/server/thread.c
diff --git a/0025-server-Create-eventfd-descriptors-for-device-manager.patch b/0025-server-Create-eventfd-descriptors-for-device-manager.patch
index 1642ddc826..1ed2f86f58 100644
--- a/0025-server-Create-eventfd-descriptors-for-device-manager.patch
+++ b/0025-server-Create-eventfd-descriptors-for-device-manager.patch
@@ -75,9 +75,9 @@ index c745726..c74d86b 100644
  {
      struct device_manager *manager = (struct device_manager *)obj;
 @@ -618,6 +631,9 @@ static void device_manager_destroy( struct object *obj )
-     {
-         struct device *device = LIST_ENTRY( ptr, struct device, entry );
+         grab_object( &device->obj );
          delete_device( device );
+         release_object( &device->obj );
 +
 +        if (do_esync())
 +            close( manager->esync_fd );
diff --git a/0033-ntdll-server-Implement-NtOpenSemaphore.patch b/0033-ntdll-server-Implement-NtOpenSemaphore.patch
index 310157a4bb..c056a2678e 100644
--- a/0033-ntdll-server-Implement-NtOpenSemaphore.patch
+++ b/0033-ntdll-server-Implement-NtOpenSemaphore.patch
@@ -165,12 +165,15 @@ index c4fffd6..ed51d0b 100644
      struct get_esync_fd_request get_esync_fd_request;
  };
  union generic_reply
-@@ -6558,9 +6578,10 @@ union generic_reply
+@@ -6853,12 +6853,13 @@ union generic_reply
      struct set_job_completion_port_reply set_job_completion_port_reply;
      struct terminate_job_reply terminate_job_reply;
      struct create_esync_reply create_esync_reply;
 +    struct open_esync_reply open_esync_reply;
      struct get_esync_fd_reply get_esync_fd_reply;
+     struct get_system_info_reply get_system_info_reply;
+     struct suspend_process_reply suspend_process_reply;
+     struct resume_process_reply resume_process_reply;
  };
  
 -#define SERVER_PROTOCOL_VERSION 559
diff --git a/0045-server-ntdll-Implement-alertable-waits.patch b/0045-server-ntdll-Implement-alertable-waits.patch
index 3810dbbbc0..9c6006d1f5 100644
--- a/0045-server-ntdll-Implement-alertable-waits.patch
+++ b/0045-server-ntdll-Implement-alertable-waits.patch
@@ -258,22 +258,25 @@ index 729d540..49ca1a9 100644
      REQ_open_esync,
      REQ_get_esync_fd,
 +    REQ_get_esync_apc_fd,
-     REQ_NB_REQUESTS
- };
- 
+     REQ_get_system_info,
+     REQ_suspend_process,
+     REQ_resume_process,
 @@ -6288,6 +6300,7 @@ union generic_request
      struct create_esync_request create_esync_request;
      struct open_esync_request open_esync_request;
      struct get_esync_fd_request get_esync_fd_request;
 +    struct get_esync_apc_fd_request get_esync_apc_fd_request;
- };
- union generic_reply
- {
-@@ -6585,8 +6598,9 @@ union generic_reply
+     struct get_system_info_request get_system_info_request;
+     struct suspend_process_request suspend_process_request;
+     struct resume_process_request resume_process_request;
+@@ -6871,11 +6871,12 @@ union generic_reply
      struct create_esync_reply create_esync_reply;
      struct open_esync_reply open_esync_reply;
      struct get_esync_fd_reply get_esync_fd_reply;
 +    struct get_esync_apc_fd_reply get_esync_apc_fd_reply;
+     struct get_system_info_reply get_system_info_reply;
+     struct suspend_process_reply suspend_process_reply;
+     struct resume_process_reply resume_process_reply;
  };
  
 -#define SERVER_PROTOCOL_VERSION 563
@@ -361,26 +364,26 @@ index 14711ff..e9a87d8 100644
  DECL_HANDLER(open_esync);
  DECL_HANDLER(get_esync_fd);
 +DECL_HANDLER(get_esync_apc_fd);
- 
- #ifdef WANT_REQUEST_HANDLERS
- 
+ DECL_HANDLER(get_system_info);
+ DECL_HANDLER(suspend_process);
+ DECL_HANDLER(resume_process);
 @@ -702,6 +703,7 @@ static const req_handler req_handlers[REQ_NB_REQUESTS] =
      (req_handler)req_create_esync,
      (req_handler)req_open_esync,
      (req_handler)req_get_esync_fd,
 +    (req_handler)req_get_esync_apc_fd,
- };
- 
- C_ASSERT( sizeof(affinity_t) == 8 );
+     (req_handler)req_get_system_info,
+     (req_handler)req_suspend_process,
+     (req_handler)req_resume_process,
 @@ -2429,6 +2431,8 @@ C_ASSERT( sizeof(struct get_esync_fd_request) == 16 );
  C_ASSERT( FIELD_OFFSET(struct get_esync_fd_reply, type) == 8 );
  C_ASSERT( FIELD_OFFSET(struct get_esync_fd_reply, shm_idx) == 12 );
  C_ASSERT( sizeof(struct get_esync_fd_reply) == 16 );
 +C_ASSERT( sizeof(struct get_esync_apc_fd_request) == 16 );
 +C_ASSERT( sizeof(struct get_esync_apc_fd_reply) == 8 );
- 
- #endif  /* WANT_REQUEST_HANDLERS */
- 
+ C_ASSERT( sizeof(struct get_system_info_request) == 16 );
+ C_ASSERT( FIELD_OFFSET(struct get_system_info_reply, processes) == 8 );
+ C_ASSERT( FIELD_OFFSET(struct get_system_info_reply, threads) == 12 );
 diff --git a/server/thread.c b/server/thread.c
 index e1f392f..f324d1e 100644
 --- a/server/thread.c
@@ -390,9 +393,9 @@ index e1f392f..f324d1e 100644
      thread->token           = NULL;
      thread->esync_fd        = -1;
 +    thread->esync_apc_fd    = -1;
- 
-     thread->creation_time = current_time;
-     thread->exit_time     = 0;
+     thread->exit_poll       = NULL;
+     thread->shm_fd          = -1;
+     thread->shm             = NULL;
 @@ -262,7 +263,10 @@ struct thread *create_thread( int fd, struct process *process )
      }
  
@@ -438,9 +441,9 @@ index 2a40c16..d5d33f0 100644
      struct token          *token;         /* security token associated with this thread */
      int                    esync_fd;      /* esync file descriptor (signalled on exit) */
 +    int                    esync_apc_fd;  /* esync apc fd (signalled when APCs are present) */
- };
- 
- struct thread_snapshot
+     struct timeout_user   *exit_poll;     /* poll if the thread/process has exited already */
+     int                    shm_fd;        /* file descriptor for thread local shared memory */
+     shmlocal_t            *shm;           /* thread local shared memory pointer */
 diff --git a/server/trace.c b/server/trace.c
 index 0363a89..2a0ca0d 100644
 --- a/server/trace.c
@@ -461,9 +464,9 @@ index 0363a89..2a0ca0d 100644
      (dump_func)dump_open_esync_request,
      (dump_func)dump_get_esync_fd_request,
 +    (dump_func)dump_get_esync_apc_fd_request,
- };
- 
- static const dump_func reply_dumpers[REQ_NB_REQUESTS] = {
+     (dump_func)dump_get_system_info_request,
+     (dump_func)dump_suspend_process_request,
+     (dump_func)dump_resume_process_request,
 @@ -5161,6 +5166,7 @@ static const dump_func reply_dumpers[REQ_NB_REQUESTS] = {
      (dump_func)dump_create_esync_reply,
      (dump_func)dump_open_esync_reply,
@@ -477,9 +480,9 @@ index 0363a89..2a0ca0d 100644
      "open_esync",
      "get_esync_fd",
 +    "get_esync_apc_fd",
- };
- 
- static const struct
+     "get_system_info",
+     "suspend_process",
+     "resume_process",
 -- 
 2.7.4
 
diff --git a/0064-server-Create-eventfd-descriptors-for-pseudo-fd-obje.patch b/0064-server-Create-eventfd-descriptors-for-pseudo-fd-obje.patch
index 708b4d198c..82beaf1441 100644
--- a/0064-server-Create-eventfd-descriptors-for-pseudo-fd-obje.patch
+++ b/0064-server-Create-eventfd-descriptors-for-pseudo-fd-obje.patch
@@ -24,9 +24,9 @@ index 7747a44..c14c28c 100644
  #include "winternl.h"
  #include "winioctl.h"
 @@ -194,6 +195,7 @@ struct fd
-     struct async_queue   wait_q;      /* other async waiters of this fd */
      struct completion   *completion;  /* completion object attached to this fd */
      apc_param_t          comp_key;    /* completion key to set in completion events */
+     unsigned int         comp_flags;  /* completion flags */
 +    int                  esync_fd;    /* esync file descriptor */
  };
  
@@ -42,9 +42,9 @@ index 7747a44..c14c28c 100644
  
  /* check if the desired access is possible without violating */
 @@ -1608,6 +1613,7 @@ static struct fd *alloc_fd_object(void)
-     fd->fs_locks   = 1;
      fd->poll_index = -1;
      fd->completion = NULL;
+     fd->comp_flags = 0;
 +    fd->esync_fd   = -1;
      init_async_queue( &fd->read_q );
      init_async_queue( &fd->write_q );
