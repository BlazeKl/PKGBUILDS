#!/bin/bash

# TkGlitch's D9VK Updater - ti3nou@gmail.com

# BUILD HEAD OF THE CHOSEN BRANCH WITH : ./upd9vk build - (Edit D9VK_BRANCH to point to the branch you want)

# UPDATE WITH : ./upd9vk /path/to/wine/prefix - (WINEARCH will be autodetected)

# BATCH UPDATE WITH : ./upd9vk batch - (Edit PREFIXES_ROOT variable to point to your prefixes dir)

# LUTRIS UPDATE WITH : ./upd9vk lutris - (Put 'TkG' as D9VK version in lutris afterwards to use your fresh build)
# LUTRIS UPDATE ALTERNATIVE WITH : ./upd9vk lutris-dxvk - (Put 'TkG' as DXVK version in lutris afterwards to use your fresh build - both DXVK and D9VK builds are placed in the same dir with this)

# PROTON-TKG READY WITH : ./upd9vk proton-tkg

# FOR BOTH UPDATE AND BATCH UPDATE : optional - build number of the build you want to install
# ex for UPDATE: ./upd9vk /home/user/WinePrefixes/DEBUG f4a92a685f8b2f135dc6fe493ea9ce726aa79a52-2018-05-05-16:14:00
# ex for BATCH UPDATE: ./upd9vk batch f4a92a685f8b2f135dc6fe493ea9ce726aa79a52-2018-05-05-16:14:00

# Putting patch files in D9VKBUILD/patches will auto-apply them if the extension is .d9vkpatch, auto-revert them if the extension is .d9vkrevert, or ignore them if any other extension (or none) is used

cat << 'EOM'
       .---.`               `.---.
    `/syhhhyso-           -osyhhhys/`
   .syNMdhNNhss/``.---.``/sshNNhdMNys.
   +sdMh.`+MNsssssssssssssssNM+`.hMds+
   :syNNdhNNhssssssssssssssshNNhdNNys:
    /ssyhhhysssssssssssssssssyhhhyss/
    .ossssssssssssssssssssssssssssso.
   :sssssssssssssssssssssssssssssssss:
  /sssssssssssssssssssssssssssssssssss/
 :sssssssssssssoosssssssoosssssssssssss:
 osssssssssssssoosssssssoossssssssssssso
 osssssssssssyyyyhhhhhhhyyyyssssssssssso
 /yyyyyyhhdmmmmNNNNNNNNNNNmmmmdhhyyyyyy/
  smmmNNNNNNNNNNNNNNNNNNNNNNNNNNNNNmmms
   /dNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd/
    `:sdNNNNNNNNNNNNNNNNNNNNNNNNNds:`
       `-+shdNNNNNNNNNNNNNNNdhs+-`
             `.-:///////:-.`

EOM

source upd9vk.cfg

ROOT=$PWD

# Use custom compiler paths if defined
if [ -n "${CUSTOM_MINGW_PATH}" ]; then
  PATH=${CUSTOM_MINGW_PATH}/bin:${CUSTOM_MINGW_PATH}/lib:${CUSTOM_MINGW_PATH}/include:${PATH}
fi
if [ -n "${CUSTOM_GCC_PATH}" ]; then
  PATH=${CUSTOM_GCC_PATH}/bin:${CUSTOM_GCC_PATH}/lib:${CUSTOM_GCC_PATH}/include:${PATH}
fi

_exit_cleanup() {
  rm -rf "$ROOT/D9VKBUILD/d9vk-$DXVK_BRANCH"
  echo -e "\nexit cleanup done"
}

build() {
mkdir -p D9VKBUILD
mkdir -p D9VKBUILD/patches

if [ "$DIRTYIN" != "2" ]; then
  if [ -e "d9vk-$D9VK_BRANCH.d9vkdirty" ] || [ "$DIRTYIN" == "1" ]; then
  rm -R -f d9vk-"$D9VK_BRANCH"
  echo "#################"
  echo ""
  echo "YOUR TREE WAS CONSIDERED DIRTY AND HAS BEEN CLEARED"
  echo ""
  echo "#################"
  rm "$D9VK_BRANCH".d9vkdirty
  fi
else
  echo "#################"
  echo ""
  echo "YOU DIRTY BOI.."
  echo ""
  echo "#################"
fi

mkdir d9vk-"$D9VK_BRANCH"

cd d9vk-"$D9VK_BRANCH"

if [ ! -e package-release.sh ]; then
  git init .
  git remote add -t \* -f origin https://github.com/Joshua-Ashton/d9vk.git
  git checkout "$D9VK_BRANCH"
fi

if [ "$D9VK_AUTOUPDATE" == "1" ]; then
  git pull
fi

if [ -n "$D9VK_COMMIT" ] && [ "$CUSTOM_COMMIT" == "1" ]; then
  git checkout "$D9VK_COMMIT"
fi

GIT_HEAD=$(git rev-parse HEAD)-`date '+%Y-%m-%d-%H:%M:%S'`

if [ "$_nativeopt" == "true" ]; then
  mv ../D9VKBUILD/patches/nativeopt.dxvkpatchb ../D9VKBUILD/patches/nativeopt.dxvkpatch 2>/dev/null
else
  mv ../D9VKBUILD/patches/nativeopt.dxvkpatch ../D9VKBUILD/patches/nativeopt.dxvkpatchb 2>/dev/null
fi

# Community patches
if [ -n "$_community_patches" ]; then
  _community_patches=($_community_patches)
  for _p in ${_community_patches[@]}; do
   ln -s $ROOT/../community-patches/d9vk/$_p $ROOT/D9VKBUILD/patches/
  done
fi

if [ "$PATCHIN" == "1" ]; then
  for F in ../D9VKBUILD/patches/*.d9vkrevert; do
    if [ -e "${F}" ]; then
      echo "#################"
      echo ""
      echo "REVERTING PATCH ${F}"
      echo ""
      echo "#################"
      patch -Np1 -R < ${F} && echo "This means that branch $D9VK_BRANCH was altered by patching and will be cleared next time you build" >> ../"$D9VK_BRANCH".d9vkdirty || exit 1
    else
      echo "#################"
      echo ""
      echo "NO REVERT PATCH DETECTED - MOVING ON"
      echo ""
      echo "#################"
    fi
  done
  for F in ../D9VKBUILD/patches/*.d9vkpatch; do
    if [ -e "${F}" ]; then
      echo "#################"
      echo ""
      echo "APPLYING PATCH ${F}"
      echo ""
      echo "#################"
      patch -Np1 < ${F} && echo "This means that branch $D9VK_BRANCH was altered by patching and will be cleared next time you build" >> ../"$D9VK_BRANCH".d9vkdirty || exit 1
    else
      echo "#################"
      echo ""
      echo "NO PATCH DETECTED - MOVING ON"
      echo ""
      echo "#################"
    fi
  done
fi

# Community patches cleanup
if [ -n $_community_patches ]; then
  for _p in ${_community_patches[@]}; do
   rm -f $ROOT/D9VKBUILD/patches/${_p}
  done
fi

if pacman -Qq ccache &> /dev/null; then
  echo 'ccache was found and will be used'
  sed -i "s|c = 'i686-w64-mingw32-gcc'|c = ['ccache', 'i686-w64-mingw32-gcc']|g" build-win32.txt
  sed -i "s|c = 'x86_64-w64-mingw32-gcc'|c = ['ccache', 'x86_64-w64-mingw32-gcc']|g" build-win64.txt
  sed -i "s|cpp = 'i686-w64-mingw32-g++'|cpp = ['ccache', 'i686-w64-mingw32-g++']|g" build-win32.txt
  sed -i "s|cpp = 'x86_64-w64-mingw32-g++'|cpp = ['ccache', 'x86_64-w64-mingw32-g++']|g" build-win64.txt
else
  echo ""
  echo 'ccache was not found and will not be used'
fi

if [ "$_d3d9_only" == "true" ]; then
  sed -i "s|option('enable_dxgi'.*|option('enable_dxgi',  type : 'boolean', value : false, description: 'Build DXGI')|g" meson_options.txt
  sed -i "s|option('enable_d3d10'.*|option('enable_d3d10', type : 'boolean', value : false, description: 'Build D3D10')|g" meson_options.txt
  sed -i "s|option('enable_d3d11'.*|option('enable_d3d11', type : 'boolean', value : false, description: 'Build D3D11')|g" meson_options.txt
fi

# Enforce version generation
sed -i "s|  command: \['git'.*|  command: \['git', 'describe', '--tags', '--dirty=+'],|g" meson.build

echo "#################"
echo ""
echo "BUILDING"
echo ""
echo "#################"
./package-release.sh "$D9VK_BRANCH" ../D9VKBUILD --no-package

# Workarounds dxvk dirs
if [ -d ../D9VKBUILD/dxvk-"$D9VK_BRANCH" ]; then
  mv ../D9VKBUILD/dxvk-"$D9VK_BRANCH" ../D9VKBUILD/d9vk-"$D9VK_BRANCH"
fi

if [ -d ../D9VKBUILD/d9vk-"$D9VK_BRANCH"/x32 ] && [ -d ../D9VKBUILD/d9vk-"$D9VK_BRANCH"/x64 ]; then
  mkdir -p ../D9VKBUILD/"$D9VK_BRANCH"/"$GIT_HEAD"
  mv -v -T ../D9VKBUILD/d9vk-"$D9VK_BRANCH"/x32 ../D9VKBUILD/"$D9VK_BRANCH"/"$GIT_HEAD"/x32
  cp ../D9VKBUILD/setup_d9vk32.sh ../D9VKBUILD/"$D9VK_BRANCH"/"$GIT_HEAD"/x32/setup_symlink_d9vk.sh
  mv -v -T ../D9VKBUILD/d9vk-"$D9VK_BRANCH"/x64 ../D9VKBUILD/"$D9VK_BRANCH"/"$GIT_HEAD"/x64
  cp ../D9VKBUILD/setup_d9vk64.sh ../D9VKBUILD/"$D9VK_BRANCH"/"$GIT_HEAD"/x64/setup_symlink_d9vk.sh
  cp ../D9VKBUILD/d9vk-"$D9VK_BRANCH"/setup_dxvk.sh ../D9VKBUILD/"$D9VK_BRANCH"/"$GIT_HEAD"/setup_d9vk.sh
  rm -R -f ../D9VKBUILD/d9vk-"$D9VK_BRANCH"
  echo "Your files were built in $ROOT/D9VKBUILD/$D9VK_BRANCH/$GIT_HEAD"
  rm -f ../D9VKBUILD/"$D9VK_BRANCH"/last-HEAD
  echo "CURRENT_HEAD=$GIT_HEAD" >> ../D9VKBUILD/"$D9VK_BRANCH"/last-HEAD
  rm -f ../D9VKBUILD/"$D9VK_BRANCH"/latest
  ln -s "$GIT_HEAD" "$ROOT"/D9VKBUILD/"$D9VK_BRANCH"/latest
else
  rm -rf ../D9VKBUILD/*-"$D9VK_BRANCH"
fi

}

update() {

if [ -d $ROOT/D9VKBUILD ]; then

  source "$ROOT/D9VKBUILD/$D9VK_BRANCH/last-HEAD"

  # kill wineserver before installation to make sure correct wine version is used
  wineserver -k

  WINECMD=${WINE-wine}

  if [ $WINECMD = "wine" ]; then
    if [ $WINEARCH = "win64" ]; then
        WINECMD="wine64"
    else
        WINECMD="wine"
    fi
  fi

  if [ -z $2 ]; then
    cd "$ROOT/D9VKBUILD/$D9VK_BRANCH/$CURRENT_HEAD"
  elif [ -d "$ROOT/D9VKBUILD/$2" ];then
    cd "$ROOT/D9VKBUILD/$2"
  else
    echo "#################################"
    echo ""
    echo "  D9VKBUILD/$2 directory not found !!"
    echo ""
    echo "#################################"
  fi

  if [ -d "x32" ] && [ -d "x64" ]; then
    WINEARCH="$WINEARCH" WINEPREFIX="$WINEPREFIX" bash "$_D9VKALIAS"/setup_symlink_d9vk.sh

    if [ $WINEARCH = "win64" ]; then
        WINEARCH="$WINEARCH" WINEPREFIX="$WINEPREFIX" bash x32/setup_symlink_d9vk.sh
    fi

    echo "#########################################"
    echo ""
    echo "  D9VK updated in $WINEPREFIX - $WINEARCH"
    echo ""
    echo "#########################################"
  fi

  wineserver -k

else
  echo "################################################################"
  echo ""
  echo "You need to build before you can update ! Run upd9vk build first"
  echo ""
  echo "################################################################"
fi
}

# External / Dynamic
if [ -n "$1" ] && [ "$1" != "batch" ] && [ "$1" != "build" ] && [ "$1" != "lutris" ] && [ "$1" != "lutris-dxvk" ] && [ "$1" != "proton-tkg" ]; then
  if [ -d "$1" ]; then
    WINEPREFIX="$1"
    if [ "$2" == "32" ]; then
      echo "x86 prefix"
      WINEARCH="win32"
      _D9VKALIAS="x32"
    elif [ "$2" == "64" ]; then
      echo "x64 prefix"
      WINEARCH="win64"
      _D9VKALIAS="x64"
    elif [ -d "$1/drive_c/Program Files (x86)" ]; then
      echo "assuming x64 prefix"
      WINEARCH="win64"
      _D9VKALIAS="x64"
    else
      echo "assuming x86 prefix"
      WINEARCH="win32"
      _D9VKALIAS="x32"
    fi
  fi
  update
fi

# Batch
if [ "$1" == "batch" ] && [ ! -z "$PREFIXES_ROOT" ]; then
  for D in "$PREFIXES_ROOT"/*; do
    if [ -d "${D}" ]; then
      echo "${D}"
      if [ -d "${D}/drive_c" ]; then
        WINEPREFIX="${D}"
        if [ -d "${D}/drive_c/Program Files (x86)" ]; then
          WINEARCH="win64"
          _D9VKALIAS="x64"
        else
          WINEARCH="win32"
          _D9VKALIAS="x32"
        fi
        update
      fi
    fi
  done
fi

# Lutris default
if [ "$1" == "lutris" ]; then

  wineserver -k

    if [ ! -f ./D9VKBUILD/"$D9VK_BRANCH"/last-HEAD ]; then

      echo "You need to build before you can update ! Run upd9vk build first"

    else

      source "$ROOT/D9VKBUILD/$D9VK_BRANCH/last-HEAD"

      rm -rv "$HOME"/.local/share/lutris/runtime/d9vk/TkG/x64/d3d9.dll
      rm -rv "$HOME"/.local/share/lutris/runtime/d9vk/TkG/x32/d3d9.dll
      mkdir -p "$HOME"/.local/share/lutris/runtime/d9vk/TkG/x64
      mkdir -p "$HOME"/.local/share/lutris/runtime/d9vk/TkG/x32
      cp -rv ./D9VKBUILD/"$D9VK_BRANCH"/"$CURRENT_HEAD"/x64/* "$HOME"/.local/share/lutris/runtime/d9vk/TkG/x64
      cp -rv ./D9VKBUILD/"$D9VK_BRANCH"/"$CURRENT_HEAD"/x32/* "$HOME"/.local/share/lutris/runtime/d9vk/TkG/x32

      echo ""
      echo "###########################################################"
      echo ""
      echo "Put 'TkG' as D9VK version in lutris to use your fresh build"
      echo ""
      echo "###########################################################"

    fi

fi

# Lutris - in DXVK dir
if [ "$1" == "lutris-dxvk" ]; then

  wineserver -k

    if [ ! -f ./D9VKBUILD/"$D9VK_BRANCH"/last-HEAD ]; then

      echo "You need to build before you can update ! Run upd9vk build first"

    else

      source "$ROOT/D9VKBUILD/$D9VK_BRANCH/last-HEAD"

      rm -rv "$HOME"/.local/share/lutris/runtime/dxvk/TkG/x64/d3d9.dll
      rm -rv "$HOME"/.local/share/lutris/runtime/dxvk/TkG/x32/d3d9.dll
      cp -rv ./D9VKBUILD/"$D9VK_BRANCH"/"$CURRENT_HEAD"/x64/* "$HOME"/.local/share/lutris/runtime/dxvk/TkG/x64
      cp -rv ./D9VKBUILD/"$D9VK_BRANCH"/"$CURRENT_HEAD"/x32/* "$HOME"/.local/share/lutris/runtime/dxvk/TkG/x32

      echo ""
      echo "###########################################################"
      echo ""
      echo "Put 'TkG' as DXVK version in lutris to use your fresh build"
      echo ""
      echo "###########################################################"

    fi

fi

# Proton-tkg
if [ "$1" == "proton-tkg" ]; then

  wineserver -k

    if [ ! -f ./D9VKBUILD/"$D9VK_BRANCH"/last-HEAD ]; then

      echo "You need to build before you can update ! Run upd9vk build first"

    else

      source "$ROOT/D9VKBUILD/$D9VK_BRANCH/last-HEAD"

      rm -rf ../proton-tkg/d9vk
      mkdir -p ../proton-tkg/d9vk/x64
      mkdir -p ../proton-tkg/d9vk/x32
      cp -rv ./D9VKBUILD/"$D9VK_BRANCH"/"$CURRENT_HEAD"/x64/* ../proton-tkg/d9vk/x64
      cp -rv ./D9VKBUILD/"$D9VK_BRANCH"/"$CURRENT_HEAD"/x32/* ../proton-tkg/d9vk/x32

      echo ""
      echo "###############################################################"
      echo ""
      echo "This D9VK build will be integrated to your next Proton-tkg build"
      echo ""
      echo "###############################################################"

    fi

fi

# Build from latest master branch
if [ "$1" == "build" ]; then

  time build

fi

trap _exit_cleanup EXIT SIGTERM
