#!/bin/bash

# TkGlitch's DXUP Updater - ti3nou@gmail.com

# BUILD HEAD OF THE CHOSEN BRANCH WITH : ./updxup build - (Edit DXUP_BRANCH to point to the branch you want)

# UPDATE WITH : ./updxup /path/to/wine/prefix - (WINEARCH will be autodetected)

# BATCH UPDATE WITH : ./updxup batch - (Edit PREFIXES_ROOT variable to point to your prefixes dir)

# LUTRIS UPDATE WITH : ./updxup lutris - (Put 'TkG' as DXUP version in lutris afterwards to use your fresh build)

# FOR BOTH UPDATE AND BATCH UPDATE : optional - build number of the build you want to install
# ex for UPDATE: ./updxup /home/user/WinePrefixes/DEBUG f4a92a685f8b2f135dc6fe493ea9ce726aa79a52-2018-05-05-16:14:00
# ex for BATCH UPDATE: ./updxup batch f4a92a685f8b2f135dc6fe493ea9ce726aa79a52-2018-05-05-16:14:00

# Putting patch files in DXUPBUILD/patches will auto-apply them if the extension is .dxuppatch, auto-revert them if the extension is .dxuprevert, or ignore them if any other extension (or none) is used

DXUP_BRANCH=d3d9-dev # DXUP branch to use
CUSTOM_COMMIT=0 # Set to 1 to enable custom commit checkout
DXUP_COMMIT= # targetted custom commit
DXUP_AUTOUPDATE=1 # Git pull (Sync) with clean source before building

PATCHIN=1 # Enables auto-application of all patches present in ./DXUPBUILD/patches - It WILL make your tree dirty if any patch is applied
DIRTYIN=1 # 0: Clear source dir only if marked as dirty from patching - 1: Always clear source dir and redownload from git - 2: Always ignore source dir removal even if dirty

PREFIXES_ROOT=$HOME/wineprefixes # Path to the root folder containing your wine prefixes for batch installing/updating

ROOT=$PWD

build() {
mkdir -p DXUPBUILD
mkdir -p DXUPBUILD/patches

if [ "$DIRTYIN" != "2" ]; then
  if [ -e "dxup-$DXUP_BRANCH.dxupdirty" ] || [ "$DIRTYIN" == "1" ]; then
  rm -R -f dxup-$DXUP_BRANCH
  echo "#################"
  echo ""
  echo "YOUR TREE WAS CONSIDERED DIRTY AND HAS BEEN CLEARED"
  echo ""
  echo "#################"
  rm $DXUP_BRANCH.dxupdirty
  fi
else
  echo "#################"
  echo ""
  echo "YOU DIRTY BOI.."
  echo ""
  echo "#################"
fi

mkdir dxup-$DXUP_BRANCH

cd dxup-$DXUP_BRANCH

if [ ! -e package-release.sh ]; then
  git init .
  git remote add -t \* -f origin https://github.com/Joshua-Ashton/dxup.git
  git checkout $DXUP_BRANCH
fi

if [ "$DXUP_AUTOUPDATE" == "1" ]; then
  git pull
fi

if [ -n $DXUP_COMMIT ] && [ "$CUSTOM_COMMIT" == "1" ]; then
  git checkout $DXUP_COMMIT
fi

GIT_HEAD=$(git rev-parse HEAD)-`date '+%Y-%m-%d-%H:%M:%S'`

if [ "$PATCHIN" == "1" ]; then
  for F in ../DXUPBUILD/patches/*.dxuprevert; do
    if [ -e "${F}" ]; then
      echo "#################"
      echo ""
      echo "REVERTING PATCH ${F}"
      echo ""
      echo "#################"
      patch -Np1 -R < ${F} && echo "This means that branch $DXUP_BRANCH was altered by patching and will be cleared next time you build" >> ../$DXUP_BRANCH.dxupdirty
    else
      echo "#################"
      echo ""
      echo "NO REVERT PATCH DETECTED - MOVING ON"
      echo ""
      echo "#################"
    fi
  done
  for F in ../DXUPBUILD/patches/*.dxuppatch; do
    if [ -e "${F}" ]; then
      echo "#################"
      echo ""
      echo "APPLYING PATCH ${F}"
      echo ""
      echo "#################"
      patch -Np1 < ${F} && echo "This means that branch $DXUP_BRANCH was altered by patching and will be cleared next time you build" >> ../$DXUP_BRANCH.dxupdirty
    else
      echo "#################"
      echo ""
      echo "NO PATCH DETECTED - MOVING ON"
      echo ""
      echo "#################"
    fi
  done
fi

echo "#################"
echo ""
echo "BUILDING"
echo ""
echo "#################"
./package-release.sh $DXUP_BRANCH ../DXUPBUILD --no-package

if [ -d ../DXUPBUILD/dxup-$DXUP_BRANCH/x32 ] && [ -d ../DXUPBUILD/dxup-$DXUP_BRANCH/x64 ]; then
  mv -v -T ../DXUPBUILD/dxup-$DXUP_BRANCH/x32 ../DXUPBUILD/dxup-$DXUP_BRANCH/win32
  mv -v -T ../DXUPBUILD/dxup-$DXUP_BRANCH/x64 ../DXUPBUILD/dxup-$DXUP_BRANCH/win64
  mkdir -p ../DXUPBUILD/$DXUP_BRANCH/$GIT_HEAD
  mv -v -T ../DXUPBUILD/dxup-$DXUP_BRANCH/win32 ../DXUPBUILD/$DXUP_BRANCH/$GIT_HEAD/win32
  cp ../DXUPBUILD/setup_dxup32.sh ../DXUPBUILD/$DXUP_BRANCH/$GIT_HEAD/win32/setup_dxup.sh
  mv -v -T ../DXUPBUILD/dxup-$DXUP_BRANCH/win64 ../DXUPBUILD/$DXUP_BRANCH/$GIT_HEAD/win64
  cp ../DXUPBUILD/setup_dxup64.sh ../DXUPBUILD/$DXUP_BRANCH/$GIT_HEAD/win64/setup_dxup.sh
  rm -R -f ../DXUPBUILD/dxup-$DXUP_BRANCH
  echo "Your files were built in $ROOT/DXUPBUILD/$DXUP_BRANCH/$GIT_HEAD"
  rm -f ../DXUPBUILD/$DXUP_BRANCH/last-HEAD
  echo "CURRENT_HEAD=$GIT_HEAD" >> ../DXUPBUILD/$DXUP_BRANCH/last-HEAD
else
  rm -rf ../DXUPBUILD/*-$DXUP_BRANCH
fi

}

update() {

if [ -d $ROOT/DXUPBUILD ]; then

  . $ROOT/DXUPBUILD/$DXUP_BRANCH/last-HEAD

  # kill wineserver before installation to make sure correct wine version is used
  wineserver -k

  WINECMD=${WINE-wine}

  if [ $WINECMD = "wine" ]; then
    if [ $WINEARCH = "win64" ]; then
        WINECMD="wine64"
    else
        WINECMD="wine"
    fi
  fi

  if [ -z $2 ]; then
    cd $ROOT/DXUPBUILD/$DXUP_BRANCH/$CURRENT_HEAD
  elif [ -d $ROOT/DXUPBUILD/$2 ];then
    cd $ROOT/DXUPBUILD/$2
  else
    echo "#################################"
    echo ""
    echo "  DXUPBUILD/$2 directory not found !!"
    echo ""
    echo "#################################"
  fi

  if [ -d "win32" ] && [ -d "win64" ]; then
    WINEARCH=$WINEARCH WINEPREFIX="$WINEPREFIX" bash $WINEARCH/setup_dxup.sh

    if [ $WINEARCH = "win64" ]; then
        WINEARCH=$WINEARCH WINEPREFIX="$WINEPREFIX" bash win32/setup_dxup.sh
    fi

    echo "#########################################"
    echo ""
    echo "  DXUP updated in $WINEPREFIX - $WINEARCH"
    echo ""
    echo "#########################################"
  fi

  wineserver -k

else
  echo "################################################################"
  echo ""
  echo "You need to build before you can update ! Run updxup build first"
  echo ""
  echo "################################################################"
fi
}

# External / Dynamic
if [ -n $1 ] && [ "$1" != "batch" ] && [ "$1" != "build" ] && [ "$1" != "lutris" ]; then
  if [ -d $1 ]; then
    WINEPREFIX="$1"
    if [ "$2" == "32" ]; then
      echo "x86 prefix"
      WINEARCH="win32"
    elif [ "$2" == "64" ]; then
      echo "x64 prefix"
      WINEARCH="win64"
    elif [ -d "$1/drive_c/Program Files (x86)" ]; then
      echo "assuming x64 prefix"
      WINEARCH="win64"
    else
      echo "assuming x86 prefix"
      WINEARCH="win32"
    fi
  fi
  update
fi

# Batch
if [ "$1" == "batch" ] && [ ! -z $PREFIXES_ROOT ]; then
  for D in $PREFIXES_ROOT/*; do
    if [ -d "${D}" ]; then
      echo "${D}"
      if [ -d "${D}/drive_c" ]; then
        WINEPREFIX="${D}"
        if [ -d "${D}/drive_c/Program Files (x86)" ]; then
          WINEARCH="win64"
        else
          WINEARCH="win32"
        fi
        update
      fi
    fi
  done
fi

# Lutris
if [ "$1" == "lutris" ]; then

  wineserver -k

    if [ ! -f ./DXUPBUILD/$DXUP_BRANCH/last-HEAD ]; then

      echo "You need to build before you can update ! Run updxup build first"

    else

      . ./DXUPBUILD/$DXUP_BRANCH/last-HEAD

      rm -rv $HOME/.local/share/lutris/runtime/dxup/TkG/x64/*
      rm -rv $HOME/.local/share/lutris/runtime/dxup/TkG/x32/*
      mkdir -p $HOME/.local/share/lutris/runtime/dxup/TkG/x64
      mkdir -p $HOME/.local/share/lutris/runtime/dxup/TkG/x32
      cp -rv ./DXUPBUILD/$DXUP_BRANCH/$CURRENT_HEAD/win64/* $HOME/.local/share/lutris/runtime/dxup/TkG/x64
      cp -rv ./DXUPBUILD/$DXUP_BRANCH/$CURRENT_HEAD/win32/* $HOME/.local/share/lutris/runtime/dxup/TkG/x32

      echo ""
      echo "###########################################################"
      echo ""
      echo "Put 'TkG' as DXUP version in lutris to use your fresh build"
      echo ""
      echo "###########################################################"

    fi

fi

# Build from latest master branch
if [ "$1" == "build" ]; then

  time build

fi

exit
