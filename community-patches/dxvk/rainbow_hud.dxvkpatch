From 73790db831779ad2101441785af756169430887d Mon Sep 17 00:00:00 2001
From: Joshua Ashton <joshua@froggi.es>
Date: Fri, 13 Dec 2019 22:30:12 +0000
Subject: [PATCH] =?UTF-8?q?[=F0=9F=8C=88]=20RAINBOWS!!!=20=F0=9F=8C=88?=
 =?UTF-8?q?=F0=9F=8C=88=F0=9F=8C=88=F0=9F=8C=88=F0=9F=8C=88=F0=9F=8C=88?=
 =?UTF-8?q?=F0=9F=8C=88=F0=9F=8C=88=F0=9F=8C=88=F0=9F=8C=88=F0=9F=8C=88?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/dxvk/hud/dxvk_hud_renderer.cpp | 46 +++++++++++++++++++++++++++++-
 src/dxvk/hud/dxvk_hud_renderer.h   |  6 ++++
 2 files changed, 51 insertions(+), 1 deletion(-)

diff --git a/src/dxvk/hud/dxvk_hud_renderer.cpp b/src/dxvk/hud/dxvk_hud_renderer.cpp
index e6f5de15f..3fcb7c559 100644
--- a/src/dxvk/hud/dxvk_hud_renderer.cpp
+++ b/src/dxvk/hud/dxvk_hud_renderer.cpp
@@ -6,6 +6,8 @@
 #include <hud_text_frag.h>
 #include <hud_text_vert.h>
 
+#include <cmath>
+
 namespace dxvk::hud {
   
   HudRenderer::HudRenderer(const Rc<DxvkDevice>& device)
@@ -16,7 +18,8 @@ namespace dxvk::hud {
     m_fontImage     (createFontImage(device)),
     m_fontView      (createFontView(device)),
     m_fontSampler   (createFontSampler(device)),
-    m_vertexBuffer  (createVertexBuffer(device)) {
+    m_vertexBuffer  (createVertexBuffer(device)),
+    m_startTime     (dxvk::high_resolution_clock::now()) {
     this->initFontTexture(device);
     this->initCharMap();
   }
@@ -38,6 +41,45 @@ namespace dxvk::hud {
     m_surfaceSize = surfaceSize;
     m_context     = context;
   }
+
+
+  static HudColor HSVToHudColor(float h, float s, float v, float a) {
+    float hh = std::fmod(h, 360.0f) / 60.0f;
+
+    uint32_t i = static_cast<uint32_t>(hh);
+
+    float ff = hh - float(i);
+
+    float p = v * (1.0f - s);
+    float q = v * (1.0f - (s * ff));
+    float t = v * (1.0f - (s * (1.0f - ff)));
+
+    switch (i) {
+      case 0: return { v, t, p, a };
+      case 1: return { q, v, p, a };
+      case 2: return { p, v, t, a };
+      case 3: return { p, q, v, a };
+      case 4: return { t, p, v, a };
+      default:
+      case 5: return { v, p, q, a };
+    }
+  }
+
+
+  HudColor HudRenderer::generateRainbowColor(HudColor color) {
+    auto now = dxvk::high_resolution_clock::now();
+
+    float secs = std::chrono::duration<float, std::ratio<1>>(now - m_startTime).count();
+
+    float extra = color.r +
+                  color.g * 2.0f +
+                  color.b * 3.0f;
+    extra /= 3.0f;
+
+    float h = (secs + extra) * 360.0f;
+
+    return HSVToHudColor(h, 0.75f, 1.0f, color.a);
+  }
   
   
   void HudRenderer::drawText(
@@ -47,6 +89,8 @@ namespace dxvk::hud {
     const std::string&      text) {
     beginTextRendering();
 
+    color = generateRainbowColor(color);
+
     uint32_t vertexCount = 6 * text.size();
 
     auto vertexSlice = allocVertexBuffer(vertexCount * sizeof(HudTextVertex));
diff --git a/src/dxvk/hud/dxvk_hud_renderer.h b/src/dxvk/hud/dxvk_hud_renderer.h
index 8b658c49d..ce88bfb16 100644
--- a/src/dxvk/hud/dxvk_hud_renderer.h
+++ b/src/dxvk/hud/dxvk_hud_renderer.h
@@ -2,6 +2,8 @@
 
 #include "../dxvk_device.h"
 
+#include "../util/util_time.h"
+
 #include "dxvk_hud_font.h"
 
 namespace dxvk::hud {
@@ -86,6 +88,8 @@ namespace dxvk::hud {
     void beginFrame(
       const Rc<DxvkContext>&  context,
             VkExtent2D        surfaceSize);
+
+    HudColor generateRainbowColor(HudColor color);
     
     void drawText(
             float             size,
@@ -129,6 +133,8 @@ namespace dxvk::hud {
     uint32_t            m_currTextVertex    = 0;
     uint32_t            m_currTextInstance  = 0;
     uint32_t            m_currLineVertex    = 0;
+
+    dxvk::high_resolution_clock::time_point m_startTime;
 
     void allocVertexBufferSlice();
     
