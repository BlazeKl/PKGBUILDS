diff --git a/dlls/bcrypt/bcrypt_main.c b/dlls/bcrypt/bcrypt_main.c
index 2ac36d3db0..b411ad733c 100644
--- a/dlls/bcrypt/bcrypt_main.c
+++ b/dlls/bcrypt/bcrypt_main.c
@@ -1171,6 +1171,12 @@ static NTSTATUS key_import_pair( struct algorithm *alg, const WCHAR *type, BCRYP
 
         switch (alg->id)
         {
+        case ALG_ID_ECDSA_P256:
+            FIXME( "ALG_ID_ECDSA_P256: experimental!\n" );
+            key_size = 32;
+            magic = BCRYPT_ECDSA_PRIVATE_P256_MAGIC;
+            break;
+
         case ALG_ID_ECDH_P256:
             key_size = 32;
             magic = BCRYPT_ECDH_PRIVATE_P256_MAGIC;
diff --git a/dlls/bcrypt/gnutls.c b/dlls/bcrypt/gnutls.c
index a6a07fff19..b78021443c 100644
--- a/dlls/bcrypt/gnutls.c
+++ b/dlls/bcrypt/gnutls.c
@@ -100,6 +100,7 @@ MAKE_FUNCPTR(gnutls_perror);
 MAKE_FUNCPTR(gnutls_privkey_deinit);
 MAKE_FUNCPTR(gnutls_privkey_init);
 MAKE_FUNCPTR(gnutls_privkey_sign_hash);
+MAKE_FUNCPTR(gnutls_decode_rs_value);
 MAKE_FUNCPTR(gnutls_pubkey_deinit);
 MAKE_FUNCPTR(gnutls_pubkey_init);
 #undef MAKE_FUNCPTR
@@ -197,6 +198,7 @@ BOOL gnutls_initialize(void)
     LOAD_FUNCPTR(gnutls_privkey_deinit);
     LOAD_FUNCPTR(gnutls_privkey_init);
     LOAD_FUNCPTR(gnutls_privkey_sign_hash);
+    LOAD_FUNCPTR(gnutls_decode_rs_value);
     LOAD_FUNCPTR(gnutls_pubkey_deinit);
     LOAD_FUNCPTR(gnutls_pubkey_init);
 #undef LOAD_FUNCPTR
@@ -710,6 +712,8 @@ NTSTATUS key_asymmetric_generate( struct key *key )
         bitlen = key->u.a.bitlen;
         break;
 
+    case ALG_ID_ECDSA_P256:
+        FIXME( "ALG_ID_ECDSA_P256: experimental!\n" );
     case ALG_ID_ECDH_P256:
         pk_alg = GNUTLS_PK_ECC; /* compatible with ECDSA and ECDH */
         bitlen = GNUTLS_CURVE_TO_BITS( GNUTLS_ECC_CURVE_SECP256R1 );
@@ -824,6 +828,8 @@ NTSTATUS key_import_ecc( struct key *key, UCHAR *buf, ULONG len )
 
     switch (key->alg_id)
     {
+    case ALG_ID_ECDSA_P256:
+        FIXME( "ALG_ID_ECDSA_P256: experimental!\n" );
     case ALG_ID_ECDH_P256:
         curve = GNUTLS_ECC_CURVE_SECP256R1;
         break;
@@ -1114,20 +1120,33 @@ NTSTATUS key_asymmetric_sign( struct key *key, void *padding, UCHAR *input, ULON
     gnutls_datum_t hash, signature;
     int ret;
 
-    if (key->alg_id != ALG_ID_RSA && key->alg_id != ALG_ID_RSA_SIGN)
-    {
-        FIXME( "algorithm %u not supported\n", key->alg_id );
-        return STATUS_NOT_IMPLEMENTED;
-    }
-    if (flags != BCRYPT_PAD_PKCS1)
+    if (key->alg_id == ALG_ID_ECDSA_P256)
     {
-        FIXME( "flags %08x not implemented\n", flags );
-        return STATUS_NOT_IMPLEMENTED;
+        FIXME( "ALG_ID_ECDSA_P256: experimental!\n" );
+        FIXME( "input len: %u\n", input_len );
+        FIXME( "output len: %u\n", output_len );
+        FIXME( "flags: %u\n", flags );
+        if (pad && pad->pszAlgId)
+            FIXME( "padding: %s\n", pad->pszAlgId );
+
     }
-    if (!pad || !pad->pszAlgId || lstrcmpiW(pad->pszAlgId, BCRYPT_SHA1_ALGORITHM))
+    else
     {
-        FIXME( "%s padding not implemented\n", debugstr_w(pad ? pad->pszAlgId : NULL) );
-        return STATUS_NOT_IMPLEMENTED;
+        if (key->alg_id != ALG_ID_RSA && key->alg_id != ALG_ID_RSA_SIGN)
+        {
+            FIXME( "algorithm %u not supported\n", key->alg_id );
+            return STATUS_NOT_IMPLEMENTED;
+        }
+        if (flags != BCRYPT_PAD_PKCS1)
+        {
+            FIXME( "flags %08x not implemented\n", flags );
+            return STATUS_NOT_IMPLEMENTED;
+        }
+        if (!pad || !pad->pszAlgId || lstrcmpiW(pad->pszAlgId, BCRYPT_SHA1_ALGORITHM))
+        {
+            FIXME( "%s padding not implemented\n", debugstr_w(pad ? pad->pszAlgId : NULL) );
+            return STATUS_NOT_IMPLEMENTED;
+        }
     }
 
     if (!input)
@@ -1143,14 +1162,53 @@ NTSTATUS key_asymmetric_sign( struct key *key, void *padding, UCHAR *input, ULON
     signature.data = NULL;
     signature.size = 0;
 
-    if ((ret = pgnutls_privkey_sign_hash( key->u.a.handle, GNUTLS_DIG_SHA1, 0, &hash, &signature )))
+    if (key->alg_id == ALG_ID_ECDSA_P256)
     {
-        pgnutls_perror( ret );
-        return STATUS_INTERNAL_ERROR;
+        FIXME( "ALG_ID_ECDSA_P256: experimental!\n" );
+
+        //IEEE_P1363 format required
+
+        if ((ret = pgnutls_privkey_sign_hash( key->u.a.handle, GNUTLS_DIG_SHA1, 0, &hash, &signature )))
+        {
+            FIXME( "ALG_ID_ECDSA_P256: signing error %d!\n", ret );
+            pgnutls_perror( ret );
+            return STATUS_INTERNAL_ERROR;
+        }
+
+        FIXME( "ALG_ID_ECDSA_P256: signature size: %d\n", signature.size );
+
+        if (output_len >= 64)
+        {
+            gnutls_datum_t r,s;
+            pgnutls_decode_rs_value(&signature, &r, &s);
+
+            memset(output, 0, 64);
+            if (r.size > 32)
+                memcpy( output, r.data+r.size-32, 32 );
+            else
+                memcpy( output+32-r.size, r.data, r.size );
+            if (s.size > 32)
+                memcpy( output+32, s.data+s.size-32, 32 );
+            else
+                memcpy( output+64-s.size, s.data, s.size );
+
+            free( r.data );
+            free( s.data );
+        }
+        *ret_len = 64;
+    }
+    else
+    {
+        if ((ret = pgnutls_privkey_sign_hash( key->u.a.handle, GNUTLS_DIG_SHA1, 0, &hash, &signature )))
+        {
+            pgnutls_perror( ret );
+            return STATUS_INTERNAL_ERROR;
+        }
+
+        if (output_len >= signature.size) memcpy( output, signature.data, signature.size );
+        *ret_len = signature.size;
     }
 
-    if (output_len >= signature.size) memcpy( output, signature.data, signature.size );
-    *ret_len = signature.size;
 
     free( signature.data );
     return STATUS_SUCCESS;
