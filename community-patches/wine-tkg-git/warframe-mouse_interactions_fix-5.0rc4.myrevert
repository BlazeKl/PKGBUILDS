From c4ad7391956fcbfe7a1a9324ebda1e013e5f6edd Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Fri, 3 Jan 2020 19:42:25 +0100
Subject: [PATCH] msvcrt: Don't use ungetc when reading double in scanf.

It may not work on unbuffered streams.

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/msvcrt/scanf.h         |  43 +++++++-----
 dlls/ucrtbase/tests/scanf.c | 132 ++++++++++++++++++++++++------------
 2 files changed, 115 insertions(+), 60 deletions(-)

diff --git a/dlls/msvcrt/scanf.h b/dlls/msvcrt/scanf.h
index 934bd959531..1833c42dc3d 100644
--- a/dlls/msvcrt/scanf.h
+++ b/dlls/msvcrt/scanf.h
@@ -47,7 +47,6 @@
 
 #ifdef CONSOLE
 #define _GETC_FUNC_(file) _getch()
-#define _UNGETC_FUNC_(nch, file) _ungetch(nch)
 #define _STRTOD_NAME_(func) console_ ## func
 #define _GETC_(file) (consumed++, _getch())
 #define _UNGETC_(nch, file) do { _ungetch(nch); consumed--; } while(0)
@@ -71,7 +70,6 @@
 #undef _EOF_
 #define _EOF_ 0
 #define _GETC_FUNC_(file) (*file++)
-#define _UNGETC_FUNC_(nch, file) do { file--; } while(0)
 #ifdef WIDE_SCANF
 #define _STRTOD_NAME_(func) wstr_ ## func
 #else
@@ -125,7 +123,6 @@
 #else /* STRING */
 #ifdef WIDE_SCANF
 #define _GETC_FUNC_(file) MSVCRT_fgetwc(file)
-#define _UNGETC_FUNC_(nch, file) MSVCRT_ungetwc(nch, file)
 #define _STRTOD_NAME_(func) filew_ ## func
 #define _GETC_(file) (consumed++, MSVCRT_fgetwc(file))
 #define _UNGETC_(nch, file) do { MSVCRT_ungetwc(nch, file); consumed--; } while(0)
@@ -138,7 +135,6 @@
 #endif /* SECURE */
 #else /* WIDE_SCANF */
 #define _GETC_FUNC_(file) MSVCRT_fgetc(file)
-#define _UNGETC_FUNC_(nch, file) MSVCRT_ungetc(nch, file)
 #define _STRTOD_NAME_(func) file_ ## func
 #define _GETC_(file) (consumed++, MSVCRT_fgetc(file))
 #define _UNGETC_(nch, file) do { MSVCRT_ungetc(nch, file); consumed--; } while(0)
@@ -163,22 +159,28 @@ struct _STRTOD_NAME_(strtod_scanf_ctx) {
 #endif
     int length;
     int read;
-    _CHAR_ unget_buf[8];
+    int cur;
+    int unget;
+    BOOL err;
 };
 
 static MSVCRT_wchar_t _STRTOD_NAME_(strtod_scanf_get)(void *ctx)
 {
     struct _STRTOD_NAME_(strtod_scanf_ctx) *context = ctx;
-    int c;
 
+    context->cur = _EOF_;
     if (!context->length) return MSVCRT_WEOF;
-    c = _GETC_FUNC_(context->file);
-    if (c == _EOF_) return MSVCRT_WEOF;
+    if (context->unget != _EOF_) {
+        context->cur = context->unget;
+        context->unget = _EOF_;
+    } else {
+        context->cur = _GETC_FUNC_(context->file);
+        if (context->cur == _EOF_) return MSVCRT_WEOF;
+    }
 
     if (context->length > 0) context->length--;
-    context->unget_buf[context->read % ARRAY_SIZE(context->unget_buf)] = c;
     context->read++;
-    return c;
+    return context->cur;
 }
 
 static void _STRTOD_NAME_(strtod_scanf_unget)(void *ctx)
@@ -187,7 +189,11 @@ static void _STRTOD_NAME_(strtod_scanf_unget)(void *ctx)
 
     if (context->length >= 0) context->length++;
     context->read--;
-    _UNGETC_FUNC_(context->unget_buf[context->read % ARRAY_SIZE(context->unget_buf)], context->file);
+    if (context->unget != _EOF_ || context->cur == _EOF_) {
+        context->err = TRUE;
+        return;
+    }
+    context->unget = context->cur;
 }
 #endif
 
@@ -387,23 +393,27 @@ _FUNCTION_ {
                     /* skip initial whitespace */
                     while ((nch!=_EOF_) && _ISSPACE_(nch))
                         nch = _GETC_(file);
-                    if (nch != _EOF_) _UNGETC_(nch, file);
+                    ctx.unget = nch;
 #ifdef STRING
                     ctx.file = file;
 #endif
 #ifdef STRING_LEN
-                    if(ctx.length > length-consumed) ctx.length = length-consumed;
+                    if(ctx.length > length-consumed+1) ctx.length = length-consumed+1;
 #endif
 
                     cur = parse_double(_STRTOD_NAME_(strtod_scanf_get),
                             _STRTOD_NAME_(strtod_scanf_unget), &ctx, locinfo, NULL);
-                    if(!ctx.read) break;
+                    if(!rd && ctx.err) {
+                        _UNLOCK_FILE_(file);
+                        return _EOF_RET;
+                    }
+                    if(ctx.err || !ctx.read)
+                        break;
                     consumed += ctx.read;
 #ifdef STRING
                     file = ctx.file;
 #endif
-
-                    nch = _GETC_(file);
+                    nch = ctx.cur;
 
                     st = 1;
                     if (!suppress) {
@@ -712,7 +722,6 @@ _FUNCTION_ {
 #undef _WIDE2SUPPORTED_
 #undef _CHAR2DIGIT_
 #undef _GETC_FUNC_
-#undef _UNGETC_FUNC_
 #undef _STRTOD_NAME_
 #undef _GETC_
 #undef _UNGETC_
diff --git a/dlls/ucrtbase/tests/scanf.c b/dlls/ucrtbase/tests/scanf.c
index bf886e7d61f..794309e5c64 100644
--- a/dlls/ucrtbase/tests/scanf.c
+++ b/dlls/ucrtbase/tests/scanf.c
@@ -45,12 +45,12 @@ static BOOL init(void)
     return TRUE;
 }
 
-static int WINAPIV vsscanf_wrapper(unsigned __int64 options, const char *str, const char *format, ...)
+static int WINAPIV vsscanf_wrapper(unsigned __int64 options, const char *str, size_t len, const char *format, ...)
 {
     int ret;
     __ms_va_list valist;
     __ms_va_start(valist, format);
-    ret = p_vsscanf(options, str, -1, format, NULL, valist);
+    ret = p_vsscanf(options, str, len, format, NULL, valist);
     __ms_va_end(valist);
     return ret;
 }
@@ -80,166 +80,166 @@ static void test_sscanf(void)
 
     for (i = 0; i < ARRAY_SIZE(tests); ++i)
     {
-        ret = vsscanf_wrapper(tests[i], "", "%d", &result);
+        ret = vsscanf_wrapper(tests[i], "", -1, "%d", &result);
         ok(ret == EOF, "sscanf returned %d for flags %#x\n", ret, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "000000000046F170", "%p", &ptr);
+        ret = vsscanf_wrapper(tests[i], "000000000046F170", -1, "%p", &ptr);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(ptr == (void *)0x46f170, "sscanf reads %p for flags %#x\n", ptr, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "0046F171", "%p", &ptr);
+        ret = vsscanf_wrapper(tests[i], "0046F171", -1, "%p", &ptr);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(ptr == (void *)0x46f171, "sscanf reads %p for flags %#x\n", ptr, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "46F172", "%p", &ptr);
+        ret = vsscanf_wrapper(tests[i], "46F172", -1, "%p", &ptr);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(ptr == (void *)0x46f172, "sscanf reads %p for flags %#x\n", ptr, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "0x46F173", "%p", &ptr);
+        ret = vsscanf_wrapper(tests[i], "0x46F173", -1, "%p", &ptr);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         todo_wine ok(ptr == (void *)0x46f173, "sscanf reads %p for flags %#x\n", ptr, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "-46F174", "%p", &ptr);
+        ret = vsscanf_wrapper(tests[i], "-46F174", -1, "%p", &ptr);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(ptr == (void *)(ULONG_PTR)-0x46f174, "sscanf reads %p for flags %#x\n", ptr, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "+46F175", "%p", &ptr);
+        ret = vsscanf_wrapper(tests[i], "+46F175", -1, "%p", &ptr);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(ptr == (void *)0x46f175, "sscanf reads %p for flags %#x\n", ptr, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "1233", "%p", &ptr);
+        ret = vsscanf_wrapper(tests[i], "1233", -1, "%p", &ptr);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(ptr == (void *)0x1233, "sscanf reads %p for flags %#x\n", ptr, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "1234", "%P", &ptr);
+        ret = vsscanf_wrapper(tests[i], "1234", -1, "%P", &ptr);
         todo_wine ok(ret == 0, "sscanf returned %d for flags %#x\n", ret, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "0x519", "%x", &result);
+        ret = vsscanf_wrapper(tests[i], "0x519", -1, "%x", &result);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(result == 0x519, "sscanf reads %#x for flags %#x\n", result, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "0x51a", "%x", &result);
+        ret = vsscanf_wrapper(tests[i], "0x51a", -1, "%x", &result);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(result == 0x51a, "sscanf reads %#x for flags %#x\n", result, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "0x51g", "%x", &result);
+        ret = vsscanf_wrapper(tests[i], "0x51g", -1, "%x", &result);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(result == 0x51, "sscanf reads %#x for flags %#x\n", result, tests[i]);
 
         result = 0;
-        ret = vsscanf_wrapper(tests[i], "-1", "%x", &result);
+        ret = vsscanf_wrapper(tests[i], "-1", -1, "%x", &result);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(result == -1, "sscanf reads %#x for flags %#x\n", result, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "\"%12@", "%\"%%%d%@", &result);
+        ret = vsscanf_wrapper(tests[i], "\"%12@", -1, "%\"%%%d%@", &result);
         todo_wine ok(ret == 0, "sscanf returned %d for flags %#x\n", ret, tests[i]);
 
         sprintf(buffer, "%f %f", float1, float2);
-        ret = vsscanf_wrapper(tests[i], buffer, "%f%f", &ret_float1, &ret_float2);
+        ret = vsscanf_wrapper(tests[i], buffer, -1, "%f%f", &ret_float1, &ret_float2);
         ok(ret == 2, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(ret_float1 == float1, "got wrong float %.8e for flags %#x\n", ret_float1, tests[i]);
         ok(ret_float2 == float2, "got wrong float %.8e for flags %#x\n", ret_float2, tests[i]);
 
         sprintf(buffer, "%lf", 32.715);
-        ret = vsscanf_wrapper(tests[i], buffer, "%lf", &double_res);
+        ret = vsscanf_wrapper(tests[i], buffer, -1, "%lf", &double_res);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(double_res == 32.715, "got wrong double %.16e for flags %#x\n", double_res, tests[i]);
-        ret = vsscanf_wrapper(tests[i], buffer, "%Lf", &double_res);
+        ret = vsscanf_wrapper(tests[i], buffer, -1, "%Lf", &double_res);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(double_res == 32.715, "got wrong double %.16e for flags %#x\n", double_res, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "1.1e-30", "%lf", &double_res);
+        ret = vsscanf_wrapper(tests[i], "1.1e-30", -1, "%lf", &double_res);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(double_res == 1.1e-30, "got wrong double %.16e for flags %#x\n", double_res, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "  Waverly", "%*c%[^\n]", buffer);
+        ret = vsscanf_wrapper(tests[i], "  Waverly", -1, "%*c%[^\n]", buffer);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(!strcmp(buffer, " Waverly"), "got string '%s' for flags %#x\n", buffer, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "abcefgdh", "%*[a-cg-e]%c", &buffer[0]);
+        ret = vsscanf_wrapper(tests[i], "abcefgdh", -1, "%*[a-cg-e]%c", &buffer[0]);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(buffer[0] == 'd', "got char '%c' for flags %#x\n", buffer[0], tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "abcefgdh", "%*[a-cd-dg-e]%c", &buffer[0]);
+        ret = vsscanf_wrapper(tests[i], "abcefgdh", -1, "%*[a-cd-dg-e]%c", &buffer[0]);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(buffer[0] == 'h', "got char '%c' for flags %#x\n", buffer[0], tests[i]);
 
         strcpy(buffer, "foo");
         strcpy(buffer1, "bar");
-        ret = vsscanf_wrapper(tests[i], "a", "%s%s", buffer, buffer1);
+        ret = vsscanf_wrapper(tests[i], "a", -1, "%s%s", buffer, buffer1);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(!strcmp(buffer, "a"), "got string '%s' for flags %#x\n", buffer, tests[i]);
         ok(!strcmp(buffer1, "bar"), "got string '%s' for flags %#x\n", buffer1, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "21:59:20", "%d%n", &result, &count);
+        ret = vsscanf_wrapper(tests[i], "21:59:20", -1, "%d%n", &result, &count);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(result == 21, "got wrong number %d for flags %#x\n", result, tests[i]);
         ok(count == 2, "got wrong count %d for flags %#x\n", count, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], ":59:20", "%*c%n", &count);
+        ret = vsscanf_wrapper(tests[i], ":59:20", -1, "%*c%n", &count);
         ok(ret == 0, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(count == 1, "got wrong count %d for flags %#x\n", count, tests[i]);
 
         result = 0xdeadbeef;
-        ret = vsscanf_wrapper(tests[i], "12345678", "%hd", &result);
+        ret = vsscanf_wrapper(tests[i], "12345678", -1, "%hd", &result);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(result == 0xdead614e, "got wrong number %#x for flags %#x\n", result, tests[i]);
 
         result = 0xdeadbeef;
-        ret = vsscanf_wrapper(tests[i], "12345678", "%hhd", &result);
+        ret = vsscanf_wrapper(tests[i], "12345678", -1, "%hhd", &result);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(result == 0xdeadbe4e, "got wrong number %#x for flags %#x\n", result, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "12345678901234", "%lld", &result64);
+        ret = vsscanf_wrapper(tests[i], "12345678901234", -1, "%lld", &result64);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(result64 == 12345678901234, "got wrong number 0x%s for flags %#x\n",
                 wine_dbgstr_longlong(result64), tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "123", "%i", &result);
+        ret = vsscanf_wrapper(tests[i], "123", -1, "%i", &result);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(result == 123, "got wrong number %d for flags %#x\n", result, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "-1", "%i", &result);
+        ret = vsscanf_wrapper(tests[i], "-1", -1, "%i", &result);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(result == -1, "got wrong number %d for flags %#x\n", result, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "123", "%d", &result);
+        ret = vsscanf_wrapper(tests[i], "123", -1, "%d", &result);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(result == 123, "got wrong number %d for flags %#x\n", result, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "-1", "%d", &result);
+        ret = vsscanf_wrapper(tests[i], "-1", -1, "%d", &result);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(result == -1, "got wrong number %d for flags %#x\n", result, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "017", "%i", &result);
+        ret = vsscanf_wrapper(tests[i], "017", -1, "%i", &result);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(result == 15, "got wrong number %d for flags %#x\n", result, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "0x17", "%i", &result);
+        ret = vsscanf_wrapper(tests[i], "0x17", -1, "%i", &result);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(result == 23, "got wrong number %d for flags %#x\n", result, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "-1", "%o", &result);
+        ret = vsscanf_wrapper(tests[i], "-1", -1, "%o", &result);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(result == -1, "got wrong number %d for flags %#x\n", result, tests[i]);
 
         ret = 0xdeadbeef;
-        ret = vsscanf_wrapper(tests[i], "-1", "%u", &result);
+        ret = vsscanf_wrapper(tests[i], "-1", -1, "%u", &result);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(result == -1, "got wrong number %d for flags %#x\n", result, tests[i]);
 
         c = 0x55;
-        ret = vsscanf_wrapper(tests[i], "a", "%c", &c);
+        ret = vsscanf_wrapper(tests[i], "a", -1, "%c", &c);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(c == 'a', "got wrong char '%c' for flags %#x\n", c, tests[i]);
 
         c = 0x55;
-        ret = vsscanf_wrapper(tests[i], " a", "%c", &c);
+        ret = vsscanf_wrapper(tests[i], " a", -1, "%c", &c);
         ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(c == ' ', "got wrong char '%c' for flags %#x\n", c, tests[i]);
 
         c = 0x55;
-        ret = vsscanf_wrapper(tests[i], "18:59", "%d:%d%c", &hour, &min, &c);
+        ret = vsscanf_wrapper(tests[i], "18:59", -1, "%d:%d%c", &hour, &min, &c);
         ok(ret == 2, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(hour == 18, "got wrong char '%c' for flags %#x\n", hour, tests[i]);
         ok(min == 59, "got wrong char '%c' for flags %#x\n", min, tests[i]);
@@ -247,13 +247,13 @@ static void test_sscanf(void)
 
         strcpy(buffer, "foo");
         strcpy(buffer1, "bar");
-        ret = vsscanf_wrapper(tests[i], "abc   def", "%s %n%s", buffer, &count, buffer1);
+        ret = vsscanf_wrapper(tests[i], "abc   def", -1, "%s %n%s", buffer, &count, buffer1);
         ok(ret == 2, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(!strcmp(buffer, "abc"), "got wrong string '%s' for flags %#x\n", buffer, tests[i]);
         ok(count == 6, "got wrong count %d for flags %#x\n", count, tests[i]);
         ok(!strcmp(buffer1, "def"), "got wrong string '%s' for flags %#x\n", buffer1, tests[i]);
 
-        ret = vsscanf_wrapper(tests[i], "3:45", "%d:%d%n", &hour, &min, &count);
+        ret = vsscanf_wrapper(tests[i], "3:45", -1, "%d:%d%n", &hour, &min, &count);
         ok(ret == 2, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(hour == 3, "got wrong char '%c' for flags %#x\n", hour, tests[i]);
         ok(min == 45, "got wrong char '%c' for flags %#x\n", min, tests[i]);
@@ -261,10 +261,56 @@ static void test_sscanf(void)
 
         strcpy(buffer, "foo");
         strcpy(buffer1, "bar");
-        ret = vsscanf_wrapper(tests[i], "test=value\xda", "%[^=] = %[^;]", buffer, buffer1);
+        ret = vsscanf_wrapper(tests[i], "test=value\xda", -1, "%[^=] = %[^;]", buffer, buffer1);
         ok(ret == 2, "sscanf returned %d for flags %#x\n", ret, tests[i]);
         ok(!strcmp(buffer, "test"), "got wrong string '%s' for flags %#x\n", buffer, tests[i]);
         ok(!strcmp(buffer1, "value\xda"), "got wrong string '%s' for flags %#x\n", buffer1, tests[i]);
+
+        ret = vsscanf_wrapper(tests[i], "0.1", 3, "%lf%n", &double_res, &count);
+        ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
+        ok(double_res == 0.1, "got wrong double %.16e for flags %#x\n", double_res, tests[i]);
+        ok(count == 3, "got wrong count %d for flags %#x\n", count, tests[i]);
+
+        ret = vsscanf_wrapper(tests[i], "a", -1, "%lf%n", &double_res, &count);
+        ok(ret == 0, "sscanf returned %d for flags %#x\n", ret, tests[i]);
+
+        ret = vsscanf_wrapper(tests[i], "aa", -1, "%c%lf%n", &c, &double_res, &count);
+        ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
+
+        ret = vsscanf_wrapper(tests[i], "a0e", -1, "%c%lf%n", &c, &double_res, &count);
+        ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
+
+        ret = vsscanf_wrapper(tests[i], "0.", -1, "%lf%n", &double_res, &count);
+        ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
+        ok(double_res == 0, "got wrong double %.16e for flags %#x\n", double_res, tests[i]);
+        ok(count == 2, "got wrong count %d for flags %#x\n", count, tests[i]);
+
+        ret = vsscanf_wrapper(tests[i], "0.", 2, "%lf%n", &double_res, &count);
+        ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
+        ok(double_res == 0, "got wrong double %.16e for flags %#x\n", double_res, tests[i]);
+        ok(count == 2, "got wrong count %d for flags %#x\n", count, tests[i]);
+
+        ret = vsscanf_wrapper(tests[i], "1e", -1, "%lf%n", &double_res, &count);
+        ok(ret == -1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
+
+        ret = vsscanf_wrapper(tests[i], "1e ", 2, "%lf%n", &double_res, &count);
+        ok(ret == -1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
+
+        ret = vsscanf_wrapper(tests[i], "1e+", -1, "%lf%n", &double_res, &count);
+        ok(ret == -1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
+
+        ret = vsscanf_wrapper(tests[i], "inf", -1, "%lf%n", &double_res, &count);
+        ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
+        ok(double_res == INFINITY, "got wrong double %.16e for flags %#x\n", double_res, tests[i]);
+        ok(count == 3, "got wrong count %d for flags %#x\n", count, tests[i]);
+
+        ret = vsscanf_wrapper(tests[i], "infa", -1, "%lf%n", &double_res, &count);
+        ok(ret == 1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
+        ok(double_res == INFINITY, "got wrong double %.16e for flags %#x\n", double_res, tests[i]);
+        ok(count == 3, "got wrong count %d for flags %#x\n", count, tests[i]);
+
+        ret = vsscanf_wrapper(tests[i], "infi", -1, "%lf%n", &double_res, &count);
+        ok(ret == -1, "sscanf returned %d for flags %#x\n", ret, tests[i]);
     }
 }
 
From 1366dd69d5a0578299dc69365db972b0341456d2 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Fri, 3 Jan 2020 19:42:07 +0100
Subject: [PATCH] msvcrt: Update consumed in all scanf variants on end of
 input.

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/msvcrt/scanf.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dlls/msvcrt/scanf.h b/dlls/msvcrt/scanf.h
index 5f88839c915..934bd959531 100644
--- a/dlls/msvcrt/scanf.h
+++ b/dlls/msvcrt/scanf.h
@@ -79,9 +79,9 @@
 #endif
 #ifdef STRING_LEN
 #ifdef WIDE_SCANF
-#define _GETC_(file) (consumed==length ? '\0' : (consumed++, *file++))
+#define _GETC_(file) (consumed++, consumed>length ? '\0' : *file++)
 #else /* WIDE_SCANF */
-#define _GETC_(file) (consumed==length ? '\0' : (consumed++, (unsigned char)*file++))
+#define _GETC_(file) (consumed++, consumed>length ? '\0' : (unsigned char)*file++)
 #endif /* WIDE_SCANF */
 #define _UNGETC_(nch, file) do { file--; consumed--; } while(0)
 #define _LOCK_FILE_(file) do {} while(0)

From 1d91c196e71413b9c72aebc2c4b8df246985fea0 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Fri, 3 Jan 2020 19:41:56 +0100
Subject: [PATCH] ucrtbase: Fix 0 parsing in parse_double.

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/msvcrt/string.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/dlls/msvcrt/string.c b/dlls/msvcrt/string.c
index 796b0134c59..78a115550ca 100644
--- a/dlls/msvcrt/string.c
+++ b/dlls/msvcrt/string.c
@@ -710,6 +710,7 @@ double parse_double(MSVCRT_wchar_t (*get)(void *ctx), void (*unget)(void *ctx),
     }
 
     if(nch == '0') {
+        found_digit = TRUE;
         nch = get(ctx);
         if(nch == 'x' || nch == 'X')
             return strtod16(get, unget, ctx, sign, locinfo, err);


From f99d307a3e1f9beb7fd9dc8892b5cfabbabf816b Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Date: Thu, 2 Jan 2020 19:01:56 +0100
Subject: [PATCH] msvcrt: Use parse_double for scanf floats.

Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/msvcrt/scanf.c  |  16 ++--
 dlls/msvcrt/scanf.h  | 183 +++++++++++++++++++------------------------
 dlls/msvcrt/string.c |   3 +
 3 files changed, 90 insertions(+), 112 deletions(-)

diff --git a/dlls/msvcrt/scanf.c b/dlls/msvcrt/scanf.c
index 09ddf2863f6..04f87077e16 100644
--- a/dlls/msvcrt/scanf.c
+++ b/dlls/msvcrt/scanf.c
@@ -100,24 +100,24 @@ static int wchar2digit(MSVCRT_wchar_t c, int base) {
 /* vsnscanf_s_l */
 #define SECURE
 #include "scanf.h"
+#undef STRING_LEN
 
-/* vsnwscanf_l */
+/* vswscanf_l */
 #define WIDE_SCANF 1
+#undef CONSOLE
+#define STRING 1
 #undef SECURE
 #include "scanf.h"
 
+/* vsnwscanf_l */
+#define STRING_LEN 1
+#include "scanf.h"
+
 /* vsnwscanf_s_l */
 #define SECURE 1
 #include "scanf.h"
 #undef STRING_LEN
 
-/* vswscanf_l */
-#define WIDE_SCANF 1
-#undef CONSOLE
-#define STRING 1
-#undef SECURE
-#include "scanf.h"
-
 /* vswscanf_s_l */
 #define SECURE 1
 #include "scanf.h"
diff --git a/dlls/msvcrt/scanf.h b/dlls/msvcrt/scanf.h
index da65bf8a6b2..5f88839c915 100644
--- a/dlls/msvcrt/scanf.h
+++ b/dlls/msvcrt/scanf.h
@@ -46,6 +46,9 @@
 #endif /* WIDE_SCANF */
 
 #ifdef CONSOLE
+#define _GETC_FUNC_(file) _getch()
+#define _UNGETC_FUNC_(nch, file) _ungetch(nch)
+#define _STRTOD_NAME_(func) console_ ## func
 #define _GETC_(file) (consumed++, _getch())
 #define _UNGETC_(nch, file) do { _ungetch(nch); consumed--; } while(0)
 #define _LOCK_FILE_(file) MSVCRT__lock_file(MSVCRT_stdin)
@@ -67,6 +70,13 @@
 #ifdef STRING
 #undef _EOF_
 #define _EOF_ 0
+#define _GETC_FUNC_(file) (*file++)
+#define _UNGETC_FUNC_(nch, file) do { file--; } while(0)
+#ifdef WIDE_SCANF
+#define _STRTOD_NAME_(func) wstr_ ## func
+#else
+#define _STRTOD_NAME_(func) str_ ## func
+#endif
 #ifdef STRING_LEN
 #ifdef WIDE_SCANF
 #define _GETC_(file) (consumed==length ? '\0' : (consumed++, *file++))
@@ -114,6 +124,9 @@
 #endif /* STRING_LEN */
 #else /* STRING */
 #ifdef WIDE_SCANF
+#define _GETC_FUNC_(file) MSVCRT_fgetwc(file)
+#define _UNGETC_FUNC_(nch, file) MSVCRT_ungetwc(nch, file)
+#define _STRTOD_NAME_(func) filew_ ## func
 #define _GETC_(file) (consumed++, MSVCRT_fgetwc(file))
 #define _UNGETC_(nch, file) do { MSVCRT_ungetwc(nch, file); consumed--; } while(0)
 #define _LOCK_FILE_(file) MSVCRT__lock_file(file)
@@ -124,6 +137,9 @@
 #define _FUNCTION_ static int MSVCRT_vfwscanf_l(MSVCRT_FILE* file, const MSVCRT_wchar_t *format, MSVCRT__locale_t locale, __ms_va_list ap)
 #endif /* SECURE */
 #else /* WIDE_SCANF */
+#define _GETC_FUNC_(file) MSVCRT_fgetc(file)
+#define _UNGETC_FUNC_(nch, file) MSVCRT_ungetc(nch, file)
+#define _STRTOD_NAME_(func) file_ ## func
 #define _GETC_(file) (consumed++, MSVCRT_fgetc(file))
 #define _UNGETC_(nch, file) do { MSVCRT_ungetc(nch, file); consumed--; } while(0)
 #define _LOCK_FILE_(file) MSVCRT__lock_file(file)
@@ -137,6 +153,44 @@
 #endif /* STRING */
 #endif /* CONSOLE */
 
+#if (!defined(SECURE) && !defined(STRING_LEN) && (!defined(CONSOLE) || !defined(WIDE_SCANF)))
+struct _STRTOD_NAME_(strtod_scanf_ctx) {
+    MSVCRT_pthreadlocinfo locinfo;
+#ifdef STRING
+    const _CHAR_ *file;
+#else
+    MSVCRT_FILE *file;
+#endif
+    int length;
+    int read;
+    _CHAR_ unget_buf[8];
+};
+
+static MSVCRT_wchar_t _STRTOD_NAME_(strtod_scanf_get)(void *ctx)
+{
+    struct _STRTOD_NAME_(strtod_scanf_ctx) *context = ctx;
+    int c;
+
+    if (!context->length) return MSVCRT_WEOF;
+    c = _GETC_FUNC_(context->file);
+    if (c == _EOF_) return MSVCRT_WEOF;
+
+    if (context->length > 0) context->length--;
+    context->unget_buf[context->read % ARRAY_SIZE(context->unget_buf)] = c;
+    context->read++;
+    return c;
+}
+
+static void _STRTOD_NAME_(strtod_scanf_unget)(void *ctx)
+{
+    struct _STRTOD_NAME_(strtod_scanf_ctx) *context = ctx;
+
+    if (context->length >= 0) context->length++;
+    context->read--;
+    _UNGETC_FUNC_(context->unget_buf[context->read % ARRAY_SIZE(context->unget_buf)], context->file);
+}
+#endif
+
 _FUNCTION_ {
     MSVCRT_pthreadlocinfo locinfo;
     int rd = 0, consumed = 0;
@@ -322,116 +376,34 @@ _FUNCTION_ {
             case 'f':
             case 'g':
             case 'G': { /* read a float */
-                    long double cur = 1, expcnt = 10;
-                    ULONGLONG d, hlp;
-                    int exp = 0, negative = 0;
-                    unsigned fpcontrol;
-                    BOOL negexp;
+#ifdef CONSOLE
+                    struct _STRTOD_NAME_(strtod_scanf_ctx) ctx = {locinfo, 0, width};
+#else
+                    struct _STRTOD_NAME_(strtod_scanf_ctx) ctx = {locinfo, file, width};
+#endif
+                    int negative = 0;
+                    double cur;
 
                     /* skip initial whitespace */
                     while ((nch!=_EOF_) && _ISSPACE_(nch))
                         nch = _GETC_(file);
+                    if (nch != _EOF_) _UNGETC_(nch, file);
+#ifdef STRING
+                    ctx.file = file;
+#endif
+#ifdef STRING_LEN
+                    if(ctx.length > length-consumed) ctx.length = length-consumed;
+#endif
 
-                    /* get sign. */
-                    if (nch == '-' || nch == '+') {
-                        negative = (nch=='-');
-                        if (width>0) width--;
-                        if (width==0) break;
-                        nch = _GETC_(file);
-                    }
-
-                    /* get first digit. */
-                    if (*locinfo->lconv->decimal_point != nch) {
-                        if (!_ISDIGIT_(nch)) break;
-                        d = nch - '0';
-                        nch = _GETC_(file);
-                        if (width>0) width--;
-                        /* read until no more digits */
-                        while (width!=0 && (nch!=_EOF_) && _ISDIGIT_(nch)) {
-                            hlp = d*10 + nch - '0';
-                            nch = _GETC_(file);
-                            if (width>0) width--;
-                            if(d > (ULONGLONG)-1/10 || hlp<d) {
-                                exp++;
-                                break;
-                            }
-                            else
-                                d = hlp;
-                        }
-                        while (width!=0 && (nch!=_EOF_) && _ISDIGIT_(nch)) {
-                            exp++;
-                            nch = _GETC_(file);
-                            if (width>0) width--;
-                        }
-                    } else {
-                        d = 0; /* Fix: .8 -> 0.8 */
-                    }
-
-                    /* handle decimals */
-                    if (width!=0 && nch == *locinfo->lconv->decimal_point) {
-                        nch = _GETC_(file);
-                        if (width>0) width--;
-
-                        while (width!=0 && (nch!=_EOF_) && _ISDIGIT_(nch)) {
-                            hlp = d*10 + nch - '0';
-                            nch = _GETC_(file);
-                            if (width>0) width--;
-                            if(d > (ULONGLONG)-1/10 || hlp<d)
-                                break;
-
-                            d = hlp;
-                            exp--;
-                        }
-                        while (width!=0 && (nch!=_EOF_) && _ISDIGIT_(nch)) {
-                            nch = _GETC_(file);
-                            if (width>0) width--;
-                        }
-                    }
-
-                    /* handle exponent */
-                    if (width!=0 && (nch == 'e' || nch == 'E')) {
-                        int sign = 1, e = 0;
-
-                        nch = _GETC_(file);
-                        if (width>0) width--;
-                        if (width!=0 && (nch=='+' || nch=='-')) {
-                            if(nch == '-')
-                                sign = -1;
-                            nch = _GETC_(file);
-                            if (width>0) width--;
-                        }
-
-                        /* exponent digits */
-                        while (width!=0 && (nch!=_EOF_) && _ISDIGIT_(nch)) {
-                            if(e > INT_MAX/10 || (e = e*10 + nch - '0')<0)
-                                e = INT_MAX;
-                            nch = _GETC_(file);
-                            if (width>0) width--;
-                        }
-                        e *= sign;
-
-                        if(exp<0 && e<0 && e+exp>0) exp = INT_MIN;
-                        else if(exp>0 && e>0 && e+exp<0) exp = INT_MAX;
-                        else exp += e;
-                    }
-
-                    fpcontrol = _control87(0, 0);
-                    _control87(MSVCRT__EM_DENORMAL|MSVCRT__EM_INVALID|MSVCRT__EM_ZERODIVIDE
-                            |MSVCRT__EM_OVERFLOW|MSVCRT__EM_UNDERFLOW|MSVCRT__EM_INEXACT, 0xffffffff);
-
-                    negexp = (exp < 0);
-                    if(negexp)
-                        exp = -exp;
-                    /* update 'cur' with this exponent. */
-                    while(exp) {
-                        if(exp & 1)
-                            cur *= expcnt;
-                        exp /= 2;
-                        expcnt = expcnt*expcnt;
-                    }
-                    cur = (negexp ? d/cur : d*cur);
+                    cur = parse_double(_STRTOD_NAME_(strtod_scanf_get),
+                            _STRTOD_NAME_(strtod_scanf_unget), &ctx, locinfo, NULL);
+                    if(!ctx.read) break;
+                    consumed += ctx.read;
+#ifdef STRING
+                    file = ctx.file;
+#endif
 
-                    _control87(fpcontrol, 0xffffffff);
+                    nch = _GETC_(file);
 
                     st = 1;
                     if (!suppress) {
@@ -739,6 +711,9 @@ _FUNCTION_ {
 #undef _CHAR2SUPPORTED_
 #undef _WIDE2SUPPORTED_
 #undef _CHAR2DIGIT_
+#undef _GETC_FUNC_
+#undef _UNGETC_FUNC_
+#undef _STRTOD_NAME_
 #undef _GETC_
 #undef _UNGETC_
 #undef _LOCK_FILE_
diff --git a/dlls/msvcrt/string.c b/dlls/msvcrt/string.c
index a1a2c05fbb4..796b0134c59 100644
--- a/dlls/msvcrt/string.c
+++ b/dlls/msvcrt/string.c
@@ -776,6 +776,7 @@ double parse_double(MSVCRT_wchar_t (*get)(void *ctx), void (*unget)(void *ctx),
                     e = INT_MAX;
                 nch = get(ctx);
             }
+            if(nch != MSVCRT_WEOF) unget(ctx);
             e *= s;
 
             if(exp<0 && e<0 && exp+e>=0) exp = INT_MIN;
@@ -786,6 +787,8 @@ double parse_double(MSVCRT_wchar_t (*get)(void *ctx), void (*unget)(void *ctx),
             if(found_sign) unget(ctx);
             unget(ctx);
         }
+    } else if(nch != MSVCRT_WEOF) {
+        unget(ctx);
     }
 
     if(!err) err = MSVCRT__errno();

From 66c9c358ae5c50fc246cf4a4e280b401a5fc730b Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Date: Tue, 31 Dec 2019 16:00:11 -0700
Subject: [PATCH] msvcrt: Use parse_double for wcstod.

Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/msvcrt/msvcrt.h |   1 +
 dlls/msvcrt/wcs.c    | 130 +++++++------------------------------------
 2 files changed, 20 insertions(+), 111 deletions(-)

diff --git a/dlls/msvcrt/msvcrt.h b/dlls/msvcrt/msvcrt.h
index 84e3b013bcd..244df7d23cc 100644
--- a/dlls/msvcrt/msvcrt.h
+++ b/dlls/msvcrt/msvcrt.h
@@ -1073,6 +1073,7 @@ int __cdecl      MSVCRT_iswdigit(MSVCRT_wint_t);
 int __cdecl      MSVCRT_isleadbyte(int);
 int __cdecl      MSVCRT__isleadbyte_l(int, MSVCRT__locale_t);
 int __cdecl      MSVCRT__isspace_l(int, MSVCRT__locale_t);
+int __cdecl      MSVCRT__iswspace_l(MSVCRT_wchar_t, MSVCRT__locale_t);
 
 void __cdecl     MSVCRT__lock_file(MSVCRT_FILE*);
 void __cdecl     MSVCRT__unlock_file(MSVCRT_FILE*);
diff --git a/dlls/msvcrt/wcs.c b/dlls/msvcrt/wcs.c
index 6d03997d9e9..1abe28b7d97 100644
--- a/dlls/msvcrt/wcs.c
+++ b/dlls/msvcrt/wcs.c
@@ -381,15 +381,17 @@ int CDECL MSVCRT__wcsncoll(const MSVCRT_wchar_t* str1, const MSVCRT_wchar_t* str
     return MSVCRT__wcsncoll_l(str1, str2, count, NULL);
 }
 
-static double MSVCRT_mul_pow10(double x, int exp)
+static MSVCRT_wchar_t strtod_wstr_get(void *ctx)
 {
-    BOOL negexp = (exp < 0);
-    double ret;
+    const MSVCRT_wchar_t **p = ctx;
+    if (!**p) return MSVCRT_WEOF;
+    return *(*p)++;
+}
 
-    if(negexp)
-        exp = -exp;
-    ret = pow(10.0, exp);
-    return (negexp ? x/ret : x*ret);
+static void strtod_wstr_unget(void *ctx)
+{
+    const MSVCRT_wchar_t **p = ctx;
+    (*p)--;
 }
 
 /*********************************************************************
@@ -398,121 +400,27 @@ static double MSVCRT_mul_pow10(double x, int exp)
 double CDECL MSVCRT__wcstod_l(const MSVCRT_wchar_t* str, MSVCRT_wchar_t** end,
         MSVCRT__locale_t locale)
 {
-    int exp1=0, exp2=0, exp3=0, sign=1;
     MSVCRT_pthreadlocinfo locinfo;
-    unsigned __int64 d=0, hlp;
-    BOOL found_digit = FALSE;
-    unsigned fpcontrol;
-    const MSVCRT_wchar_t *p;
+    const MSVCRT_wchar_t *beg, *p;
     double ret;
 
-    if (!MSVCRT_CHECK_PMT(str != NULL)) return 0;
+    if (!MSVCRT_CHECK_PMT(str != NULL)) {
+        if (end) *end = NULL;
+        return 0;
+    }
 
-    if(!locale)
+    if (!locale)
         locinfo = get_locinfo();
     else
         locinfo = locale->locinfo;
 
     p = str;
-    while(isspaceW(*p))
-        p++;
-
-    if(*p == '-') {
-        sign = -1;
-        p++;
-    } else  if(*p == '+')
-        p++;
-
-    while(*p>='0' && *p<='9') {
-        found_digit = TRUE;
-        hlp = d*10+*(p++)-'0';
-        if(d>MSVCRT_UI64_MAX/10 || hlp<d) {
-            exp1++;
-            break;
-        } else
-            d = hlp;
-    }
-    while(*p>='0' && *p<='9') {
-        exp1++;
-        p++;
-    }
-    if(*p == *locinfo->lconv->decimal_point)
+    while(MSVCRT__iswspace_l(*p, locale))
         p++;
+    beg = p;
 
-    while(*p>='0' && *p<='9') {
-        found_digit = TRUE;
-        hlp = d*10+*(p++)-'0';
-        if(d>MSVCRT_UI64_MAX/10 || hlp<d)
-            break;
-
-        d = hlp;
-        exp1--;
-    }
-    while(*p>='0' && *p<='9')
-        p++;
-
-    if(!found_digit) {
-        if(end)
-            *end = (MSVCRT_wchar_t*)str;
-        return 0.0;
-    }
-
-    if(*p=='e' || *p=='E' || *p=='d' || *p=='D') {
-        int e=0, s=1;
-
-        p++;
-        if(*p == '-') {
-            s = -1;
-            p++;
-        } else if(*p == '+')
-            p++;
-
-        if(*p>='0' && *p<='9') {
-            while(*p>='0' && *p<='9') {
-                if(e>INT_MAX/10 || (e=e*10+*p-'0')<0)
-                    e = INT_MAX;
-                p++;
-            }
-            e *= s;
-
-            if(exp1<0 && e<0 && exp1+e>=0) exp1 = INT_MIN;
-            else if(exp1>0 && e>0 && exp1+e<0) exp1 = INT_MAX;
-            else exp3 += e;
-        } else {
-            if(*p=='-' || *p=='+')
-                p--;
-            p--;
-        }
-    }
-
-    fpcontrol = _control87(0, 0);
-    _control87(MSVCRT__EM_DENORMAL|MSVCRT__EM_INVALID|MSVCRT__EM_ZERODIVIDE
-               |MSVCRT__EM_OVERFLOW|MSVCRT__EM_UNDERFLOW|MSVCRT__EM_INEXACT|MSVCRT__PC_64,
-               MSVCRT__MCW_EM | MSVCRT__MCW_PC );
-
-    /* take the number without exponent and convert it into a double */
-    ret = MSVCRT_mul_pow10(d, exp1);
-    /* shift the number to the representation where the first non-zero digit is in the ones place */
-    exp2 = (ret != 0.0 ? (int)round(log10(ret)) : 0);
-    if (exp3-exp2 >= MSVCRT_FLT_MIN_10_EXP && exp3-exp2 <= MSVCRT_FLT_MAX_10_EXP)
-        exp2 = 0; /* only bother to take this extra step with very small or very large numbers */
-    /* incorporate an additional shift to deal with floating point denormal values (if necessary) */
-    if(exp3-exp2 < MSVCRT_DBL_MIN_10_EXP)
-        exp2 += exp3-exp2-MSVCRT_DBL_MIN_10_EXP;
-    ret = MSVCRT_mul_pow10(ret, exp2);
-    /* apply the exponent (and undo any shift) */
-    ret = MSVCRT_mul_pow10(ret, exp3-exp2);
-    /* apply the sign bit */
-    ret *= sign;
-
-    _control87( fpcontrol, MSVCRT__MCW_EM | MSVCRT__MCW_PC );
-
-    if((d && ret==0.0) || isinf(ret))
-        *MSVCRT__errno() = MSVCRT_ERANGE;
-
-    if(end)
-        *end = (MSVCRT_wchar_t*)p;
-
+    ret = parse_double(strtod_wstr_get, strtod_wstr_unget, &p, locinfo, NULL);
+    if (end) *end = (p == beg ? (MSVCRT_wchar_t*)str : (MSVCRT_wchar_t*)p);
     return ret;
 }
 
From b12d6d405ab89477dee1083f4af4b858a118ff46 Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Date: Tue, 31 Dec 2019 11:19:07 -0700
Subject: [PATCH] msvcrt: Rework strtod_helper to be reusable.

Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
Signed-off-by: Piotr Caban <piotr@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/msvcrt/msvcrt.h |   2 +
 dlls/msvcrt/string.c | 265 ++++++++++++++++++++++++++-----------------
 2 files changed, 163 insertions(+), 104 deletions(-)

diff --git a/dlls/msvcrt/msvcrt.h b/dlls/msvcrt/msvcrt.h
index ee1a1593852..84e3b013bcd 100644
--- a/dlls/msvcrt/msvcrt.h
+++ b/dlls/msvcrt/msvcrt.h
@@ -1181,6 +1181,7 @@ int __cdecl      MSVCRT__toupper_l(int,MSVCRT__locale_t);
 int __cdecl      MSVCRT__tolower_l(int,MSVCRT__locale_t);
 int __cdecl      MSVCRT__towupper_l(MSVCRT_wint_t,MSVCRT__locale_t);
 int __cdecl      MSVCRT__towlower_l(MSVCRT_wint_t,MSVCRT__locale_t);
+int __cdecl      MSVCRT__toupper(int); /* only use on lower-case ASCII characters */
 int __cdecl      MSVCRT__stricmp(const char*, const char*);
 int __cdecl      MSVCRT__strnicmp(const char*, const char*, MSVCRT_size_t);
 int __cdecl      MSVCRT__strnicoll_l(const char*, const char*, MSVCRT_size_t, MSVCRT__locale_t);
@@ -1190,6 +1191,7 @@ int __cdecl      MSVCRT_strcmp(const char*, const char*);
 char* __cdecl    MSVCRT_strstr(const char*, const char*);
 unsigned int __cdecl MSVCRT__get_output_format(void);
 char* __cdecl MSVCRT_strtok_s(char*, const char*, char**);
+double parse_double(MSVCRT_wchar_t (*)(void*), void (*)(void*), void*, MSVCRT_pthreadlocinfo, int*);
 
 /* Maybe one day we'll enable the invalid parameter handlers with the full set of information (msvcrXXd)
  *      #define MSVCRT_INVALID_PMT(x) MSVCRT_call_invalid_parameter_handler(x, __FUNCTION__, __FILE__, __LINE__, 0)
diff --git a/dlls/msvcrt/string.c b/dlls/msvcrt/string.c
index 51730f6349d..a1a2c05fbb4 100644
--- a/dlls/msvcrt/string.c
+++ b/dlls/msvcrt/string.c
@@ -455,28 +455,30 @@ static inline int hex2int(char c)
     return -1;
 }
 
-static double strtod16(int sign, const char *p, char **end,
-        MSVCRT_pthreadlocinfo locinfo, int *err)
+static double strtod16(MSVCRT_wchar_t get(void *ctx), void unget(void *ctx),
+        void *ctx, int sign, MSVCRT_pthreadlocinfo locinfo, int *err)
 {
+    BOOL found_digit = FALSE, found_dp = FALSE;
     enum round round = ROUND_ZERO;
-    BOOL found_digit = FALSE;
+    MSVCRT_wchar_t nch;
     ULONGLONG m = 0;
     int val, exp = 0;
 
+    nch = get(ctx);
     while(m < MSVCRT_UI64_MAX/16)
     {
-        val = hex2int(*p);
+        val = hex2int(nch);
         if (val == -1) break;
         found_digit = TRUE;
-        p++;
+        nch = get(ctx);
 
         m = m*16 + val;
     }
     while(1)
     {
-        val = hex2int(*p);
+        val = hex2int(nch);
         if (val == -1) break;
-        p++;
+        nch = get(ctx);
         exp += 4;
 
         if (val || round != ROUND_ZERO)
@@ -487,29 +489,33 @@ static double strtod16(int sign, const char *p, char **end,
         }
     }
 
-    if(*p == *locinfo->lconv->decimal_point)
-        p++;
+    if(nch == *locinfo->lconv->decimal_point)
+    {
+        found_dp = TRUE;
+        nch = get(ctx);
+    }
     else if (!found_digit)
     {
-        if(end) *end = (char*)p - 1;
+        if(nch!=MSVCRT_WEOF) unget(ctx);
+        unget(ctx);
         return 0.0;
     }
 
     while(m <= MSVCRT_UI64_MAX/16)
     {
-        val = hex2int(*p);
+        val = hex2int(nch);
         if (val == -1) break;
         found_digit = TRUE;
-        p++;
+        nch = get(ctx);
 
         m = m*16 + val;
         exp -= 4;
     }
     while(1)
     {
-        val = hex2int(*p);
+        val = hex2int(nch);
         if (val == -1) break;
-        p++;
+        nch = get(ctx);
 
         if (val || round != ROUND_ZERO)
         {
@@ -521,39 +527,44 @@ static double strtod16(int sign, const char *p, char **end,
 
     if (!found_digit)
     {
-        if(end) *end = (char*)p - 2;
+        if (nch != MSVCRT_WEOF) unget(ctx);
+        if (found_dp) unget(ctx);
+        unget(ctx);
         return 0.0;
     }
 
-    if(*p=='p' || *p=='P') {
+    if(nch=='p' || nch=='P') {
+        BOOL found_sign = FALSE;
         int e=0, s=1;
 
-        p++;
-        if(*p == '-') {
+        nch = get(ctx);
+        if(nch == '-') {
+            found_sign = TRUE;
             s = -1;
-            p++;
-        } else if(*p == '+')
-            p++;
-
-        if(*p>='0' && *p<='9') {
-            while(*p>='0' && *p<='9') {
-                if(e>INT_MAX/10 || (e=e*10+*p-'0')<0)
+            nch = get(ctx);
+        } else if(nch == '+') {
+            found_sign = TRUE;
+            nch = get(ctx);
+        }
+        if(nch>='0' && nch<='9') {
+            while(nch>='0' && nch<='9') {
+                if(e>INT_MAX/10 || (e=e*10+nch-'0')<0)
                     e = INT_MAX;
-                p++;
+                nch = get(ctx);
             }
+            if((nch!=MSVCRT_WEOF) && (nch < '0' || nch > '9')) unget(ctx);
             e *= s;
 
             if(exp<0 && e<0 && exp+e>=0) exp = INT_MIN;
             else if(exp>0 && e>0 && exp+e<0) exp = INT_MAX;
             else exp += e;
         } else {
-            if(*p=='-' || *p=='+')
-                p--;
-            p--;
+            if(nch != MSVCRT_WEOF) unget(ctx);
+            if(found_sign) unget(ctx);
+            unget(ctx);
         }
     }
 
-    if (end) *end = (char*)p;
     return make_double(sign, exp, m, round, err);
 }
 #endif
@@ -650,111 +661,120 @@ static double convert_e10_to_e2(int sign, int e10, ULONGLONG m, int *err)
     return make_double(sign, e2, u128.u[0], ROUND_DOWN, err);
 }
 
-static double strtod_helper(const char *str, char **end, MSVCRT__locale_t locale, int *err)
+double parse_double(MSVCRT_wchar_t (*get)(void *ctx), void (*unget)(void *ctx),
+        void *ctx, MSVCRT_pthreadlocinfo locinfo, int *err)
 {
-    MSVCRT_pthreadlocinfo locinfo;
+#if _MSVCR_VER >= 140
+    MSVCRT_wchar_t _infinity[] = { 'i', 'n', 'f', 'i', 'n', 'i', 't', 'y', 0 };
+    MSVCRT_wchar_t _nan[] = { 'n', 'a', 'n', 0 };
+    MSVCRT_wchar_t *str_match = NULL;
+    int matched=0;
+#endif
+    BOOL found_digit = FALSE, found_dp = FALSE, found_sign = FALSE;
     unsigned __int64 d=0, hlp;
+    MSVCRT_wchar_t nch;
     int exp=0, sign=1;
-    const char *p;
-    BOOL found_digit = FALSE;
-
-    if(err)
-        *err = 0;
-    else if(!MSVCRT_CHECK_PMT(str != NULL)) {
-        if (end)
-            *end = NULL;
-        return 0;
-    }
 
-    if(!locale)
-        locinfo = get_locinfo();
-    else
-        locinfo = locale->locinfo;
-
-    p = str;
-    while(MSVCRT__isspace_l((unsigned char)*p, locale))
-        p++;
-
-    if(*p == '-') {
+    nch = get(ctx);
+    if(nch == '-') {
+        found_sign = TRUE;
         sign = -1;
-        p++;
-    } else  if(*p == '+')
-        p++;
+        nch = get(ctx);
+    } else if(nch == '+') {
+        found_sign = TRUE;
+        nch = get(ctx);
+    }
 
 #if _MSVCR_VER >= 140
-    if(MSVCRT__tolower_l(p[0], locale) == 'i' && MSVCRT__tolower_l(p[1], locale) == 'n'
-            && MSVCRT__tolower_l(p[2], locale) == 'f') {
-        if(end)
-            *end = (char*) &p[3];
-        if(MSVCRT__tolower_l(p[3], locale) == 'i' && MSVCRT__tolower_l(p[4], locale) == 'n'
-            && MSVCRT__tolower_l(p[5], locale) == 'i' && MSVCRT__tolower_l(p[6], locale) == 't'
-            && MSVCRT__tolower_l(p[7], locale) == 'y' && end)
-            *end = (char*) &p[8];
-        return sign*INFINITY;
-    }
-    if(MSVCRT__tolower_l(p[0], locale) == 'n' &&
-       MSVCRT__tolower_l(p[1], locale) == 'a' &&
-       MSVCRT__tolower_l(p[2], locale) == 'n') {
-        if(end)
-            *end = (char*) &p[3];
-        return NAN;
-    }
-
-    if(p[0] == '0' && (p[1] == 'x' || p[1] == 'X')) {
-        p += 2;
-        return strtod16(sign, p, end, locinfo, err);
+    if(nch == _infinity[0] || nch == MSVCRT__toupper(_infinity[0]))
+        str_match = _infinity;
+    if(nch == _nan[0] || nch == MSVCRT__toupper(_nan[0]))
+        str_match = _nan;
+    while(str_match && nch != MSVCRT_WEOF &&
+            (nch == str_match[matched] || nch == MSVCRT__toupper(str_match[matched]))) {
+        nch = get(ctx);
+        matched++;
+    }
+    if(str_match) {
+        int keep = 0;
+        if(matched >= 8) keep = 8;
+        else if(matched >= 3) keep = 3;
+        if(nch != MSVCRT_WEOF) unget(ctx);
+        for (; matched > keep; matched--) {
+            unget(ctx);
+        }
+        if(keep) {
+            if (str_match == _infinity) return sign*INFINITY;
+            if (str_match == _nan) return sign*NAN;
+        }
+    }
+
+    if(nch == '0') {
+        nch = get(ctx);
+        if(nch == 'x' || nch == 'X')
+            return strtod16(get, unget, ctx, sign, locinfo, err);
     }
 #endif
 
-    while(*p>='0' && *p<='9') {
+    while(nch>='0' && nch<='9') {
         found_digit = TRUE;
-        hlp = d * 10 + *p++ - '0';
+        hlp = d * 10 + nch - '0';
+        nch = get(ctx);
         if(d>MSVCRT_UI64_MAX/10 || hlp<d) {
             exp++;
             break;
         } else
             d = hlp;
     }
-    while(*p>='0' && *p<='9') {
+    while(nch>='0' && nch<='9') {
         exp++;
-        p++;
+        nch = get(ctx);
     }
 
-    if(*p == *locinfo->lconv->decimal_point)
-        p++;
+    if(nch == *locinfo->lconv->decimal_point) {
+        found_dp = TRUE;
+        nch = get(ctx);
+    }
 
-    while(*p>='0' && *p<='9') {
+    while(nch>='0' && nch<='9') {
         found_digit = TRUE;
-        hlp = d * 10 + *p++ - '0';
+        hlp = d * 10 + nch - '0';
+        nch = get(ctx);
         if(d>MSVCRT_UI64_MAX/10 || hlp<d)
             break;
         d = hlp;
         exp--;
     }
-    while(*p>='0' && *p<='9')
-        p++;
+    while(nch>='0' && nch<='9')
+        nch = get(ctx);
 
     if(!found_digit) {
-        if(end)
-            *end = (char*)str;
+        if(nch != MSVCRT_WEOF) unget(ctx);
+        if(found_dp) unget(ctx);
+        if(found_sign) unget(ctx);
         return 0.0;
     }
 
-    if(*p=='e' || *p=='E' || *p=='d' || *p=='D') {
+    if(nch=='e' || nch=='E' || nch=='d' || nch=='D') {
         int e=0, s=1;
 
-        p++;
-        if(*p == '-') {
+        nch = get(ctx);
+        if(nch == '-') {
+            found_sign = TRUE;
             s = -1;
-            p++;
-        } else if(*p == '+')
-            p++;
+            nch = get(ctx);
+        } else if(nch == '+') {
+            found_sign = TRUE;
+            nch = get(ctx);
+        } else {
+            found_sign = FALSE;
+        }
 
-        if(*p>='0' && *p<='9') {
-            while(*p>='0' && *p<='9') {
-                if(e>INT_MAX/10 || (e=e*10+*p-'0')<0)
+        if(nch>='0' && nch<='9') {
+            while(nch>='0' && nch<='9') {
+                if(e>INT_MAX/10 || (e=e*10+nch-'0')<0)
                     e = INT_MAX;
-                p++;
+                nch = get(ctx);
             }
             e *= s;
 
@@ -762,15 +782,12 @@ static double strtod_helper(const char *str, char **end, MSVCRT__locale_t locale
             else if(exp>0 && e>0 && exp+e<0) exp = INT_MAX;
             else exp += e;
         } else {
-            if(*p=='-' || *p=='+')
-                p--;
-            p--;
+            if(nch != MSVCRT_WEOF) unget(ctx);
+            if(found_sign) unget(ctx);
+            unget(ctx);
         }
     }
 
-    if(end)
-        *end = (char*)p;
-
     if(!err) err = MSVCRT__errno();
     if(!d) return make_double(sign, exp, d, ROUND_ZERO, err);
     if(exp > MSVCRT_DBL_MAX_10_EXP)
@@ -783,6 +800,46 @@ static double strtod_helper(const char *str, char **end, MSVCRT__locale_t locale
     return convert_e10_to_e2(sign, exp, d, err);
 }
 
+static MSVCRT_wchar_t strtod_str_get(void *ctx)
+{
+    const char **p = ctx;
+    if (!**p) return MSVCRT_WEOF;
+    return *(*p)++;
+}
+
+static void strtod_str_unget(void *ctx)
+{
+    const char **p = ctx;
+    (*p)--;
+}
+
+static inline double strtod_helper(const char *str, char **end, MSVCRT__locale_t locale, int *err)
+{
+    MSVCRT_pthreadlocinfo locinfo;
+    const char *beg, *p;
+    double ret;
+
+    if (err) *err = 0;
+    if (!MSVCRT_CHECK_PMT(str != NULL)) {
+        if (end) *end = NULL;
+        return 0;
+    }
+
+    if (!locale)
+        locinfo = get_locinfo();
+    else
+        locinfo = locale->locinfo;
+
+    p = str;
+    while(MSVCRT__isspace_l((unsigned char)*p, locale))
+        p++;
+    beg = p;
+
+    ret = parse_double(strtod_str_get, strtod_str_unget, &p, locinfo, err);
+    if (end) *end = (p == beg ? (char*)str : (char*)p);
+    return ret;
+}
+
 /*********************************************************************
  *		strtod_l  (MSVCRT.@)
  */
